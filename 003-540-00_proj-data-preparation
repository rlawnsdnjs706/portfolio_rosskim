{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "cfd24b84-6616-4213-9622-331a533e939a",
   "metadata": {},
   "source": [
    "# DSC540_WK00_term_Kim-Schreck"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "005d2ede-65d4-4c70-b4df-22af2f0d92e2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 00.00.00\n",
    "# imports\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import thinkstats2\n",
    "import thinkplot\n",
    "import matplotlib.pyplot as plt\n",
    "import datetime\n",
    "import statistics\n",
    "import first\n",
    "from scipy.stats import poisson\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.preprocessing import PolynomialFeatures\n",
    "from fuzzywuzzy import fuzz\n",
    "import matplotlib.pyplot as plt\n",
    "import json\n",
    "# python 3.x 버전에서 사용 (2.x 버전이라면 from urllib import urlopen)\n",
    "from urllib.request import urlopen\n",
    "from PyQt5 import QtWidgets\n",
    "from PyQt5.QtWidgets import *\n",
    "import functools as fc\n",
    "import sys\n",
    "from bs4 import BeautifulSoup\n",
    "import mysql.connector\n",
    "import sqlite3\n",
    "import time\n",
    "from sqlalchemy import create_engine\n",
    "from sqlalchemy.orm import sessionmaker\n",
    "from sqlalchemy.ext.declarative import declarative_base\n",
    "from sqlalchemy import Table,Column,Integer,String\n",
    "import glob\n",
    "import os\n",
    "from sqlalchemy import MetaData\n",
    "from sqlalchemy.orm import mapper\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "249837b7-a5e5-427a-8380-0c905eb587c4",
   "metadata": {},
   "source": [
    "## 03-04_milestone_01"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "c7f35e39-18a2-49fd-be2b-a903825e7727",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 01.01.01\n",
    "# PDF\n",
    "\n",
    "# DSC540_WK04_term_Schreck-Kim.pdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "e012b571-323b-4ad4-8327-eefd6c0eb2a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 01.01.02\n",
    "# github repository for DSC540\n",
    "\n",
    "# https://github.com/rlawnsdnjs706/DSC540_term"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3297cfa1-1b3f-4401-be96-6a7d10880004",
   "metadata": {},
   "source": [
    "## 05-06_milestone_02"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "16c16e8f-420c-4f5b-8622-1e204ee53f5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 02.01.00\n",
    "# Cleaning/Formatting Flat File Source"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "cbb0bedc-ab2a-40e1-b824-be4b282a44e6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 02.01.00\n",
    "\n",
    "# Perform at least 5 data transformation and/or cleansing steps to your flat file data. \n",
    "# The below examples are not required - they are just potential transformations you could do. \n",
    "# If your data doesn't work for these scenarios, complete different transformations. \n",
    "# You can do the same transformation multiple times if needed to clean your data. \n",
    "# The goal is a clean dataset at the end of the milestone."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c0ee85c5-58f1-4787-ae2b-1f0631a64951",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 02.01.01\n",
    "# import dataset\n",
    "# dt01\n",
    "\n",
    "dt01 = pd.read_csv('ROK_demographics_2000-2022.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "6e006bea-79c1-4ea2-90b7-464fbb317015",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Region</th>\n",
       "      <th>Birth</th>\n",
       "      <th>Birth_rate</th>\n",
       "      <th>Death</th>\n",
       "      <th>Death_rate</th>\n",
       "      <th>Divorce</th>\n",
       "      <th>Divorce_rate</th>\n",
       "      <th>Marriage</th>\n",
       "      <th>Marriage_rate</th>\n",
       "      <th>Natural_growth</th>\n",
       "      <th>Natural_growth_rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1/1/2000</td>\n",
       "      <td>Busan</td>\n",
       "      <td>3752.0</td>\n",
       "      <td>11.61</td>\n",
       "      <td>1875.0</td>\n",
       "      <td>5.8</td>\n",
       "      <td>814.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2435.0</td>\n",
       "      <td>7.5</td>\n",
       "      <td>1877.0</td>\n",
       "      <td>5.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1/1/2000</td>\n",
       "      <td>Chungcheongbuk-do</td>\n",
       "      <td>1903.0</td>\n",
       "      <td>15.06</td>\n",
       "      <td>924.0</td>\n",
       "      <td>7.3</td>\n",
       "      <td>220.0</td>\n",
       "      <td>1.7</td>\n",
       "      <td>828.0</td>\n",
       "      <td>6.6</td>\n",
       "      <td>979.0</td>\n",
       "      <td>7.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1/1/2000</td>\n",
       "      <td>Chungcheongnam-do</td>\n",
       "      <td>2398.0</td>\n",
       "      <td>14.75</td>\n",
       "      <td>1466.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>321.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1055.0</td>\n",
       "      <td>6.5</td>\n",
       "      <td>932.0</td>\n",
       "      <td>5.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1/1/2000</td>\n",
       "      <td>Daegu</td>\n",
       "      <td>3057.0</td>\n",
       "      <td>14.39</td>\n",
       "      <td>1117.0</td>\n",
       "      <td>5.3</td>\n",
       "      <td>422.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1577.0</td>\n",
       "      <td>7.4</td>\n",
       "      <td>1940.0</td>\n",
       "      <td>9.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1/1/2000</td>\n",
       "      <td>Daejeon</td>\n",
       "      <td>1859.0</td>\n",
       "      <td>16.08</td>\n",
       "      <td>565.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>280.0</td>\n",
       "      <td>2.4</td>\n",
       "      <td>868.0</td>\n",
       "      <td>7.5</td>\n",
       "      <td>1294.0</td>\n",
       "      <td>11.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       Date             Region  ...  Natural_growth  Natural_growth_rate\n",
       "0  1/1/2000              Busan  ...          1877.0                  5.8\n",
       "1  1/1/2000  Chungcheongbuk-do  ...           979.0                  7.7\n",
       "2  1/1/2000  Chungcheongnam-do  ...           932.0                  5.7\n",
       "3  1/1/2000              Daegu  ...          1940.0                  9.1\n",
       "4  1/1/2000            Daejeon  ...          1294.0                 11.2\n",
       "\n",
       "[5 rows x 12 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 02.01.02\n",
    "# return head \n",
    "# dt01\n",
    "\n",
    "dt01.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "9c31adda-f98f-447b-a4f1-e35b70eedd63",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 02.01.03\n",
    "# add index column\n",
    "# index column to select specific rows \n",
    "# dt01\n",
    "\n",
    "dt01.insert(0, 'ID', range(0, 0 + len(dt01)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "3c108c43-3a2f-4354-9175-fa1ba9f8a846",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 02.02.00\n",
    "# Format data into a more readable format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b17b5d6c-1868-485b-b127-ed722398e05a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 02.02.01\n",
    "# Replace Headers \n",
    "# dt01\n",
    "\n",
    "dt01.rename(columns={\"Date\": \"calendar_date\"}, inplace=True)\n",
    "dt01.rename(columns={\"Region\": \"region\"}, inplace=True)\n",
    "dt01.rename(columns={\"Birth\": \"date\"}, inplace=True)\n",
    "dt01.rename(columns={\"Birth_rate\": \"rate_birth\"}, inplace=True)\n",
    "dt01.rename(columns={\"Death\": \"death\"}, inplace=True)\n",
    "dt01.rename(columns={\"Death_rate\": \"rate_death\"}, inplace=True)\n",
    "dt01.rename(columns={\"Divorce\": \"divorce\"}, inplace=True)\n",
    "dt01.rename(columns={\"Divorce_rate\": \"rate_divorce\"}, inplace=True)\n",
    "dt01.rename(columns={\"Marriage\": \"marriage\"}, inplace=True)\n",
    "dt01.rename(columns={\"Marriage_rate\": \"rate_marriage\"}, inplace=True)\n",
    "dt01.rename(columns={\"Natural_growth\": \"growth_natural\"}, inplace=True)\n",
    "dt01.rename(columns={\"Natural_growth_rate\": \"rate_growth_natural\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "ddfbb4c9-7168-4503-b3f4-d72e0329f228",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>calendar_date</th>\n",
       "      <th>region</th>\n",
       "      <th>date</th>\n",
       "      <th>rate_birth</th>\n",
       "      <th>death</th>\n",
       "      <th>rate_death</th>\n",
       "      <th>divorce</th>\n",
       "      <th>rate_divorce</th>\n",
       "      <th>marriage</th>\n",
       "      <th>rate_marriage</th>\n",
       "      <th>growth_natural</th>\n",
       "      <th>rate_growth_natural</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1/1/2000</td>\n",
       "      <td>Busan</td>\n",
       "      <td>3752.0</td>\n",
       "      <td>11.61</td>\n",
       "      <td>1875.0</td>\n",
       "      <td>5.8</td>\n",
       "      <td>814.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2435.0</td>\n",
       "      <td>7.5</td>\n",
       "      <td>1877.0</td>\n",
       "      <td>5.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1/1/2000</td>\n",
       "      <td>Chungcheongbuk-do</td>\n",
       "      <td>1903.0</td>\n",
       "      <td>15.06</td>\n",
       "      <td>924.0</td>\n",
       "      <td>7.3</td>\n",
       "      <td>220.0</td>\n",
       "      <td>1.7</td>\n",
       "      <td>828.0</td>\n",
       "      <td>6.6</td>\n",
       "      <td>979.0</td>\n",
       "      <td>7.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>1/1/2000</td>\n",
       "      <td>Chungcheongnam-do</td>\n",
       "      <td>2398.0</td>\n",
       "      <td>14.75</td>\n",
       "      <td>1466.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>321.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1055.0</td>\n",
       "      <td>6.5</td>\n",
       "      <td>932.0</td>\n",
       "      <td>5.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>1/1/2000</td>\n",
       "      <td>Daegu</td>\n",
       "      <td>3057.0</td>\n",
       "      <td>14.39</td>\n",
       "      <td>1117.0</td>\n",
       "      <td>5.3</td>\n",
       "      <td>422.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1577.0</td>\n",
       "      <td>7.4</td>\n",
       "      <td>1940.0</td>\n",
       "      <td>9.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>1/1/2000</td>\n",
       "      <td>Daejeon</td>\n",
       "      <td>1859.0</td>\n",
       "      <td>16.08</td>\n",
       "      <td>565.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>280.0</td>\n",
       "      <td>2.4</td>\n",
       "      <td>868.0</td>\n",
       "      <td>7.5</td>\n",
       "      <td>1294.0</td>\n",
       "      <td>11.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID calendar_date  ... growth_natural  rate_growth_natural\n",
       "0   0      1/1/2000  ...         1877.0                  5.8\n",
       "1   1      1/1/2000  ...          979.0                  7.7\n",
       "2   2      1/1/2000  ...          932.0                  5.7\n",
       "3   3      1/1/2000  ...         1940.0                  9.1\n",
       "4   4      1/1/2000  ...         1294.0                 11.2\n",
       "\n",
       "[5 rows x 13 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 02.02.02\n",
    "# return head\n",
    "# dt01\n",
    "\n",
    "dt01.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "bd1557ef-f8ee-4166-800f-1a1a63c3c05f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>calendar_date</th>\n",
       "      <th>region</th>\n",
       "      <th>date</th>\n",
       "      <th>rate_birth</th>\n",
       "      <th>death</th>\n",
       "      <th>rate_death</th>\n",
       "      <th>divorce</th>\n",
       "      <th>rate_divorce</th>\n",
       "      <th>marriage</th>\n",
       "      <th>rate_marriage</th>\n",
       "      <th>growth_natural</th>\n",
       "      <th>rate_growth_natural</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2000-01-01</td>\n",
       "      <td>Busan</td>\n",
       "      <td>3752.0</td>\n",
       "      <td>11.61</td>\n",
       "      <td>1875.0</td>\n",
       "      <td>5.8</td>\n",
       "      <td>814.0</td>\n",
       "      <td>2.5</td>\n",
       "      <td>2435.0</td>\n",
       "      <td>7.5</td>\n",
       "      <td>1877.0</td>\n",
       "      <td>5.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2000-01-01</td>\n",
       "      <td>Chungcheongbuk-do</td>\n",
       "      <td>1903.0</td>\n",
       "      <td>15.06</td>\n",
       "      <td>924.0</td>\n",
       "      <td>7.3</td>\n",
       "      <td>220.0</td>\n",
       "      <td>1.7</td>\n",
       "      <td>828.0</td>\n",
       "      <td>6.6</td>\n",
       "      <td>979.0</td>\n",
       "      <td>7.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2000-01-01</td>\n",
       "      <td>Chungcheongnam-do</td>\n",
       "      <td>2398.0</td>\n",
       "      <td>14.75</td>\n",
       "      <td>1466.0</td>\n",
       "      <td>9.0</td>\n",
       "      <td>321.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1055.0</td>\n",
       "      <td>6.5</td>\n",
       "      <td>932.0</td>\n",
       "      <td>5.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>2000-01-01</td>\n",
       "      <td>Daegu</td>\n",
       "      <td>3057.0</td>\n",
       "      <td>14.39</td>\n",
       "      <td>1117.0</td>\n",
       "      <td>5.3</td>\n",
       "      <td>422.0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1577.0</td>\n",
       "      <td>7.4</td>\n",
       "      <td>1940.0</td>\n",
       "      <td>9.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>2000-01-01</td>\n",
       "      <td>Daejeon</td>\n",
       "      <td>1859.0</td>\n",
       "      <td>16.08</td>\n",
       "      <td>565.0</td>\n",
       "      <td>4.9</td>\n",
       "      <td>280.0</td>\n",
       "      <td>2.4</td>\n",
       "      <td>868.0</td>\n",
       "      <td>7.5</td>\n",
       "      <td>1294.0</td>\n",
       "      <td>11.2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   ID calendar_date  ... growth_natural  rate_growth_natural\n",
       "0   0    2000-01-01  ...         1877.0                  5.8\n",
       "1   1    2000-01-01  ...          979.0                  7.7\n",
       "2   2    2000-01-01  ...          932.0                  5.7\n",
       "3   3    2000-01-01  ...         1940.0                  9.1\n",
       "4   4    2000-01-01  ...         1294.0                 11.2\n",
       "\n",
       "[5 rows x 13 columns]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 02.02.03\n",
    "# Fix casing or inconsistent values\n",
    "# convert integer date column to dates in international format\n",
    "# US format is incompatible \n",
    "# dt01\n",
    "\n",
    "dt01['calendar_date'] = pd.to_datetime(dt01['calendar_date'], format='%m/%d/%Y')\n",
    "dt01.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "45525b1e-e57c-41d7-bf08-0c014868e8dc",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 02.03.01\n",
    "# Conduct Fuzzy Matching\n",
    "# old romanisation of 'seoul' \n",
    "# dt01\n",
    "\n",
    "st01 = \"Sol\"\n",
    "st02 = \"Seoul\"\n",
    "FM_ratio_01_02 = fuzz.ratio(st01.lower(),st01.lower())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "561f0334-ced5-48b8-8b3b-7e64bde9494e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "100\n"
     ]
    }
   ],
   "source": [
    "# 02.03.02\n",
    "# Conduct Fuzzy Matching\n",
    "# return ratio \n",
    "# dt01\n",
    "\n",
    "print(FM_ratio_01_02)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "40afbdde-0a07-4f22-b9fa-9353b05b7adf",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 02.03.03\n",
    "# Conduct Fuzzy Matching\n",
    "# old romanisation of 'seoul' \n",
    "# dt01\n",
    "\n",
    "st03 = \"Sŏl\"\n",
    "st02 = \"Seoul\"\n",
    "FM_ratio_03_02 = fuzz.ratio(st03.lower(),st01.lower())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "66db4c53-b68c-4c3c-844b-2e662a0278ed",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "67\n"
     ]
    }
   ],
   "source": [
    "# 02.03.04\n",
    "# Conduct Fuzzy Matching\n",
    "# return ratio \n",
    "# dt01\n",
    "\n",
    "print(FM_ratio_03_02)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "54848a91-29c8-4e8c-94a3-fe5991967d15",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>calendar_date</th>\n",
       "      <th>date</th>\n",
       "      <th>rate_birth</th>\n",
       "      <th>death</th>\n",
       "      <th>rate_death</th>\n",
       "      <th>divorce</th>\n",
       "      <th>rate_divorce</th>\n",
       "      <th>marriage</th>\n",
       "      <th>rate_marriage</th>\n",
       "      <th>growth_natural</th>\n",
       "      <th>rate_growth_natural</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>region</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>15</td>\n",
       "      <td>2000-01-01</td>\n",
       "      <td>12866.0</td>\n",
       "      <td>14.79</td>\n",
       "      <td>3931.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1835.0</td>\n",
       "      <td>2.1</td>\n",
       "      <td>6781.0</td>\n",
       "      <td>7.8</td>\n",
       "      <td>8935.0</td>\n",
       "      <td>10.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>33</td>\n",
       "      <td>2000-02-01</td>\n",
       "      <td>11797.0</td>\n",
       "      <td>14.48</td>\n",
       "      <td>3218.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1912.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>5596.0</td>\n",
       "      <td>6.9</td>\n",
       "      <td>8579.0</td>\n",
       "      <td>10.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>51</td>\n",
       "      <td>2000-03-01</td>\n",
       "      <td>12453.0</td>\n",
       "      <td>14.29</td>\n",
       "      <td>3368.0</td>\n",
       "      <td>3.9</td>\n",
       "      <td>2333.0</td>\n",
       "      <td>2.7</td>\n",
       "      <td>6781.0</td>\n",
       "      <td>7.8</td>\n",
       "      <td>9085.0</td>\n",
       "      <td>10.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>69</td>\n",
       "      <td>2000-04-01</td>\n",
       "      <td>10782.0</td>\n",
       "      <td>12.77</td>\n",
       "      <td>3204.0</td>\n",
       "      <td>3.8</td>\n",
       "      <td>1916.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>6667.0</td>\n",
       "      <td>7.9</td>\n",
       "      <td>7578.0</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>87</td>\n",
       "      <td>2000-05-01</td>\n",
       "      <td>10817.0</td>\n",
       "      <td>12.39</td>\n",
       "      <td>3064.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2108.0</td>\n",
       "      <td>2.4</td>\n",
       "      <td>8428.0</td>\n",
       "      <td>9.7</td>\n",
       "      <td>7753.0</td>\n",
       "      <td>8.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>4785</td>\n",
       "      <td>2022-02-01</td>\n",
       "      <td>3452.0</td>\n",
       "      <td>4.80</td>\n",
       "      <td>4511.0</td>\n",
       "      <td>6.3</td>\n",
       "      <td>1007.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>2979.0</td>\n",
       "      <td>4.1</td>\n",
       "      <td>-1059.0</td>\n",
       "      <td>-1.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>4803</td>\n",
       "      <td>2022-03-01</td>\n",
       "      <td>4002.0</td>\n",
       "      <td>5.00</td>\n",
       "      <td>6529.0</td>\n",
       "      <td>8.2</td>\n",
       "      <td>1084.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>2774.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>-2527.0</td>\n",
       "      <td>-3.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>4821</td>\n",
       "      <td>2022-04-01</td>\n",
       "      <td>3603.0</td>\n",
       "      <td>4.70</td>\n",
       "      <td>5351.0</td>\n",
       "      <td>6.9</td>\n",
       "      <td>1056.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>2844.0</td>\n",
       "      <td>3.7</td>\n",
       "      <td>-1747.0</td>\n",
       "      <td>-2.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>4839</td>\n",
       "      <td>2022-05-01</td>\n",
       "      <td>3372.0</td>\n",
       "      <td>4.20</td>\n",
       "      <td>4172.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>1263.0</td>\n",
       "      <td>1.6</td>\n",
       "      <td>3259.0</td>\n",
       "      <td>4.1</td>\n",
       "      <td>-800.0</td>\n",
       "      <td>-1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>4857</td>\n",
       "      <td>2022-06-01</td>\n",
       "      <td>3137.0</td>\n",
       "      <td>4.10</td>\n",
       "      <td>3631.0</td>\n",
       "      <td>4.7</td>\n",
       "      <td>1088.0</td>\n",
       "      <td>1.4</td>\n",
       "      <td>2630.0</td>\n",
       "      <td>3.4</td>\n",
       "      <td>-494.0</td>\n",
       "      <td>-0.6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>270 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          ID calendar_date  ...  growth_natural  rate_growth_natural\n",
       "region                      ...                                     \n",
       "Seoul     15    2000-01-01  ...          8935.0                 10.3\n",
       "Seoul     33    2000-02-01  ...          8579.0                 10.5\n",
       "Seoul     51    2000-03-01  ...          9085.0                 10.4\n",
       "Seoul     69    2000-04-01  ...          7578.0                  9.0\n",
       "Seoul     87    2000-05-01  ...          7753.0                  8.9\n",
       "...      ...           ...  ...             ...                  ...\n",
       "Seoul   4785    2022-02-01  ...         -1059.0                 -1.5\n",
       "Seoul   4803    2022-03-01  ...         -2527.0                 -3.2\n",
       "Seoul   4821    2022-04-01  ...         -1747.0                 -2.3\n",
       "Seoul   4839    2022-05-01  ...          -800.0                 -1.0\n",
       "Seoul   4857    2022-06-01  ...          -494.0                 -0.6\n",
       "\n",
       "[270 rows x 12 columns]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 02.04.01\n",
    "# filter Seoul \n",
    "# dt01\n",
    "\n",
    "dt01.set_index(\"region\", inplace = True)\n",
    "dt01 = dt01.loc[\"Seoul\"]\n",
    "dt01"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "46b5e44b-2a50-48c5-923c-5b4212627238",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>calendar_date</th>\n",
       "      <th>date</th>\n",
       "      <th>rate_birth</th>\n",
       "      <th>death</th>\n",
       "      <th>rate_death</th>\n",
       "      <th>divorce</th>\n",
       "      <th>rate_divorce</th>\n",
       "      <th>marriage</th>\n",
       "      <th>rate_marriage</th>\n",
       "      <th>growth_natural</th>\n",
       "      <th>rate_growth_natural</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>region</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>15</td>\n",
       "      <td>2000-01-01</td>\n",
       "      <td>12866.0</td>\n",
       "      <td>14.79</td>\n",
       "      <td>3931.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1835.0</td>\n",
       "      <td>2.1</td>\n",
       "      <td>6781.0</td>\n",
       "      <td>7.8</td>\n",
       "      <td>8935.0</td>\n",
       "      <td>10.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>33</td>\n",
       "      <td>2000-02-01</td>\n",
       "      <td>11797.0</td>\n",
       "      <td>14.48</td>\n",
       "      <td>3218.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1912.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>5596.0</td>\n",
       "      <td>6.9</td>\n",
       "      <td>8579.0</td>\n",
       "      <td>10.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>51</td>\n",
       "      <td>2000-03-01</td>\n",
       "      <td>12453.0</td>\n",
       "      <td>14.29</td>\n",
       "      <td>3368.0</td>\n",
       "      <td>3.9</td>\n",
       "      <td>2333.0</td>\n",
       "      <td>2.7</td>\n",
       "      <td>6781.0</td>\n",
       "      <td>7.8</td>\n",
       "      <td>9085.0</td>\n",
       "      <td>10.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>69</td>\n",
       "      <td>2000-04-01</td>\n",
       "      <td>10782.0</td>\n",
       "      <td>12.77</td>\n",
       "      <td>3204.0</td>\n",
       "      <td>3.8</td>\n",
       "      <td>1916.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>6667.0</td>\n",
       "      <td>7.9</td>\n",
       "      <td>7578.0</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>87</td>\n",
       "      <td>2000-05-01</td>\n",
       "      <td>10817.0</td>\n",
       "      <td>12.39</td>\n",
       "      <td>3064.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2108.0</td>\n",
       "      <td>2.4</td>\n",
       "      <td>8428.0</td>\n",
       "      <td>9.7</td>\n",
       "      <td>7753.0</td>\n",
       "      <td>8.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        ID calendar_date  ...  growth_natural  rate_growth_natural\n",
       "region                    ...                                     \n",
       "Seoul   15    2000-01-01  ...          8935.0                 10.3\n",
       "Seoul   33    2000-02-01  ...          8579.0                 10.5\n",
       "Seoul   51    2000-03-01  ...          9085.0                 10.4\n",
       "Seoul   69    2000-04-01  ...          7578.0                  9.0\n",
       "Seoul   87    2000-05-01  ...          7753.0                  8.9\n",
       "\n",
       "[5 rows x 12 columns]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 02.04.02\n",
    "# return Seoul \n",
    "# dt01\n",
    "\n",
    "dt01.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "8a31c9df-eb0e-4bb6-8b86-ac75c9ef99ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 02.05.00\n",
    "# Identify outliers and bad data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "dcb9df34-fbd0-44cc-9daa-db076d592c6d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 02.05.01\n",
    "# hist of dt_seoul.Natural_growth_rate\n",
    "# There doesn't seem to be any outliers in the main variable. \n",
    "# dt01\n",
    "\n",
    "dt01_hist01 = thinkstats2.Hist(dt01.rate_growth_natural, label=\"dt01.rate_growth_natural\")\n",
    "thinkplot.Hist(dt01_hist01)\n",
    "thinkplot.Config(xlabel=\"growth\", ylabel=\"Count\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6917d5a5-a7aa-4029-9ec9-003c7f212178",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "270\n"
     ]
    }
   ],
   "source": [
    "# 02.05.02\n",
    "# Find duplicates\n",
    "# return length \n",
    "# dt01\n",
    "\n",
    "print(len(dt01))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "925381c7-95b6-42f3-b1d5-538765fb298b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 02.05.03\n",
    "# Find duplicates\n",
    "# create set \n",
    "# dt01\n",
    "\n",
    "set01 = set(dt01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "056bc89e-53d0-4165-b02c-3fb16b085568",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12\n"
     ]
    }
   ],
   "source": [
    "# 02.05.04\n",
    "# Find duplicates\n",
    "# return set \n",
    "# dt01\n",
    "\n",
    "print(len(set01))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "ab8a386b-4b70-49d4-8df9-4281be36b079",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "duplicates found\n"
     ]
    }
   ],
   "source": [
    "# 02.05.05\n",
    "# Find duplicates \n",
    "# dt01\n",
    "\n",
    "if len(dt01) != len(set01):\n",
    "    print(\"duplicates found\")\n",
    "else:\n",
    "    print(\"duplicates not found\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ea0d9f40-cb8e-4a9f-8efb-5c184c02e352",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "270"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 02.05.06\n",
    "# Find duplicates\n",
    "# return number of rows\n",
    "# duplicates are Seoul only \n",
    "# dt01\n",
    "\n",
    "len(dt01.index)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b20fba5b-caf2-413b-aa87-06c9ab225cc1",
   "metadata": {},
   "source": [
    "## 07-08_milestone_03"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "0428bfbe-4a17-4acd-9449-674f9ce22561",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 03.01.00\n",
    "# Cleaning/Formatting Website Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "b5a5ebba-7b74-4a78-ba92-9a9dd94da9b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 03.01.00\n",
    "# Perform at least 5 data transformation and/or cleansing steps to your website data. \n",
    "# The below examples are not required - they are just potential transformations you could do. \n",
    "# If your data doesn't work for these scenarios, complete different transformations. \n",
    "# You can do the same transformation multiple times if needed to clean your data. \n",
    "# The goal is a clean dataset at the end of the milestone."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "51754a10-90d5-49ff-9352-5152f78915e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 03.01.01\n",
    "# return head \n",
    "# dt01\n",
    "\n",
    "# dt01.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "760b5e56-2bdd-4391-a9bb-8d9bf349c2a6",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 03.02.01\n",
    "# import dataset as \n",
    "# dt02\n",
    "\n",
    "dt02 = pd.read_csv('ROK_income_welfare.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "b9a44e47-7f5e-48f5-95cf-870fc5212160",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>id</th>\n",
       "      <th>year</th>\n",
       "      <th>wave</th>\n",
       "      <th>region</th>\n",
       "      <th>income</th>\n",
       "      <th>family_member</th>\n",
       "      <th>gender</th>\n",
       "      <th>year_born</th>\n",
       "      <th>education_level</th>\n",
       "      <th>marriage</th>\n",
       "      <th>religion</th>\n",
       "      <th>occupation</th>\n",
       "      <th>company_size</th>\n",
       "      <th>reason_none_worker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>10101</td>\n",
       "      <td>2005</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>614.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>10101</td>\n",
       "      <td>2011</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>896.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>10101</td>\n",
       "      <td>2012</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1310.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10101</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>2208.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>10101</td>\n",
       "      <td>2014</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>864.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      id  year  wave  ...  occupation  company_size  reason_none_worker\n",
       "0  10101  2005     1  ...                                             8\n",
       "1  10101  2011     7  ...                                            10\n",
       "2  10101  2012     8  ...                                            10\n",
       "3  10101  2013     9  ...                                             1\n",
       "4  10101  2014    10  ...                                            10\n",
       "\n",
       "[5 rows x 14 columns]"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 03.02.02\n",
    "# return head \n",
    "# dt02\n",
    "\n",
    "dt02.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "08ef4ee2-9aa2-4a5b-a947-4223aca2b171",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 03.02.03\n",
    "# add index column\n",
    "# index column to select specific rows \n",
    "# dt02\n",
    "\n",
    "dt02.insert(0, 'index', range(0, 0 + len(dt02)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "4aa3c04f-b0bb-4144-a7b7-4aacfb2894f9",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>id</th>\n",
       "      <th>year</th>\n",
       "      <th>wave</th>\n",
       "      <th>region</th>\n",
       "      <th>income</th>\n",
       "      <th>family_member</th>\n",
       "      <th>gender</th>\n",
       "      <th>year_born</th>\n",
       "      <th>education_level</th>\n",
       "      <th>marriage</th>\n",
       "      <th>religion</th>\n",
       "      <th>occupation</th>\n",
       "      <th>company_size</th>\n",
       "      <th>reason_none_worker</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>10101</td>\n",
       "      <td>2005</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>614.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>10101</td>\n",
       "      <td>2011</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>896.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>10101</td>\n",
       "      <td>2012</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1310.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>10101</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>2208.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>10101</td>\n",
       "      <td>2014</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>864.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index     id  year  ...  occupation  company_size  reason_none_worker\n",
       "0      0  10101  2005  ...                                             8\n",
       "1      1  10101  2011  ...                                            10\n",
       "2      2  10101  2012  ...                                            10\n",
       "3      3  10101  2013  ...                                             1\n",
       "4      4  10101  2014  ...                                            10\n",
       "\n",
       "[5 rows x 15 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 03.02.04\n",
    "# return head \n",
    "# dt02\n",
    "\n",
    "dt02.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "69cb0ebc-4326-40fe-9c61-10b15a2d87b8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 03.02.05\n",
    "# Replace Headers \n",
    "# replaced three columns \n",
    "# dt02\n",
    "\n",
    "dt02.rename(columns={\"family_member\": \"fam_mem_num\"}, inplace=True)\n",
    "dt02.rename(columns={\"year_born\": \"birth_year\"}, inplace=True)\n",
    "dt02.rename(columns={\"reason_none_worker\": \"unemployment_reason\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "2a3b84c6-7c63-41f1-85f6-dec2559e6094",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>id</th>\n",
       "      <th>year</th>\n",
       "      <th>wave</th>\n",
       "      <th>region</th>\n",
       "      <th>income</th>\n",
       "      <th>fam_mem_num</th>\n",
       "      <th>gender</th>\n",
       "      <th>birth_year</th>\n",
       "      <th>education_level</th>\n",
       "      <th>marriage</th>\n",
       "      <th>religion</th>\n",
       "      <th>occupation</th>\n",
       "      <th>company_size</th>\n",
       "      <th>unemployment_reason</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>10101</td>\n",
       "      <td>2005</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>614.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>10101</td>\n",
       "      <td>2011</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>896.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>10101</td>\n",
       "      <td>2012</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1310.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>10101</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>2208.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>10101</td>\n",
       "      <td>2014</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>864.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index     id  year  ...  occupation  company_size  unemployment_reason\n",
       "0      0  10101  2005  ...                                              8\n",
       "1      1  10101  2011  ...                                             10\n",
       "2      2  10101  2012  ...                                             10\n",
       "3      3  10101  2013  ...                                              1\n",
       "4      4  10101  2014  ...                                             10\n",
       "\n",
       "[5 rows x 15 columns]"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 03.02.06\n",
    "# Replace Headers\n",
    "# return head dt02\n",
    "\n",
    "dt02.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "5dba239f-6f3f-4649-bedb-a0e78d0823b0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(270, 12)\n"
     ]
    }
   ],
   "source": [
    "# 03.03.01\n",
    "# verify dimensions \n",
    "# dt01\n",
    "\n",
    "print(dt01.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "4f32a20a-fcac-4384-8310-cc6f878add24",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(92857, 15)\n"
     ]
    }
   ],
   "source": [
    "# 03.03.02\n",
    "# verify dimensions \n",
    "# dt02\n",
    "\n",
    "print(dt02.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "5e81eb87-2733-497f-a828-0aaa1e7855aa",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['ID', 'calendar_date', 'date', 'rate_birth', 'death', 'rate_death',\n",
      "       'divorce', 'rate_divorce', 'marriage', 'rate_marriage',\n",
      "       'growth_natural', 'rate_growth_natural'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# 03.03.03\n",
    "# verify columns \n",
    "# dt01\n",
    "\n",
    "print(dt01.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "5310641f-418e-48d9-817c-ddf48198aba1",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Index(['index', 'id', 'year', 'wave', 'region', 'income', 'fam_mem_num',\n",
      "       'gender', 'birth_year', 'education_level', 'marriage', 'religion',\n",
      "       'occupation', 'company_size', 'unemployment_reason'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# 03.03.04\n",
    "# verify columns \n",
    "# dt02\n",
    "\n",
    "print(dt02.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "197ff916-2a71-4c3d-bbb4-05476658a853",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 03.04.00\n",
    "# Format data into a more readable format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "5c426b67-f8bf-43c5-ba6f-b1f011455b78",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 03.04.01\n",
    "# Identify outliers and bad data\n",
    "# hist of dt_seoul.Natural_growth_rate\n",
    "# There doesn't seem to be any outliers in the main variable. \n",
    "# dt02\n",
    "\n",
    "dt02_hist01 = thinkstats2.Hist(dt02.marriage, label=\"dt02.marriage\")\n",
    "thinkplot.Hist(dt02_hist01)\n",
    "thinkplot.Config(xlabel=\"marriage\", ylabel=\"Count\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "6851c723-1a06-4fcf-9d74-ccacd38d10a7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 03.04.02\n",
    "# Identify outliers and bad data\n",
    "# hist of dt_seoul.Natural_growth_rate\n",
    "# There doesn't seem to be any outliers in the main variable. \n",
    "# dt02\n",
    "\n",
    "dt02_hist01 = thinkstats2.Hist(dt02.marriage, label=\"dt02.fam_mem_num\")\n",
    "thinkplot.Hist(dt02_hist01)\n",
    "thinkplot.Config(xlabel=\"fam_mem_num\", ylabel=\"Count\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "e8f4ab24-3354-452b-8dc6-2ec3107cb469",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 03.04.03\n",
    "# Identify outliers and bad data\n",
    "# hist of dt_seoul.Natural_growth_rate\n",
    "# There doesn't seem to be any outliers in the main variable. \n",
    "# dt02\n",
    "\n",
    "dt02.income.plot.density(color='#81A7D1') \n",
    "plt.title('income') \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "62135fe4-d38e-4a99-907b-9e1b16f8d4e0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 03.04.04\n",
    "# Identify outliers and bad data\n",
    "# scatter plot of income\n",
    "# There seem to be a few outliers. \n",
    "# dt02\n",
    "\n",
    "plt.scatter(dt02['income'], dt02['education_level'])\n",
    "plt.title(\"income\")\n",
    "plt.xlabel('income / education')\n",
    "plt.ylabel('count')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "89db200b-4a50-4285-8c1a-c6694aaa24fb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "92857\n"
     ]
    }
   ],
   "source": [
    "# 03.05.01\n",
    "# Find duplicates\n",
    "# return length \n",
    "# dt02\n",
    "\n",
    "print(len(dt02))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "c04e05a9-3736-42b6-8b0c-748eaaac07a5",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 03.05.02\n",
    "# Find duplicates\n",
    "# create set \n",
    "# dt02\n",
    "\n",
    "dt02_set02 = set(dt02)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "18258654-0965-42ca-9bf0-e3f5c837f16d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15\n"
     ]
    }
   ],
   "source": [
    "# 03.05.03\n",
    "# Find duplicates\n",
    "# return set \n",
    "# dt02\n",
    "\n",
    "print(len(dt02_set02))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "e95fa940-dc7a-422f-97b9-dd278ba348b2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "duplicates found\n"
     ]
    }
   ],
   "source": [
    "# 03.05.04\n",
    "# Find duplicates \n",
    "# dt02\n",
    "\n",
    "if len(dt02) != len(dt02_set02):\n",
    "    print(\"duplicates found\")\n",
    "else:\n",
    "    print(\"duplicates not found\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "28358fc0-3965-4492-abf3-b671c9d6a054",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "92857"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 03.05.05\n",
    "# Find duplicates\n",
    "# return number of rows\n",
    "# dt02\n",
    "\n",
    "len(dt02.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "b40b024d-bee9-4b3f-be68-c21a54cd2069",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 03.05.06\n",
    "# Find duplicates\n",
    "# remove duplicates\n",
    "# dt02\n",
    "\n",
    "dt02_dup = list(set(dt02))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "8c309259-891a-4880-9742-76d1e2723a4c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['income', 'education_level', 'index', 'company_size', 'marriage', 'wave', 'region', 'unemployment_reason', 'gender', 'year', 'birth_year', 'fam_mem_num', 'id', 'religion', 'occupation']\n"
     ]
    }
   ],
   "source": [
    "# 03.05.07\n",
    "# Find duplicates\n",
    "# return removed duplicates\n",
    "# dt02\n",
    "\n",
    "print(str(dt02_dup))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "1c31d1b2-c975-4bbc-a521-dd8726bd422a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 03.06.01\n",
    "# remove columns\n",
    "# dt02\n",
    "\n",
    "dt02_drp = dt02.drop(['religion', 'occupation', 'unemployment_reason', 'company_size', 'wave'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "7a02344a-9064-4895-b8fe-8a4fdac412e0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(92857, 10)\n"
     ]
    }
   ],
   "source": [
    "# 03.06.02\n",
    "# verify dimensions \n",
    "# dt02\n",
    "\n",
    "print(dt02_drp.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "6dcd2685-7f5b-4dc3-a979-70c1debadb0b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# I added a new dataframe containing household incomes for the same demographic in the first dataframe.\n",
    "# I transformed the data in order to make comparisons on later milestones of the two dataframes.\n",
    "# I will use my findings to clarify the main culprits contributing to the plummeting birth rate,\n",
    "# Thus in Milestone four, I will add data extracted from https://kosis.kr/eng/statisticsList/statisticsListIndex.\n",
    "# I hope that this will shed light on what ethical solutions are available for the sake of companies directly affected,\n",
    "# and moreso the entire economy."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "dd8c7f05-df48-45c9-8ef2-a1190ae52177",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make sure you clearly label each transformation step (Step #1, Step #2, etc.) in your code and describe what it is doing in 1-2 sentences. \n",
    "# You can submit a Jupyter Notebook or a PDF of your code.\n",
    "# If you submit a .py file you need to also include a PDF or attachment of your results."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d246f074-42ea-4ed1-8f8b-28e9ba94b865",
   "metadata": {},
   "source": [
    "## 09-10_milestone_04"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "ff076e03-7617-44c8-9bc6-0411673ca121",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.01.00\n",
    "# Connecting to an API/Pulling in the Data and Cleaning/Formatting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "839d5db7-263a-4357-884b-3b2f8487a523",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.01.00\n",
    "# Perform at least 5 data transformation and/or cleansing steps to your API data. \n",
    "# The below examples are not required - they are just potential transformations you could do. \n",
    "# If your data doesn't work for these scenarios, complete different transformations. \n",
    "# You can do the same transformation multiple times if you needed to clean your data. \n",
    "# The goal is a clean dataset at the end of the milestone."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "1a293d26-68c6-45bf-ba0e-741c0a594e61",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.01.01\n",
    "# Connecting to an API/Pulling in the Data and Cleaning/Formatting\n",
    "# data extracted from https://kosis.kr/eng/statisticsList/statisticsListIndex\n",
    "# read csv \n",
    "# dt01\n",
    "\n",
    "# print(dt01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "4fbf8ad8-ed7a-439a-81d8-995821382e7c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.01.02\n",
    "# Connecting to an API/Pulling in the Data and Cleaning/Formatting\n",
    "# data extracted from https://kosis.kr/eng/statisticsList/statisticsListIndex\n",
    "# read csv \n",
    "# dt02\n",
    "\n",
    "# print(dt02)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "68f93f10-3fa2-4b6d-9313-7b092ec673ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.01.03\n",
    "# Connecting to an API/Pulling in the Data and Cleaning/Formatting\n",
    "# data extracted from https://kosis.kr/eng/statisticsList/statisticsListIndex\n",
    "# read csv \n",
    "# dt03\n",
    "\n",
    "dt03 = pd.read_csv('2022_Population__Households_and_Housing_Units_20240131140157_2022.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "31dda63e-c4e9-49bb-8718-48c207d73fd9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.01.04\n",
    "# Connecting to an API/Pulling in the Data and Cleaning/Formatting\n",
    "# data extracted from https://kosis.kr/eng/statisticsList/statisticsListIndex\n",
    "# read csv \n",
    "# dt04\n",
    "\n",
    "dt04 = pd.read_csv('2010_Population__Households_and_Housing_Units_20240131140135_2010.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "534e3e61-331d-43a6-a8fc-1fa5fb669556",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.01.05\n",
    "# Connecting to an API/Pulling in the Data and Cleaning/Formatting\n",
    "# data extracted from https://kosis.kr/eng/statisticsList/statisticsListIndex\n",
    "# read csv \n",
    "# dt05\n",
    "\n",
    "dt05 = pd.read_csv('2005_Population__Households_and_Housing_Units_20240131140110_2005.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "70a784cb-f7fe-4573-adf6-b189c2fafb35",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.01.06\n",
    "# Connecting to an API/Pulling in the Data and Cleaning/Formatting\n",
    "# data extracted from https://kosis.kr/eng/statisticsList/statisticsListIndex\n",
    "# read csv \n",
    "# dt06\n",
    "\n",
    "dt06 = pd.read_csv('2000_Population__Households_and_Housing_Units_by_Administrative_District_20240131140045_2000.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "f73a2220-d87c-4876-b4d8-0c59073268db",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.01.07\n",
    "# Connecting to an API/Pulling in the Data and Cleaning/Formatting\n",
    "# data extracted from https://kosis.kr/eng/statisticsList/statisticsListIndex\n",
    "# read csv \n",
    "# dt07\n",
    "\n",
    "dt07 = pd.read_csv('1995_Population__households_by_administrative_district_20240131140017_1995.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "0da64ea9-79d2-4057-accf-fcf6afedf249",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.01.08\n",
    "# Connecting to an API/Pulling in the Data and Cleaning/Formatting\n",
    "# data extracted from https://kosis.kr/eng/statisticsList/statisticsListIndex\n",
    "# read csv \n",
    "# dt08\n",
    "\n",
    "dt08 = pd.read_csv('1990_Population__households_by_administrative_district_20240131135955_1990.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "17886084-861d-4f66-9cf7-24c86683ceb2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.01.09\n",
    "# Connecting to an API/Pulling in the Data and Cleaning/Formatting\n",
    "# data extracted from https://kosis.kr/eng/statisticsList/statisticsListIndex\n",
    "# read csv \n",
    "# dt09\n",
    "\n",
    "dt09 = pd.read_csv('1985_Population__households_by_administrative_district_20240131135838_1985.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "20b220e1-0dee-4ba8-a44c-c44fb4d4df67",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.01.10\n",
    "# Connecting to an API/Pulling in the Data and Cleaning/Formatting\n",
    "# data extracted from https://kosis.kr/eng/statisticsList/statisticsListIndex\n",
    "# read csv \n",
    "# dt10\n",
    "\n",
    "dt10 = pd.read_csv('1980_Population__households_by_administrative_district_20240131135914_1980.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "0ad63b8e-1526-410a-b208-c47d0c78638f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.01.11\n",
    "# Connecting to an API/Pulling in the Data and Cleaning/Formatting\n",
    "# data extracted from https://kosis.kr/eng/statisticsList/statisticsListIndex\n",
    "# read csv \n",
    "# dt11\n",
    "\n",
    "dt11 = pd.read_csv('1975_Population__households_by_administrative_district_20240131135816_1975.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "ab15648b-b99f-4fa9-884a-4154e09b3fdf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.01.12\n",
    "# Connecting to an API/Pulling in the Data and Cleaning/Formatting\n",
    "# data extracted from https://kosis.kr/eng/statisticsList/statisticsListIndex\n",
    "# read csv \n",
    "# dt12\n",
    "\n",
    "dt12 = pd.read_csv('1970_Population__households_by_administrative_district_20240131135736_1970.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "849f87a7-ece2-4c48-810c-d54135b10fbe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>calendar_date</th>\n",
       "      <th>date</th>\n",
       "      <th>rate_birth</th>\n",
       "      <th>death</th>\n",
       "      <th>rate_death</th>\n",
       "      <th>divorce</th>\n",
       "      <th>rate_divorce</th>\n",
       "      <th>marriage</th>\n",
       "      <th>rate_marriage</th>\n",
       "      <th>growth_natural</th>\n",
       "      <th>rate_growth_natural</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>region</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>15</td>\n",
       "      <td>2000-01-01</td>\n",
       "      <td>12866.0</td>\n",
       "      <td>14.79</td>\n",
       "      <td>3931.0</td>\n",
       "      <td>4.5</td>\n",
       "      <td>1835.0</td>\n",
       "      <td>2.1</td>\n",
       "      <td>6781.0</td>\n",
       "      <td>7.8</td>\n",
       "      <td>8935.0</td>\n",
       "      <td>10.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>33</td>\n",
       "      <td>2000-02-01</td>\n",
       "      <td>11797.0</td>\n",
       "      <td>14.48</td>\n",
       "      <td>3218.0</td>\n",
       "      <td>4.0</td>\n",
       "      <td>1912.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>5596.0</td>\n",
       "      <td>6.9</td>\n",
       "      <td>8579.0</td>\n",
       "      <td>10.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>51</td>\n",
       "      <td>2000-03-01</td>\n",
       "      <td>12453.0</td>\n",
       "      <td>14.29</td>\n",
       "      <td>3368.0</td>\n",
       "      <td>3.9</td>\n",
       "      <td>2333.0</td>\n",
       "      <td>2.7</td>\n",
       "      <td>6781.0</td>\n",
       "      <td>7.8</td>\n",
       "      <td>9085.0</td>\n",
       "      <td>10.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>69</td>\n",
       "      <td>2000-04-01</td>\n",
       "      <td>10782.0</td>\n",
       "      <td>12.77</td>\n",
       "      <td>3204.0</td>\n",
       "      <td>3.8</td>\n",
       "      <td>1916.0</td>\n",
       "      <td>2.3</td>\n",
       "      <td>6667.0</td>\n",
       "      <td>7.9</td>\n",
       "      <td>7578.0</td>\n",
       "      <td>9.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Seoul</th>\n",
       "      <td>87</td>\n",
       "      <td>2000-05-01</td>\n",
       "      <td>10817.0</td>\n",
       "      <td>12.39</td>\n",
       "      <td>3064.0</td>\n",
       "      <td>3.5</td>\n",
       "      <td>2108.0</td>\n",
       "      <td>2.4</td>\n",
       "      <td>8428.0</td>\n",
       "      <td>9.7</td>\n",
       "      <td>7753.0</td>\n",
       "      <td>8.9</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        ID calendar_date  ...  growth_natural  rate_growth_natural\n",
       "region                    ...                                     \n",
       "Seoul   15    2000-01-01  ...          8935.0                 10.3\n",
       "Seoul   33    2000-02-01  ...          8579.0                 10.5\n",
       "Seoul   51    2000-03-01  ...          9085.0                 10.4\n",
       "Seoul   69    2000-04-01  ...          7578.0                  9.0\n",
       "Seoul   87    2000-05-01  ...          7753.0                  8.9\n",
       "\n",
       "[5 rows x 12 columns]"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 04.02.01\n",
    "# return head \n",
    "# dt01\n",
    "\n",
    "dt01.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "a3cb1390-3133-4d20-b346-54bea4877079",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>index</th>\n",
       "      <th>id</th>\n",
       "      <th>year</th>\n",
       "      <th>wave</th>\n",
       "      <th>region</th>\n",
       "      <th>income</th>\n",
       "      <th>fam_mem_num</th>\n",
       "      <th>gender</th>\n",
       "      <th>birth_year</th>\n",
       "      <th>education_level</th>\n",
       "      <th>marriage</th>\n",
       "      <th>religion</th>\n",
       "      <th>occupation</th>\n",
       "      <th>company_size</th>\n",
       "      <th>unemployment_reason</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>10101</td>\n",
       "      <td>2005</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>614.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>10101</td>\n",
       "      <td>2011</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>896.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>10101</td>\n",
       "      <td>2012</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>1310.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>10101</td>\n",
       "      <td>2013</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>2208.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>10101</td>\n",
       "      <td>2014</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>864.0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1936</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td>10</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   index     id  year  ...  occupation  company_size  unemployment_reason\n",
       "0      0  10101  2005  ...                                              8\n",
       "1      1  10101  2011  ...                                             10\n",
       "2      2  10101  2012  ...                                             10\n",
       "3      3  10101  2013  ...                                              1\n",
       "4      4  10101  2014  ...                                             10\n",
       "\n",
       "[5 rows x 15 columns]"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 04.02.02\n",
    "# return head \n",
    "# dt02\n",
    "\n",
    "dt02.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "7b0e6c44-8ab7-4f26-837e-4935064be812",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>By administrative divisions(eup, myeon, dong)</th>\n",
       "      <th>2022</th>\n",
       "      <th>2022.1</th>\n",
       "      <th>2022.2</th>\n",
       "      <th>2022.3</th>\n",
       "      <th>2022.4</th>\n",
       "      <th>2022.5</th>\n",
       "      <th>2022.6</th>\n",
       "      <th>2022.7</th>\n",
       "      <th>2022.8</th>\n",
       "      <th>2022.9</th>\n",
       "      <th>2022.10</th>\n",
       "      <th>2022.11</th>\n",
       "      <th>2022.12</th>\n",
       "      <th>2022.13</th>\n",
       "      <th>2022.14</th>\n",
       "      <th>2022.15</th>\n",
       "      <th>2022.16</th>\n",
       "      <th>2022.17</th>\n",
       "      <th>2022.18</th>\n",
       "      <th>2022.19</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>By administrative divisions(eup, myeon, dong)</td>\n",
       "      <td>Total population (Person)</td>\n",
       "      <td>Male (Person)</td>\n",
       "      <td>Female (Person)</td>\n",
       "      <td>Korean - total (Person)</td>\n",
       "      <td>Korean - male (Person)</td>\n",
       "      <td>Korean - Female (Person)</td>\n",
       "      <td>Foreigner-Total (Person)</td>\n",
       "      <td>Foreigner-Male (Person)</td>\n",
       "      <td>Foreigner-Female (Person)</td>\n",
       "      <td>Household-Total (households)</td>\n",
       "      <td>Type of occupancy (households)</td>\n",
       "      <td>Institutional households (households)</td>\n",
       "      <td>Foreigner household (households)</td>\n",
       "      <td>Housing units-Total (Housing)</td>\n",
       "      <td>Detached dwelling (Housing)</td>\n",
       "      <td>Apartment (Housing)</td>\n",
       "      <td>Row house (Housing)</td>\n",
       "      <td>Apartment unit ina private house (Housing)</td>\n",
       "      <td>House within commercial building (Housing)</td>\n",
       "      <td>Living quaters other than housing unit (Housing)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Whole country</td>\n",
       "      <td>51692272</td>\n",
       "      <td>25835298</td>\n",
       "      <td>25856974</td>\n",
       "      <td>49939926</td>\n",
       "      <td>24866514</td>\n",
       "      <td>25073412</td>\n",
       "      <td>1752346</td>\n",
       "      <td>968784</td>\n",
       "      <td>783562</td>\n",
       "      <td>22383187</td>\n",
       "      <td>21773507</td>\n",
       "      <td>17212</td>\n",
       "      <td>592468</td>\n",
       "      <td>19155585</td>\n",
       "      <td>3860997</td>\n",
       "      <td>12268973</td>\n",
       "      <td>530985</td>\n",
       "      <td>2283238</td>\n",
       "      <td>211392</td>\n",
       "      <td>1162311</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Total for eups</td>\n",
       "      <td>5098892</td>\n",
       "      <td>2621409</td>\n",
       "      <td>2477483</td>\n",
       "      <td>4879206</td>\n",
       "      <td>2484040</td>\n",
       "      <td>2395166</td>\n",
       "      <td>219686</td>\n",
       "      <td>137369</td>\n",
       "      <td>82317</td>\n",
       "      <td>2162312</td>\n",
       "      <td>2096426</td>\n",
       "      <td>2473</td>\n",
       "      <td>63413</td>\n",
       "      <td>2050655</td>\n",
       "      <td>583479</td>\n",
       "      <td>1210871</td>\n",
       "      <td>81057</td>\n",
       "      <td>143781</td>\n",
       "      <td>31467</td>\n",
       "      <td>81935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Total for myeons</td>\n",
       "      <td>4506486</td>\n",
       "      <td>2348865</td>\n",
       "      <td>2157621</td>\n",
       "      <td>4244198</td>\n",
       "      <td>2162250</td>\n",
       "      <td>2081948</td>\n",
       "      <td>262288</td>\n",
       "      <td>186615</td>\n",
       "      <td>75673</td>\n",
       "      <td>2101117</td>\n",
       "      <td>2035906</td>\n",
       "      <td>4051</td>\n",
       "      <td>61160</td>\n",
       "      <td>2113084</td>\n",
       "      <td>1543756</td>\n",
       "      <td>426992</td>\n",
       "      <td>37634</td>\n",
       "      <td>72426</td>\n",
       "      <td>32276</td>\n",
       "      <td>110037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Total for dongs</td>\n",
       "      <td>42086894</td>\n",
       "      <td>20865024</td>\n",
       "      <td>21221870</td>\n",
       "      <td>40816522</td>\n",
       "      <td>20220224</td>\n",
       "      <td>20596298</td>\n",
       "      <td>1270372</td>\n",
       "      <td>644800</td>\n",
       "      <td>625572</td>\n",
       "      <td>18119758</td>\n",
       "      <td>17641175</td>\n",
       "      <td>10688</td>\n",
       "      <td>467895</td>\n",
       "      <td>14991846</td>\n",
       "      <td>1733762</td>\n",
       "      <td>10631110</td>\n",
       "      <td>412294</td>\n",
       "      <td>2067031</td>\n",
       "      <td>147649</td>\n",
       "      <td>970339</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   By administrative divisions(eup, myeon, dong)  ...                                           2022.19\n",
       "0  By administrative divisions(eup, myeon, dong)  ...  Living quaters other than housing unit (Housing)\n",
       "1                                  Whole country  ...                                           1162311\n",
       "2                                 Total for eups  ...                                             81935\n",
       "3                               Total for myeons  ...                                            110037\n",
       "4                                Total for dongs  ...                                            970339\n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 04.02.03\n",
    "# return head \n",
    "# dt03\n",
    "\n",
    "dt03.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "ed501727-4bc5-448a-a7c2-9245180bc9b0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>By administrative divisions(eup, myeon, dong)</th>\n",
       "      <th>2010</th>\n",
       "      <th>2010.1</th>\n",
       "      <th>2010.2</th>\n",
       "      <th>2010.3</th>\n",
       "      <th>2010.4</th>\n",
       "      <th>2010.5</th>\n",
       "      <th>2010.6</th>\n",
       "      <th>2010.7</th>\n",
       "      <th>2010.8</th>\n",
       "      <th>2010.9</th>\n",
       "      <th>2010.10</th>\n",
       "      <th>2010.11</th>\n",
       "      <th>2010.12</th>\n",
       "      <th>2010.13</th>\n",
       "      <th>2010.14</th>\n",
       "      <th>2010.15</th>\n",
       "      <th>2010.16</th>\n",
       "      <th>2010.17</th>\n",
       "      <th>2010.18</th>\n",
       "      <th>2010.19</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>By administrative divisions(eup, myeon, dong)</td>\n",
       "      <td>Total population (Person)</td>\n",
       "      <td>Male (Person)</td>\n",
       "      <td>Female (Person)</td>\n",
       "      <td>Korean - total (Person)</td>\n",
       "      <td>Korean - male (Person)</td>\n",
       "      <td>Korean - Female (Person)</td>\n",
       "      <td>Foreigner-Total (Person)</td>\n",
       "      <td>Foreigner-Male (Person)</td>\n",
       "      <td>Foreigner-Female (Person)</td>\n",
       "      <td>Household-Total (households)</td>\n",
       "      <td>Type of occupancy (households)</td>\n",
       "      <td>Institutional households (households)</td>\n",
       "      <td>Foreigner household (households)</td>\n",
       "      <td>Housing units-Total (Housing)</td>\n",
       "      <td>Detached dwelling (Housing)</td>\n",
       "      <td>Apartment (Housing)</td>\n",
       "      <td>Row house (Housing)</td>\n",
       "      <td>Apartment unit ina private house (Housing)</td>\n",
       "      <td>House within commercial building (Housing)</td>\n",
       "      <td>Living quaters other than housing unit (Housing)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Whole country</td>\n",
       "      <td>48580293</td>\n",
       "      <td>24167098</td>\n",
       "      <td>24413195</td>\n",
       "      <td>47990761</td>\n",
       "      <td>23840896</td>\n",
       "      <td>24149865</td>\n",
       "      <td>589532</td>\n",
       "      <td>326202</td>\n",
       "      <td>263330</td>\n",
       "      <td>17574067</td>\n",
       "      <td>17339422</td>\n",
       "      <td>20727</td>\n",
       "      <td>213918</td>\n",
       "      <td>14677419</td>\n",
       "      <td>4089491</td>\n",
       "      <td>8576013</td>\n",
       "      <td>536070</td>\n",
       "      <td>1314452</td>\n",
       "      <td>161393</td>\n",
       "      <td>303097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Total for dongs</td>\n",
       "      <td>39822647</td>\n",
       "      <td>19798739</td>\n",
       "      <td>20023908</td>\n",
       "      <td>39363373</td>\n",
       "      <td>19558869</td>\n",
       "      <td>19804504</td>\n",
       "      <td>459274</td>\n",
       "      <td>239870</td>\n",
       "      <td>219404</td>\n",
       "      <td>14224508</td>\n",
       "      <td>14031069</td>\n",
       "      <td>12420</td>\n",
       "      <td>181019</td>\n",
       "      <td>11262799</td>\n",
       "      <td>2006683</td>\n",
       "      <td>7487900</td>\n",
       "      <td>425615</td>\n",
       "      <td>1226377</td>\n",
       "      <td>116224</td>\n",
       "      <td>270518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Total for eups</td>\n",
       "      <td>4200082</td>\n",
       "      <td>2117515</td>\n",
       "      <td>2082567</td>\n",
       "      <td>4149215</td>\n",
       "      <td>2086063</td>\n",
       "      <td>2063152</td>\n",
       "      <td>50867</td>\n",
       "      <td>31452</td>\n",
       "      <td>19415</td>\n",
       "      <td>1504690</td>\n",
       "      <td>1487490</td>\n",
       "      <td>2631</td>\n",
       "      <td>14569</td>\n",
       "      <td>1460243</td>\n",
       "      <td>544997</td>\n",
       "      <td>765456</td>\n",
       "      <td>73145</td>\n",
       "      <td>57696</td>\n",
       "      <td>18949</td>\n",
       "      <td>9816</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Total for myeons</td>\n",
       "      <td>4557564</td>\n",
       "      <td>2250844</td>\n",
       "      <td>2306720</td>\n",
       "      <td>4478173</td>\n",
       "      <td>2195964</td>\n",
       "      <td>2282209</td>\n",
       "      <td>79391</td>\n",
       "      <td>54880</td>\n",
       "      <td>24511</td>\n",
       "      <td>1844869</td>\n",
       "      <td>1820863</td>\n",
       "      <td>5676</td>\n",
       "      <td>18330</td>\n",
       "      <td>1954377</td>\n",
       "      <td>1537811</td>\n",
       "      <td>322657</td>\n",
       "      <td>37310</td>\n",
       "      <td>30379</td>\n",
       "      <td>26220</td>\n",
       "      <td>22763</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   By administrative divisions(eup, myeon, dong)  ...                                           2010.19\n",
       "0  By administrative divisions(eup, myeon, dong)  ...  Living quaters other than housing unit (Housing)\n",
       "1                                  Whole country  ...                                            303097\n",
       "2                                Total for dongs  ...                                            270518\n",
       "3                                 Total for eups  ...                                              9816\n",
       "4                               Total for myeons  ...                                             22763\n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 04.02.04\n",
    "# return head \n",
    "# dt04\n",
    "\n",
    "dt04.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "930fb497-cd55-47af-b851-bbb55609523d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>By administrative divisions</th>\n",
       "      <th>2005</th>\n",
       "      <th>2005.1</th>\n",
       "      <th>2005.2</th>\n",
       "      <th>2005.3</th>\n",
       "      <th>2005.4</th>\n",
       "      <th>2005.5</th>\n",
       "      <th>2005.6</th>\n",
       "      <th>2005.7</th>\n",
       "      <th>2005.8</th>\n",
       "      <th>2005.9</th>\n",
       "      <th>2005.10</th>\n",
       "      <th>2005.11</th>\n",
       "      <th>2005.12</th>\n",
       "      <th>2005.13</th>\n",
       "      <th>2005.14</th>\n",
       "      <th>2005.15</th>\n",
       "      <th>2005.16</th>\n",
       "      <th>2005.17</th>\n",
       "      <th>2005.18</th>\n",
       "      <th>2005.19</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>By administrative divisions</td>\n",
       "      <td>Total population (Person)</td>\n",
       "      <td>Male (Person)</td>\n",
       "      <td>Female (Person)</td>\n",
       "      <td>Population(Korean) (Person)</td>\n",
       "      <td>Korean male (Person)</td>\n",
       "      <td>Korean female (Person)</td>\n",
       "      <td>Foreigner (Person)</td>\n",
       "      <td>Foreigner male (Person)</td>\n",
       "      <td>Foreigner female (Person)</td>\n",
       "      <td>Household (households)</td>\n",
       "      <td>Type of occupancy (households)</td>\n",
       "      <td>Institutional households (households)</td>\n",
       "      <td>Foreigner household (households)</td>\n",
       "      <td>Housing units (Housing)</td>\n",
       "      <td>Detached dwelling (Housing)</td>\n",
       "      <td>Apartment (Housing)</td>\n",
       "      <td>Row house (Housing)</td>\n",
       "      <td>Apartment unit ina private house (Housing)</td>\n",
       "      <td>House within commercial building (Housing)</td>\n",
       "      <td>Living quaters other than housing unit (Housing)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Whole country</td>\n",
       "      <td>47278951</td>\n",
       "      <td>23623954</td>\n",
       "      <td>23654997</td>\n",
       "      <td>47041434</td>\n",
       "      <td>23465650</td>\n",
       "      <td>23575784</td>\n",
       "      <td>237517</td>\n",
       "      <td>158304</td>\n",
       "      <td>79213</td>\n",
       "      <td>15988274</td>\n",
       "      <td>15887128</td>\n",
       "      <td>16551</td>\n",
       "      <td>84595</td>\n",
       "      <td>13222641</td>\n",
       "      <td>4263541</td>\n",
       "      <td>6962689</td>\n",
       "      <td>558513</td>\n",
       "      <td>1229208</td>\n",
       "      <td>208690</td>\n",
       "      <td>206511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Dong area</td>\n",
       "      <td>38514753</td>\n",
       "      <td>19258840</td>\n",
       "      <td>19255913</td>\n",
       "      <td>38337699</td>\n",
       "      <td>19145912</td>\n",
       "      <td>19191787</td>\n",
       "      <td>177054</td>\n",
       "      <td>112928</td>\n",
       "      <td>64126</td>\n",
       "      <td>12826173</td>\n",
       "      <td>12744940</td>\n",
       "      <td>10413</td>\n",
       "      <td>70820</td>\n",
       "      <td>9997532</td>\n",
       "      <td>2124135</td>\n",
       "      <td>6122716</td>\n",
       "      <td>444243</td>\n",
       "      <td>1155568</td>\n",
       "      <td>150870</td>\n",
       "      <td>184683</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Eup area</td>\n",
       "      <td>3943827</td>\n",
       "      <td>1987814</td>\n",
       "      <td>1956013</td>\n",
       "      <td>3922597</td>\n",
       "      <td>1972126</td>\n",
       "      <td>1950471</td>\n",
       "      <td>21230</td>\n",
       "      <td>15688</td>\n",
       "      <td>5542</td>\n",
       "      <td>1326369</td>\n",
       "      <td>1318939</td>\n",
       "      <td>2129</td>\n",
       "      <td>5301</td>\n",
       "      <td>1293996</td>\n",
       "      <td>557871</td>\n",
       "      <td>585636</td>\n",
       "      <td>76494</td>\n",
       "      <td>46255</td>\n",
       "      <td>27740</td>\n",
       "      <td>7433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Myeon area</td>\n",
       "      <td>4820371</td>\n",
       "      <td>2377300</td>\n",
       "      <td>2443071</td>\n",
       "      <td>4781138</td>\n",
       "      <td>2347612</td>\n",
       "      <td>2433526</td>\n",
       "      <td>39233</td>\n",
       "      <td>29688</td>\n",
       "      <td>9545</td>\n",
       "      <td>1835732</td>\n",
       "      <td>1823249</td>\n",
       "      <td>4009</td>\n",
       "      <td>8474</td>\n",
       "      <td>1931113</td>\n",
       "      <td>1581535</td>\n",
       "      <td>254337</td>\n",
       "      <td>37776</td>\n",
       "      <td>27385</td>\n",
       "      <td>30080</td>\n",
       "      <td>14395</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   By administrative divisions  ...                                           2005.19\n",
       "0  By administrative divisions  ...  Living quaters other than housing unit (Housing)\n",
       "1                Whole country  ...                                            206511\n",
       "2                    Dong area  ...                                            184683\n",
       "3                     Eup area  ...                                              7433\n",
       "4                   Myeon area  ...                                             14395\n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 04.02.05\n",
    "# return head \n",
    "# dt05\n",
    "\n",
    "dt05.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "32a01038-7dd8-4236-80d8-ca09f4aef537",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>By administrative divisions</th>\n",
       "      <th>2000</th>\n",
       "      <th>2000.1</th>\n",
       "      <th>2000.2</th>\n",
       "      <th>2000.3</th>\n",
       "      <th>2000.4</th>\n",
       "      <th>2000.5</th>\n",
       "      <th>2000.6</th>\n",
       "      <th>2000.7</th>\n",
       "      <th>2000.8</th>\n",
       "      <th>2000.9</th>\n",
       "      <th>2000.10</th>\n",
       "      <th>2000.11</th>\n",
       "      <th>2000.12</th>\n",
       "      <th>2000.13</th>\n",
       "      <th>2000.14</th>\n",
       "      <th>2000.15</th>\n",
       "      <th>2000.16</th>\n",
       "      <th>2000.17</th>\n",
       "      <th>2000.18</th>\n",
       "      <th>2000.19</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>By administrative divisions</td>\n",
       "      <td>Total population (Person)</td>\n",
       "      <td>Male (Person)</td>\n",
       "      <td>Female (Person)</td>\n",
       "      <td>Korean (Person)</td>\n",
       "      <td>Male (Person)</td>\n",
       "      <td>Korean female (Person)</td>\n",
       "      <td>Foreigner (Person)</td>\n",
       "      <td>Foreigner male (Person)</td>\n",
       "      <td>Foreigner female (Person)</td>\n",
       "      <td>Household (households)</td>\n",
       "      <td>Type of occupancy (households)</td>\n",
       "      <td>Institutional households (households)</td>\n",
       "      <td>Foreigner household (households)</td>\n",
       "      <td>Housing units (Housing)</td>\n",
       "      <td>Detached dwelling (Housing)</td>\n",
       "      <td>Apartment (Housing)</td>\n",
       "      <td>Row house (Housing)</td>\n",
       "      <td>Apartment unit ina private house (Housing)</td>\n",
       "      <td>Dwelling units in a building not intended for ...</td>\n",
       "      <td>Living quaters other than housing unit (Housing)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Whole country</td>\n",
       "      <td>46136101</td>\n",
       "      <td>23158582</td>\n",
       "      <td>22977519</td>\n",
       "      <td>45985289</td>\n",
       "      <td>23068181</td>\n",
       "      <td>22917108</td>\n",
       "      <td>150812</td>\n",
       "      <td>90401</td>\n",
       "      <td>60411</td>\n",
       "      <td>14391374</td>\n",
       "      <td>14311807</td>\n",
       "      <td>14417</td>\n",
       "      <td>65150</td>\n",
       "      <td>11472401</td>\n",
       "      <td>4269180</td>\n",
       "      <td>5479828</td>\n",
       "      <td>849687</td>\n",
       "      <td>472236</td>\n",
       "      <td>401470</td>\n",
       "      <td>91814</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Eup area</td>\n",
       "      <td>3755782</td>\n",
       "      <td>1885263</td>\n",
       "      <td>1870519</td>\n",
       "      <td>3742053</td>\n",
       "      <td>1876875</td>\n",
       "      <td>1865178</td>\n",
       "      <td>13729</td>\n",
       "      <td>8388</td>\n",
       "      <td>5341</td>\n",
       "      <td>1167229</td>\n",
       "      <td>1160332</td>\n",
       "      <td>1921</td>\n",
       "      <td>4976</td>\n",
       "      <td>1094042</td>\n",
       "      <td>532261</td>\n",
       "      <td>403807</td>\n",
       "      <td>81115</td>\n",
       "      <td>20229</td>\n",
       "      <td>56630</td>\n",
       "      <td>7254</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Myeon area</td>\n",
       "      <td>5625175</td>\n",
       "      <td>2789180</td>\n",
       "      <td>2835995</td>\n",
       "      <td>5600788</td>\n",
       "      <td>2773484</td>\n",
       "      <td>2827304</td>\n",
       "      <td>24387</td>\n",
       "      <td>15696</td>\n",
       "      <td>8691</td>\n",
       "      <td>1933536</td>\n",
       "      <td>1921999</td>\n",
       "      <td>3380</td>\n",
       "      <td>8157</td>\n",
       "      <td>1985026</td>\n",
       "      <td>1608093</td>\n",
       "      <td>231209</td>\n",
       "      <td>52308</td>\n",
       "      <td>17600</td>\n",
       "      <td>75816</td>\n",
       "      <td>16805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Dong area</td>\n",
       "      <td>36755144</td>\n",
       "      <td>18484139</td>\n",
       "      <td>18271005</td>\n",
       "      <td>36642448</td>\n",
       "      <td>18417822</td>\n",
       "      <td>18224626</td>\n",
       "      <td>112696</td>\n",
       "      <td>66317</td>\n",
       "      <td>46379</td>\n",
       "      <td>11290609</td>\n",
       "      <td>11229476</td>\n",
       "      <td>9116</td>\n",
       "      <td>52017</td>\n",
       "      <td>8393333</td>\n",
       "      <td>2128826</td>\n",
       "      <td>4844812</td>\n",
       "      <td>716264</td>\n",
       "      <td>434407</td>\n",
       "      <td>269024</td>\n",
       "      <td>67755</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   By administrative divisions  ...                                           2000.19\n",
       "0  By administrative divisions  ...  Living quaters other than housing unit (Housing)\n",
       "1                Whole country  ...                                             91814\n",
       "2                     Eup area  ...                                              7254\n",
       "3                   Myeon area  ...                                             16805\n",
       "4                    Dong area  ...                                             67755\n",
       "\n",
       "[5 rows x 21 columns]"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 04.02.06\n",
    "# return head \n",
    "# dt06\n",
    "\n",
    "dt06.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "87bb02a2-b9e4-4b2f-8691-5e3215a7ebe1",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>By administrative divisions</th>\n",
       "      <th>1995</th>\n",
       "      <th>1995.1</th>\n",
       "      <th>1995.2</th>\n",
       "      <th>1995.3</th>\n",
       "      <th>1995.4</th>\n",
       "      <th>1995.5</th>\n",
       "      <th>1995.6</th>\n",
       "      <th>1995.7</th>\n",
       "      <th>1995.8</th>\n",
       "      <th>1995.9</th>\n",
       "      <th>1995.10</th>\n",
       "      <th>1995.11</th>\n",
       "      <th>1995.12</th>\n",
       "      <th>1995.13</th>\n",
       "      <th>1995.14</th>\n",
       "      <th>1995.15</th>\n",
       "      <th>1995.16</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>By administrative divisions</td>\n",
       "      <td>Total population (Person)</td>\n",
       "      <td>Male (Person)</td>\n",
       "      <td>Female (Person)</td>\n",
       "      <td>Korean (Person)</td>\n",
       "      <td>Male (Person)</td>\n",
       "      <td>Female (Person)</td>\n",
       "      <td>Ordinary household (households)</td>\n",
       "      <td>Ordinary household members (Person)</td>\n",
       "      <td>Ordinary household members(male) (Person)</td>\n",
       "      <td>Ordinary household members(female) (Person)</td>\n",
       "      <td>Institutional household members (Person)</td>\n",
       "      <td>Institutional household members(male) (Person)</td>\n",
       "      <td>Institutional household members(female) (Person)</td>\n",
       "      <td>Foreigner households (households)</td>\n",
       "      <td>Foreigner household member (Person)</td>\n",
       "      <td>Foreigner household member(male) (Person)</td>\n",
       "      <td>Foreigner household(female) (Person)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Whole country</td>\n",
       "      <td>44608726</td>\n",
       "      <td>22389324</td>\n",
       "      <td>22219402</td>\n",
       "      <td>44553710</td>\n",
       "      <td>22357352</td>\n",
       "      <td>22196358</td>\n",
       "      <td>12958181</td>\n",
       "      <td>44028108</td>\n",
       "      <td>22046400</td>\n",
       "      <td>21981708</td>\n",
       "      <td>525602</td>\n",
       "      <td>310952</td>\n",
       "      <td>214650</td>\n",
       "      <td>17110</td>\n",
       "      <td>55016</td>\n",
       "      <td>31972</td>\n",
       "      <td>23044</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Eup area</td>\n",
       "      <td>3484148</td>\n",
       "      <td>1742046</td>\n",
       "      <td>1742102</td>\n",
       "      <td>3480784</td>\n",
       "      <td>1740064</td>\n",
       "      <td>1740720</td>\n",
       "      <td>1014190</td>\n",
       "      <td>3413879</td>\n",
       "      <td>1703581</td>\n",
       "      <td>1710298</td>\n",
       "      <td>66905</td>\n",
       "      <td>36483</td>\n",
       "      <td>30422</td>\n",
       "      <td>1102</td>\n",
       "      <td>3364</td>\n",
       "      <td>1982</td>\n",
       "      <td>1382</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Myeon area</td>\n",
       "      <td>6088105</td>\n",
       "      <td>3025970</td>\n",
       "      <td>3062135</td>\n",
       "      <td>6080962</td>\n",
       "      <td>3021565</td>\n",
       "      <td>3059397</td>\n",
       "      <td>1912013</td>\n",
       "      <td>5966862</td>\n",
       "      <td>2953745</td>\n",
       "      <td>3013117</td>\n",
       "      <td>114100</td>\n",
       "      <td>67820</td>\n",
       "      <td>46280</td>\n",
       "      <td>1635</td>\n",
       "      <td>7143</td>\n",
       "      <td>4405</td>\n",
       "      <td>2738</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Dong area</td>\n",
       "      <td>35036473</td>\n",
       "      <td>17621308</td>\n",
       "      <td>17415165</td>\n",
       "      <td>34991964</td>\n",
       "      <td>17595723</td>\n",
       "      <td>17396241</td>\n",
       "      <td>10031978</td>\n",
       "      <td>34647367</td>\n",
       "      <td>17389074</td>\n",
       "      <td>17258293</td>\n",
       "      <td>344597</td>\n",
       "      <td>206649</td>\n",
       "      <td>137948</td>\n",
       "      <td>14373</td>\n",
       "      <td>44509</td>\n",
       "      <td>25585</td>\n",
       "      <td>18924</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   By administrative divisions  ...                               1995.16\n",
       "0  By administrative divisions  ...  Foreigner household(female) (Person)\n",
       "1                Whole country  ...                                 23044\n",
       "2                     Eup area  ...                                  1382\n",
       "3                   Myeon area  ...                                  2738\n",
       "4                    Dong area  ...                                 18924\n",
       "\n",
       "[5 rows x 18 columns]"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 04.02.07\n",
    "# return head \n",
    "# dt07\n",
    "\n",
    "dt07.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "0ef5d6c4-10f6-44ff-9730-24656ea12a7a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>By administrative divisions</th>\n",
       "      <th>1990</th>\n",
       "      <th>1990.1</th>\n",
       "      <th>1990.2</th>\n",
       "      <th>1990.3</th>\n",
       "      <th>1990.4</th>\n",
       "      <th>1990.5</th>\n",
       "      <th>1990.6</th>\n",
       "      <th>1990.7</th>\n",
       "      <th>1990.8</th>\n",
       "      <th>1990.9</th>\n",
       "      <th>1990.10</th>\n",
       "      <th>1990.11</th>\n",
       "      <th>1990.12</th>\n",
       "      <th>1990.13</th>\n",
       "      <th>1990.14</th>\n",
       "      <th>1990.15</th>\n",
       "      <th>1990.16</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>By administrative divisions</td>\n",
       "      <td>Total population (Person)</td>\n",
       "      <td>Male (Person)</td>\n",
       "      <td>Female (Person)</td>\n",
       "      <td>Korean (Person)</td>\n",
       "      <td>Male (Person)</td>\n",
       "      <td>Female (Person)</td>\n",
       "      <td>Ordinary household (households)</td>\n",
       "      <td>Ordinary household members (Person)</td>\n",
       "      <td>Ordinary household members(male) (Person)</td>\n",
       "      <td>Ordinary household members(female) (Person)</td>\n",
       "      <td>Institutional household members (Person)</td>\n",
       "      <td>Institutional household members(male) (Person)</td>\n",
       "      <td>Institutional household members(female) (Person)</td>\n",
       "      <td>Foreigner households (households)</td>\n",
       "      <td>Foreigner household member (Person)</td>\n",
       "      <td>Foreigner household member(male) (Person)</td>\n",
       "      <td>Foreigner household(female) (Person)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Whole country</td>\n",
       "      <td>43410899</td>\n",
       "      <td>21782154</td>\n",
       "      <td>21628745</td>\n",
       "      <td>43390374</td>\n",
       "      <td>21770919</td>\n",
       "      <td>21619455</td>\n",
       "      <td>11354540</td>\n",
       "      <td>42782526</td>\n",
       "      <td>21446690</td>\n",
       "      <td>21335836</td>\n",
       "      <td>607848</td>\n",
       "      <td>324229</td>\n",
       "      <td>283619</td>\n",
       "      <td>6556</td>\n",
       "      <td>20525</td>\n",
       "      <td>11235</td>\n",
       "      <td>9290</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>City area</td>\n",
       "      <td>32308970</td>\n",
       "      <td>16199493</td>\n",
       "      <td>16109477</td>\n",
       "      <td>32290055</td>\n",
       "      <td>16189140</td>\n",
       "      <td>16100915</td>\n",
       "      <td>8462417</td>\n",
       "      <td>31856255</td>\n",
       "      <td>15964971</td>\n",
       "      <td>15891284</td>\n",
       "      <td>433800</td>\n",
       "      <td>224169</td>\n",
       "      <td>209631</td>\n",
       "      <td>6051</td>\n",
       "      <td>18915</td>\n",
       "      <td>10353</td>\n",
       "      <td>8562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Eup area</td>\n",
       "      <td>3603647</td>\n",
       "      <td>1804648</td>\n",
       "      <td>1798999</td>\n",
       "      <td>3602462</td>\n",
       "      <td>1804027</td>\n",
       "      <td>1798435</td>\n",
       "      <td>917171</td>\n",
       "      <td>3542464</td>\n",
       "      <td>1773650</td>\n",
       "      <td>1768814</td>\n",
       "      <td>59998</td>\n",
       "      <td>30377</td>\n",
       "      <td>29621</td>\n",
       "      <td>357</td>\n",
       "      <td>1185</td>\n",
       "      <td>621</td>\n",
       "      <td>564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Myeon area</td>\n",
       "      <td>7498282</td>\n",
       "      <td>3778013</td>\n",
       "      <td>3720269</td>\n",
       "      <td>7497857</td>\n",
       "      <td>3777752</td>\n",
       "      <td>3720105</td>\n",
       "      <td>1974952</td>\n",
       "      <td>7383807</td>\n",
       "      <td>3708069</td>\n",
       "      <td>3675738</td>\n",
       "      <td>114050</td>\n",
       "      <td>69683</td>\n",
       "      <td>44367</td>\n",
       "      <td>148</td>\n",
       "      <td>425</td>\n",
       "      <td>261</td>\n",
       "      <td>164</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   By administrative divisions  ...                               1990.16\n",
       "0  By administrative divisions  ...  Foreigner household(female) (Person)\n",
       "1                Whole country  ...                                  9290\n",
       "2                    City area  ...                                  8562\n",
       "3                     Eup area  ...                                   564\n",
       "4                   Myeon area  ...                                   164\n",
       "\n",
       "[5 rows x 18 columns]"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 04.02.08\n",
    "# return head \n",
    "# dt08\n",
    "\n",
    "dt08.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "ba17edc9-2653-4ea2-93d0-5b1994243e2a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>By administrative divisions</th>\n",
       "      <th>1985</th>\n",
       "      <th>1985.1</th>\n",
       "      <th>1985.2</th>\n",
       "      <th>1985.3</th>\n",
       "      <th>1985.4</th>\n",
       "      <th>1985.5</th>\n",
       "      <th>1985.6</th>\n",
       "      <th>1985.7</th>\n",
       "      <th>1985.8</th>\n",
       "      <th>1985.9</th>\n",
       "      <th>1985.10</th>\n",
       "      <th>1985.11</th>\n",
       "      <th>1985.12</th>\n",
       "      <th>1985.13</th>\n",
       "      <th>1985.14</th>\n",
       "      <th>1985.15</th>\n",
       "      <th>1985.16</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>By administrative divisions</td>\n",
       "      <td>Total population (Person)</td>\n",
       "      <td>Male (Person)</td>\n",
       "      <td>Female (Person)</td>\n",
       "      <td>Korean (Person)</td>\n",
       "      <td>Male (Person)</td>\n",
       "      <td>Female (Person)</td>\n",
       "      <td>Ordinary household (households)</td>\n",
       "      <td>Ordinary household members (Person)</td>\n",
       "      <td>Ordinary household members(male) (Person)</td>\n",
       "      <td>Ordinary household members(female) (Person)</td>\n",
       "      <td>Institutional household members (Person)</td>\n",
       "      <td>Institutional household members(male) (Person)</td>\n",
       "      <td>Institutional household members(female) (Person)</td>\n",
       "      <td>Foreigner households (households)</td>\n",
       "      <td>Foreigner household member (Person)</td>\n",
       "      <td>Foreigner household member(male) (Person)</td>\n",
       "      <td>Foreigner household(female) (Person)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Whole country</td>\n",
       "      <td>40448486</td>\n",
       "      <td>20243765</td>\n",
       "      <td>20204721</td>\n",
       "      <td>40419652</td>\n",
       "      <td>20227564</td>\n",
       "      <td>20192088</td>\n",
       "      <td>9571361</td>\n",
       "      <td>39772679</td>\n",
       "      <td>19925681</td>\n",
       "      <td>19846998</td>\n",
       "      <td>646973</td>\n",
       "      <td>301883</td>\n",
       "      <td>345090</td>\n",
       "      <td>10694</td>\n",
       "      <td>28834</td>\n",
       "      <td>16201</td>\n",
       "      <td>12633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>City area</td>\n",
       "      <td>26442980</td>\n",
       "      <td>13168116</td>\n",
       "      <td>13274864</td>\n",
       "      <td>26417972</td>\n",
       "      <td>13154130</td>\n",
       "      <td>13263842</td>\n",
       "      <td>6330798</td>\n",
       "      <td>25931647</td>\n",
       "      <td>12940071</td>\n",
       "      <td>12991576</td>\n",
       "      <td>486325</td>\n",
       "      <td>214059</td>\n",
       "      <td>272266</td>\n",
       "      <td>9302</td>\n",
       "      <td>25008</td>\n",
       "      <td>13986</td>\n",
       "      <td>11022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Eup area</td>\n",
       "      <td>4817236</td>\n",
       "      <td>2421338</td>\n",
       "      <td>2395898</td>\n",
       "      <td>4814407</td>\n",
       "      <td>2419709</td>\n",
       "      <td>2394698</td>\n",
       "      <td>1106070</td>\n",
       "      <td>4738350</td>\n",
       "      <td>2377837</td>\n",
       "      <td>2360513</td>\n",
       "      <td>76057</td>\n",
       "      <td>41872</td>\n",
       "      <td>34185</td>\n",
       "      <td>1029</td>\n",
       "      <td>2829</td>\n",
       "      <td>1629</td>\n",
       "      <td>1200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Myeon area</td>\n",
       "      <td>9188270</td>\n",
       "      <td>4654311</td>\n",
       "      <td>4533959</td>\n",
       "      <td>9187273</td>\n",
       "      <td>4653725</td>\n",
       "      <td>4533548</td>\n",
       "      <td>2134493</td>\n",
       "      <td>9102682</td>\n",
       "      <td>4607773</td>\n",
       "      <td>4494909</td>\n",
       "      <td>84591</td>\n",
       "      <td>45952</td>\n",
       "      <td>38639</td>\n",
       "      <td>363</td>\n",
       "      <td>997</td>\n",
       "      <td>586</td>\n",
       "      <td>411</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   By administrative divisions  ...                               1985.16\n",
       "0  By administrative divisions  ...  Foreigner household(female) (Person)\n",
       "1                Whole country  ...                                 12633\n",
       "2                    City area  ...                                 11022\n",
       "3                     Eup area  ...                                  1200\n",
       "4                   Myeon area  ...                                   411\n",
       "\n",
       "[5 rows x 18 columns]"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 04.02.09\n",
    "# return head \n",
    "# dt09\n",
    "\n",
    "dt09.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "id": "dff7ee5c-5e2e-49ec-b081-2975a745aa38",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>By administrative divisions</th>\n",
       "      <th>1980</th>\n",
       "      <th>1980.1</th>\n",
       "      <th>1980.2</th>\n",
       "      <th>1980.3</th>\n",
       "      <th>1980.4</th>\n",
       "      <th>1980.5</th>\n",
       "      <th>1980.6</th>\n",
       "      <th>1980.7</th>\n",
       "      <th>1980.8</th>\n",
       "      <th>1980.9</th>\n",
       "      <th>1980.10</th>\n",
       "      <th>1980.11</th>\n",
       "      <th>1980.12</th>\n",
       "      <th>1980.13</th>\n",
       "      <th>1980.14</th>\n",
       "      <th>1980.15</th>\n",
       "      <th>1980.16</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>By administrative divisions</td>\n",
       "      <td>Total population (Person)</td>\n",
       "      <td>Male (Person)</td>\n",
       "      <td>Female (Person)</td>\n",
       "      <td>Korean (Person)</td>\n",
       "      <td>Male (Person)</td>\n",
       "      <td>Female (Person)</td>\n",
       "      <td>Ordinary household (households)</td>\n",
       "      <td>Ordinary household members (Person)</td>\n",
       "      <td>Ordinary household members(male) (Person)</td>\n",
       "      <td>Ordinary household members(female) (Person)</td>\n",
       "      <td>Institutional household members (Person)</td>\n",
       "      <td>Institutional household members(male) (Person)</td>\n",
       "      <td>Institutional household members(female) (Person)</td>\n",
       "      <td>Foreigner households (households)</td>\n",
       "      <td>Foreigner household member (Person)</td>\n",
       "      <td>Foreigner household member(male) (Person)</td>\n",
       "      <td>Foreigner household(female) (Person)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Whole country</td>\n",
       "      <td>37436315</td>\n",
       "      <td>18767201</td>\n",
       "      <td>18669114</td>\n",
       "      <td>37406815</td>\n",
       "      <td>18749306</td>\n",
       "      <td>18657509</td>\n",
       "      <td>7969201</td>\n",
       "      <td>36843251</td>\n",
       "      <td>18523047</td>\n",
       "      <td>18320204</td>\n",
       "      <td>563564</td>\n",
       "      <td>226259</td>\n",
       "      <td>337305</td>\n",
       "      <td>9404</td>\n",
       "      <td>29500</td>\n",
       "      <td>17895</td>\n",
       "      <td>11605</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>City area</td>\n",
       "      <td>21434116</td>\n",
       "      <td>10713025</td>\n",
       "      <td>10721091</td>\n",
       "      <td>21409453</td>\n",
       "      <td>10697846</td>\n",
       "      <td>10711607</td>\n",
       "      <td>4669976</td>\n",
       "      <td>20976955</td>\n",
       "      <td>10526940</td>\n",
       "      <td>10450015</td>\n",
       "      <td>432498</td>\n",
       "      <td>170906</td>\n",
       "      <td>261592</td>\n",
       "      <td>8172</td>\n",
       "      <td>24663</td>\n",
       "      <td>15179</td>\n",
       "      <td>9484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Eup area</td>\n",
       "      <td>4539666</td>\n",
       "      <td>2277850</td>\n",
       "      <td>2261816</td>\n",
       "      <td>4536826</td>\n",
       "      <td>2276333</td>\n",
       "      <td>2260493</td>\n",
       "      <td>935720</td>\n",
       "      <td>4479937</td>\n",
       "      <td>2252076</td>\n",
       "      <td>2227861</td>\n",
       "      <td>56889</td>\n",
       "      <td>24257</td>\n",
       "      <td>32632</td>\n",
       "      <td>628</td>\n",
       "      <td>2840</td>\n",
       "      <td>1517</td>\n",
       "      <td>1323</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Myeon area</td>\n",
       "      <td>11462533</td>\n",
       "      <td>5776326</td>\n",
       "      <td>5686207</td>\n",
       "      <td>11460536</td>\n",
       "      <td>5775127</td>\n",
       "      <td>5685409</td>\n",
       "      <td>2363505</td>\n",
       "      <td>11386460</td>\n",
       "      <td>5744131</td>\n",
       "      <td>5642329</td>\n",
       "      <td>74177</td>\n",
       "      <td>31096</td>\n",
       "      <td>43081</td>\n",
       "      <td>602</td>\n",
       "      <td>1997</td>\n",
       "      <td>1199</td>\n",
       "      <td>798</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   By administrative divisions  ...                               1980.16\n",
       "0  By administrative divisions  ...  Foreigner household(female) (Person)\n",
       "1                Whole country  ...                                 11605\n",
       "2                    City area  ...                                  9484\n",
       "3                     Eup area  ...                                  1323\n",
       "4                   Myeon area  ...                                   798\n",
       "\n",
       "[5 rows x 18 columns]"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 04.02.10\n",
    "# return head \n",
    "# dt10\n",
    "\n",
    "dt10.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "6d96f99a-dfc0-4e26-8c26-b46bfa39cf69",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>By administrative divisions</th>\n",
       "      <th>1975</th>\n",
       "      <th>1975.1</th>\n",
       "      <th>1975.2</th>\n",
       "      <th>1975.3</th>\n",
       "      <th>1975.4</th>\n",
       "      <th>1975.5</th>\n",
       "      <th>1975.6</th>\n",
       "      <th>1975.7</th>\n",
       "      <th>1975.8</th>\n",
       "      <th>1975.9</th>\n",
       "      <th>1975.10</th>\n",
       "      <th>1975.11</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>By administrative divisions</td>\n",
       "      <td>Household (households)</td>\n",
       "      <td>Korean (households)</td>\n",
       "      <td>Foreigner household (households)</td>\n",
       "      <td>Population (Person)</td>\n",
       "      <td>Male (Person)</td>\n",
       "      <td>Female (Person)</td>\n",
       "      <td>Korean (Person)</td>\n",
       "      <td>Male (Person)</td>\n",
       "      <td>Korean female (Person)</td>\n",
       "      <td>Foreigner (Person)</td>\n",
       "      <td>Foreigner male (Person)</td>\n",
       "      <td>Foreigner female (Person)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Whole country</td>\n",
       "      <td>6761239</td>\n",
       "      <td>6754257</td>\n",
       "      <td>6982</td>\n",
       "      <td>34706620</td>\n",
       "      <td>17461244</td>\n",
       "      <td>17245376</td>\n",
       "      <td>34678972</td>\n",
       "      <td>17445246</td>\n",
       "      <td>17233726</td>\n",
       "      <td>27648</td>\n",
       "      <td>15998</td>\n",
       "      <td>11650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>City area</td>\n",
       "      <td>3418290</td>\n",
       "      <td>3412640</td>\n",
       "      <td>5650</td>\n",
       "      <td>16792771</td>\n",
       "      <td>8383271</td>\n",
       "      <td>8409500</td>\n",
       "      <td>16769946</td>\n",
       "      <td>8369909</td>\n",
       "      <td>8400037</td>\n",
       "      <td>22825</td>\n",
       "      <td>13362</td>\n",
       "      <td>9463</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Eup area</td>\n",
       "      <td>722593</td>\n",
       "      <td>721911</td>\n",
       "      <td>682</td>\n",
       "      <td>3723354</td>\n",
       "      <td>1876381</td>\n",
       "      <td>1846973</td>\n",
       "      <td>3720417</td>\n",
       "      <td>1874848</td>\n",
       "      <td>1845569</td>\n",
       "      <td>2937</td>\n",
       "      <td>1533</td>\n",
       "      <td>1404</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Myeon area</td>\n",
       "      <td>2620356</td>\n",
       "      <td>2619706</td>\n",
       "      <td>650</td>\n",
       "      <td>14187007</td>\n",
       "      <td>7198257</td>\n",
       "      <td>6988750</td>\n",
       "      <td>14185121</td>\n",
       "      <td>7197154</td>\n",
       "      <td>6987967</td>\n",
       "      <td>1886</td>\n",
       "      <td>1103</td>\n",
       "      <td>783</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   By administrative divisions  ...                    1975.11\n",
       "0  By administrative divisions  ...  Foreigner female (Person)\n",
       "1                Whole country  ...                      11650\n",
       "2                    City area  ...                       9463\n",
       "3                     Eup area  ...                       1404\n",
       "4                   Myeon area  ...                        783\n",
       "\n",
       "[5 rows x 13 columns]"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 04.02.11\n",
    "# return head \n",
    "# dt11\n",
    "\n",
    "dt11.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "b39d18dd-09ec-4a04-aba3-16b4a6104e8a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>By administrative divisions</th>\n",
       "      <th>1970</th>\n",
       "      <th>1970.1</th>\n",
       "      <th>1970.2</th>\n",
       "      <th>1970.3</th>\n",
       "      <th>1970.4</th>\n",
       "      <th>1970.5</th>\n",
       "      <th>1970.6</th>\n",
       "      <th>1970.7</th>\n",
       "      <th>1970.8</th>\n",
       "      <th>1970.9</th>\n",
       "      <th>1970.10</th>\n",
       "      <th>1970.11</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>By administrative divisions</td>\n",
       "      <td>Household (households)</td>\n",
       "      <td>Korean (households)</td>\n",
       "      <td>Foreigner household (households)</td>\n",
       "      <td>Population (Person)</td>\n",
       "      <td>Male (Person)</td>\n",
       "      <td>Female (Person)</td>\n",
       "      <td>Korean (Person)</td>\n",
       "      <td>Male (Person)</td>\n",
       "      <td>Korean female (Person)</td>\n",
       "      <td>Foreigner (Person)</td>\n",
       "      <td>Foreigner male (Person)</td>\n",
       "      <td>Foreigner female (Person)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Whole country</td>\n",
       "      <td>5863440</td>\n",
       "      <td>5856901</td>\n",
       "      <td>6539</td>\n",
       "      <td>30882386</td>\n",
       "      <td>15216002</td>\n",
       "      <td>15666384</td>\n",
       "      <td>30851984</td>\n",
       "      <td>15199940</td>\n",
       "      <td>15652044</td>\n",
       "      <td>30402</td>\n",
       "      <td>16062</td>\n",
       "      <td>14340</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>City area</td>\n",
       "      <td>2530080</td>\n",
       "      <td>2525039</td>\n",
       "      <td>5041</td>\n",
       "      <td>12709513</td>\n",
       "      <td>6257068</td>\n",
       "      <td>6452445</td>\n",
       "      <td>12685143</td>\n",
       "      <td>6244207</td>\n",
       "      <td>6440936</td>\n",
       "      <td>24370</td>\n",
       "      <td>12861</td>\n",
       "      <td>11509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Eup area</td>\n",
       "      <td>532573</td>\n",
       "      <td>531775</td>\n",
       "      <td>798</td>\n",
       "      <td>2800456</td>\n",
       "      <td>1379438</td>\n",
       "      <td>1421018</td>\n",
       "      <td>2796872</td>\n",
       "      <td>1377559</td>\n",
       "      <td>1419313</td>\n",
       "      <td>3584</td>\n",
       "      <td>1879</td>\n",
       "      <td>1705</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Myeon area</td>\n",
       "      <td>2800787</td>\n",
       "      <td>2800087</td>\n",
       "      <td>700</td>\n",
       "      <td>15372417</td>\n",
       "      <td>7579496</td>\n",
       "      <td>7792921</td>\n",
       "      <td>15369969</td>\n",
       "      <td>7578174</td>\n",
       "      <td>7791795</td>\n",
       "      <td>2448</td>\n",
       "      <td>1322</td>\n",
       "      <td>1126</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   By administrative divisions  ...                    1970.11\n",
       "0  By administrative divisions  ...  Foreigner female (Person)\n",
       "1                Whole country  ...                      14340\n",
       "2                    City area  ...                      11509\n",
       "3                     Eup area  ...                       1705\n",
       "4                   Myeon area  ...                       1126\n",
       "\n",
       "[5 rows x 13 columns]"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 04.02.12\n",
    "# return head \n",
    "# dt12\n",
    "\n",
    "dt12.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "id": "90cc5f41-c2bb-4ec0-bd36-56c4bbabee27",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.03.01\n",
    "# Replace Headers\n",
    "# dt03\n",
    "\n",
    "dt03.rename(columns={\"2022\": \"2022_ttl\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "id": "4b45782c-8042-4f66-9785-c47148b5f5aa",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   By administrative divisions(eup, myeon, dong)  ...                                           2022.19\n",
      "0  By administrative divisions(eup, myeon, dong)  ...  Living quaters other than housing unit (Housing)\n",
      "1                                  Whole country  ...                                           1162311\n",
      "2                                 Total for eups  ...                                             81935\n",
      "3                               Total for myeons  ...                                            110037\n",
      "4                                Total for dongs  ...                                            970339\n",
      "\n",
      "[5 rows x 21 columns]\n"
     ]
    }
   ],
   "source": [
    "# 04.03.02\n",
    "# return head \n",
    "# dt03\n",
    "\n",
    "print(dt03.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "id": "86e983c8-d351-48e7-b988-149d533ec6b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.04.01\n",
    "# Replace Headers\n",
    "# dt04\n",
    "\n",
    "dt04.rename(columns={\"2010\": \"2010_ttl\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "id": "c425f28b-8881-4123-833c-d8eae28a4fd8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   By administrative divisions(eup, myeon, dong)  ...                                           2010.19\n",
      "0  By administrative divisions(eup, myeon, dong)  ...  Living quaters other than housing unit (Housing)\n",
      "1                                  Whole country  ...                                            303097\n",
      "2                                Total for dongs  ...                                            270518\n",
      "3                                 Total for eups  ...                                              9816\n",
      "4                               Total for myeons  ...                                             22763\n",
      "\n",
      "[5 rows x 21 columns]\n"
     ]
    }
   ],
   "source": [
    "# 04.04.02\n",
    "# return head \n",
    "# dt04\n",
    "\n",
    "print(dt04.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "id": "11e846bf-8fcf-4b88-85c9-3ab23867d45f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.05.01\n",
    "# Replace Headers\n",
    "# dt05\n",
    "\n",
    "dt05.rename(columns={\"2005\": \"2005_ttl\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "be98bfcf-f853-4ae8-b156-e889c2a2de54",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   By administrative divisions  ...                                           2005.19\n",
      "0  By administrative divisions  ...  Living quaters other than housing unit (Housing)\n",
      "1                Whole country  ...                                            206511\n",
      "2                    Dong area  ...                                            184683\n",
      "3                     Eup area  ...                                              7433\n",
      "4                   Myeon area  ...                                             14395\n",
      "\n",
      "[5 rows x 21 columns]\n"
     ]
    }
   ],
   "source": [
    "# 04.05.02\n",
    "# return head \n",
    "# dt05\n",
    "\n",
    "print(dt05.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "4f8ec59c-682a-414c-a147-b4899975ac94",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.06.01\n",
    "# Replace Headers\n",
    "# dt06\n",
    "\n",
    "dt06.rename(columns={\"2000\": \"2000_ttl\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "8128b21a-1619-4176-a96a-0c79ee7d2ceb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   By administrative divisions  ...                                           2000.19\n",
      "0  By administrative divisions  ...  Living quaters other than housing unit (Housing)\n",
      "1                Whole country  ...                                             91814\n",
      "2                     Eup area  ...                                              7254\n",
      "3                   Myeon area  ...                                             16805\n",
      "4                    Dong area  ...                                             67755\n",
      "\n",
      "[5 rows x 21 columns]\n"
     ]
    }
   ],
   "source": [
    "# 04.06.02\n",
    "# return head \n",
    "# dt06\n",
    "\n",
    "print(dt06.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "id": "f56955ad-f5f7-40bb-be00-95c6b6fa3541",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.07.01\n",
    "# Replace Headers \n",
    "# dt07\n",
    "\n",
    "dt07.rename(columns={\"1995\": \"1995_ttl\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "id": "c0e112bf-19ff-41ca-bb27-9330a3b05c7f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   By administrative divisions  ...                               1995.16\n",
      "0  By administrative divisions  ...  Foreigner household(female) (Person)\n",
      "1                Whole country  ...                                 23044\n",
      "2                     Eup area  ...                                  1382\n",
      "3                   Myeon area  ...                                  2738\n",
      "4                    Dong area  ...                                 18924\n",
      "\n",
      "[5 rows x 18 columns]\n"
     ]
    }
   ],
   "source": [
    "# 04.07.02\n",
    "# return head \n",
    "# dt07\n",
    "\n",
    "print(dt07.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "id": "b7ea3a9d-ebcb-4619-b4cb-6bde627a5e48",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.08.01\n",
    "# Replace Headers \n",
    "# dt08\n",
    "\n",
    "dt08.rename(columns={\"1990\": \"1990_ttl\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "1f2169fe-188f-4c50-b960-7c03e6cac30e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   By administrative divisions  ...                               1990.16\n",
      "0  By administrative divisions  ...  Foreigner household(female) (Person)\n",
      "1                Whole country  ...                                  9290\n",
      "2                    City area  ...                                  8562\n",
      "3                     Eup area  ...                                   564\n",
      "4                   Myeon area  ...                                   164\n",
      "\n",
      "[5 rows x 18 columns]\n"
     ]
    }
   ],
   "source": [
    "# 04.08.02\n",
    "# return head \n",
    "# dt08\n",
    "\n",
    "print(dt08.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "55413786-121b-4027-b76c-f456deca23c1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.09.01\n",
    "# Replace Headers \n",
    "# dt09\n",
    "\n",
    "dt09.rename(columns={\"1985\": \"1985_ttl\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "id": "13e578ec-604b-4c61-9a4e-a6ec0524120f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   By administrative divisions  ...                               1985.16\n",
      "0  By administrative divisions  ...  Foreigner household(female) (Person)\n",
      "1                Whole country  ...                                 12633\n",
      "2                    City area  ...                                 11022\n",
      "3                     Eup area  ...                                  1200\n",
      "4                   Myeon area  ...                                   411\n",
      "\n",
      "[5 rows x 18 columns]\n"
     ]
    }
   ],
   "source": [
    "# 04.09.02\n",
    "# return head \n",
    "# dt09\n",
    "\n",
    "print(dt09.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "eb7a1020-742e-4612-a38f-77f4d64aca10",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.10.01\n",
    "# Replace Headers \n",
    "# dt10\n",
    "\n",
    "dt10.rename(columns={\"1980\": \"1980_ttl\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "00b8b438-6e67-42b7-92af-954f9e4df0ee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   By administrative divisions  ...                               1980.16\n",
      "0  By administrative divisions  ...  Foreigner household(female) (Person)\n",
      "1                Whole country  ...                                 11605\n",
      "2                    City area  ...                                  9484\n",
      "3                     Eup area  ...                                  1323\n",
      "4                   Myeon area  ...                                   798\n",
      "\n",
      "[5 rows x 18 columns]\n"
     ]
    }
   ],
   "source": [
    "# 04.10.02\n",
    "# return head \n",
    "# dt10\n",
    "\n",
    "print(dt10.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "54e5e41c-a076-4e57-99eb-b52cdd6e4845",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.11.01\n",
    "# Replace Headers \n",
    "# dt11\n",
    "\n",
    "dt11.rename(columns={\"1975\": \"1975_ttl\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "45aa68d5-59b0-4c5b-a3d7-591c9f34b03a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   By administrative divisions  ...                    1975.11\n",
      "0  By administrative divisions  ...  Foreigner female (Person)\n",
      "1                Whole country  ...                      11650\n",
      "2                    City area  ...                       9463\n",
      "3                     Eup area  ...                       1404\n",
      "4                   Myeon area  ...                        783\n",
      "\n",
      "[5 rows x 13 columns]\n"
     ]
    }
   ],
   "source": [
    "# 04.11.02\n",
    "# return head \n",
    "# dt11\n",
    "\n",
    "print(dt11.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "b48fe982-b34f-4865-8a0d-591819c6aa3b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.12.01\n",
    "# Replace Headers \n",
    "# dt12\n",
    "\n",
    "dt12.rename(columns={\"1970\": \"1970_ttl\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "cb9cfc75-7cde-48b2-838c-ff186c39787b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   By administrative divisions  ...                    1970.11\n",
      "0  By administrative divisions  ...  Foreigner female (Person)\n",
      "1                Whole country  ...                      14340\n",
      "2                    City area  ...                      11509\n",
      "3                     Eup area  ...                       1705\n",
      "4                   Myeon area  ...                       1126\n",
      "\n",
      "[5 rows x 13 columns]\n"
     ]
    }
   ],
   "source": [
    "# 04.12.02\n",
    "# return head \n",
    "# dt12\n",
    "\n",
    "print(dt12.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "8c87a68e-b49f-471b-aced-f9aefb3b2542",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 04.13.01\n",
    "# 클릭한 목록에 대한 하위 목록 생성\n",
    "# return URL\n",
    "# KOSIS.kr API\n",
    "# func init self\n",
    "# dt13\n",
    "\n",
    "class NewWindow(QtWidgets.QMainWindow):\n",
    "    def __init__(self, parent=None):\n",
    "        super(NewWindow, self).__init__(parent)\n",
    "        centralWidget = QWidget()\n",
    "        self.setCentralWidget(centralWidget)\n",
    "        self.setGeometry(300, 300, 500, 500)\n",
    "\n",
    "        Setting(self, List_Id)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "bce8e12b-6a37-426a-919c-32e2aece966c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 04.13.02\n",
    "# 최상위 목록 생성\n",
    "# return URL\n",
    "# KOSIS.kr API\n",
    "# func init self\n",
    "# dt13\n",
    "\n",
    "class MyWindow(QtWidgets.QMainWindow, QPushButton):\n",
    "    def __init__(self):\n",
    "        super(MyWindow, self).__init__()\n",
    "        centralWidget = QWidget()\n",
    "        self.setCentralWidget(centralWidget)\n",
    "        self.setGeometry(200, 200, 500, 500)\n",
    "        self.setStyleSheet(\"background-color: white\")\n",
    "\n",
    "        Setting(self, 'A')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "feeb30da-b2e6-4a9e-8da8-c947da42ca3e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 04.13.03\n",
    "# 목록 셋팅 함수\n",
    "# return URL\n",
    "# KOSIS.kr API\n",
    "# func Setting\n",
    "# dt13\n",
    "\n",
    "def Setting(self, parentId):\n",
    "    # url을 통해 json 데이터 가져오기\n",
    "    # return json data via url\n",
    "    with urlopen(\n",
    "            \"https://kosis.kr/openapi/statisticsList.do?method=getList&apiKey=ZjZjOTI3MjRjNmU1YzdhZTMwOWRjNjgxN2MzNDgwNmY=&vwCd=MT_ZTITLE&parentListId=\"+parentId+\"&format=json&jsonVD=Y\") as url:\n",
    "        json_file = url.read()\n",
    "\n",
    "    py_json = json.loads(json_file.decode('utf-8'))\n",
    "\n",
    "    # 하위 목록이 있다면 LinkButton\n",
    "    # 하위 목록이 없다면 label로 생성\n",
    "    # if/else link/label\n",
    "    for i, v in enumerate(py_json):\n",
    "        if 'LIST_NM' in v:\n",
    "            btn = QCommandLinkButton(v['LIST_NM'], self)\n",
    "            btn.setStyleSheet(\"Text-align: left;\"\n",
    "                             \"border: none;\"\n",
    "                             )\n",
    "            btn.setGeometry(100, 50 * i, 500, 40)\n",
    "            btn.clicked.connect(fc.partial(Action, self, v['LIST_ID']))\n",
    "        else:\n",
    "            lbl = QLabel(v['TBL_NM'], self)\n",
    "            lbl.setGeometry(100, 50 * i, 500, 40)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "f9fa33e1-9db0-40a2-a2d2-a1258df172de",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 04.13.04\n",
    "# 클릭한 목록에 대한 하위 목록 생성\n",
    "# return URL\n",
    "# KOSIS.kr API\n",
    "# func Action\n",
    "# dt13\n",
    "\n",
    "# def Action(self, check):\n",
    "#     global List_Id\n",
    "#     List_Id = check\n",
    "\n",
    "#     NewWindow(self).show()\n",
    "\n",
    "# if __name__ == \"__main__\":\n",
    "#     app = QtWidgets.QApplication(sys.argv)\n",
    "#     window = MyWindow()\n",
    "#     window.show()\n",
    "#     sys.exit(app.exec_())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "0df6af15-7170-4295-8733-0b8fee3cdcca",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 04.13.05\n",
    "# return URL\n",
    "# KOSIS.kr API\n",
    "# dt13\n",
    "\n",
    "import requests\n",
    "resp = requests.get('https://kosis.kr/openapi/statisticsList.do?method=getList&apiKey=MzA4MTgyY2I2Y2VhMDc1ODI5OTU0M2UxYzQyMTAxNjA=&vwCd=MT_ETITLE&parentListId=A&format=json&jsonVD=Y')\n",
    "for resp in resp.history:\n",
    "    print(resp.url)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "e5891eb5-8f30-4343-a4c0-b6c3160a4ccb",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 04.13.06\n",
    "# return url\n",
    "# assign variables\n",
    "# dt13\n",
    "\n",
    "dt13_urls = 'https://kosis.kr'\n",
    "dt13_grab = requests.get(dt13_urls)\n",
    "dt13_soup = BeautifulSoup(dt13_grab.text, 'html.parser')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "3af5f257-97e3-42b6-95f4-0591d36ca3d9",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 04.13.07\n",
    "# opening a file in write mode\n",
    "# dt13\n",
    "\n",
    "dt13_f = open(\"dt13.txt\", \"w\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "7d47ba21-4582-4340-a0a7-cb74068f7715",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 04.13.08\n",
    "# traverse paragraphs from soup\n",
    "# dt13\n",
    "\n",
    "for link in dt13_soup.find_all(\"a\"):\n",
    "    dt13_data = link.get('href')\n",
    "    dt13_f.write(dt13_data)\n",
    "    dt13_f.write(\"\\n\")\n",
    "\n",
    "dt13_f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "5cd4ce80-c531-4beb-a4aa-7a39d3eb04bf",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "#gnb\n",
      "#main_layout\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "/index/index.do\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "http://kosis.kr/easyViewStatis/customStatisIndex.do?vwcd=MT_TM1_TITLE&menuId=M_03_01\n",
      "http://kosis.kr/easyViewStatis/customStatisIndex.do?vwcd=MT_TM1_TITLE&menuId=M_03_01\n",
      "http://kosis.kr/easyViewStatis/customStatisIndex.do?vwcd=MT_TM2_TITLE&menuId=M_03_02\n",
      "http://kosis.kr/easyViewStatis/visualizationIndex.do\n",
      "http://kosis.kr/publication/publicationThema.do\n",
      "http://kosis.kr/publication/publicationThema.do\n",
      "http://kosis.kr/publication/publicationWord.do\n",
      "http://kosis.kr/publication/publicationStat.do\n",
      "http://kosis.kr/civilComplaint/faqList.do\n",
      "http://kosis.kr/civilComplaint/faqList.do\n",
      "http://kosis.kr/civilComplaint/qnaList.do\n",
      "http://kosis.kr/civilComplaint/kosisGuideIndex.do\n",
      "http://kosis.kr/civilComplaint/siteRequestList.do\n",
      "http://kosis.kr/civilComplaint/kosisEduIndex.do\n",
      "http://kosis.kr/serviceInfo/kosisIntroduce.do\n",
      "http://kosis.kr/serviceInfo/kosisIntroduce.do\n",
      "http://kosis.kr/serviceInfo/statisInstitution.do\n",
      "http://kosis.kr/serviceInfo/statisPublicationList.do\n",
      "http://kosis.kr/serviceInfo/noticeList.do\n",
      "http://kosis.kr/serviceInfo/factCheckList.do\n",
      "http://kosis.kr/serviceInfo/useGuide.do\n",
      "http://kosis.kr/serviceInfo/openAPIGuide.do\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "https://kosis.kr/eng\n",
      "https://kosis.kr/edu\n",
      "#none\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "http://kosis.kr/easyViewStatis/customStatisIndex.do?vwcd=MT_TM1_TITLE&menuId=M_03_01\n",
      "http://kosis.kr/easyViewStatis/customStatisIndex.do?vwcd=MT_TM1_TITLE&menuId=M_03_01\n",
      "http://kosis.kr/easyViewStatis/customStatisIndex.do?vwcd=MT_TM2_TITLE&menuId=M_03_02\n",
      "http://kosis.kr/easyViewStatis/visualizationIndex.do\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "http://kosis.kr/easyViewStatis/dynamicChartList.do\n",
      "http://kosis.kr/easyViewStatis/webtoonList.do\n",
      "http://kosis.kr/easyViewStatis/cardNewsList.do\n",
      "http://kosis.kr/easyViewStatis/uccList.do\n",
      "\n",
      "http://kosis.kr/publication/publicationThema.do\n",
      "http://kosis.kr/publication/publicationThema.do\n",
      "http://kosis.kr/publication/publicationWord.do\n",
      "http://kosis.kr/publication/publicationStat.do\n",
      "http://kosis.kr/civilComplaint/faqList.do\n",
      "http://kosis.kr/civilComplaint/faqList.do\n",
      "http://kosis.kr/civilComplaint/qnaList.do\n",
      "http://kosis.kr/civilComplaint/kosisGuideIndex.do\n",
      "http://kosis.kr/civilComplaint/siteRequestList.do\n",
      "http://kosis.kr/civilComplaint/kosisEduIndex.do\n",
      "http://kosis.kr/civilComplaint/kosisEduIndex.do\n",
      "http://kosis.kr/civilComplaint/kosisEduApply.do\n",
      "http://kosis.kr/civilComplaint/kosisEduApplyConfirm.do\n",
      "http://kosis.kr/serviceInfo/kosisIntroduce.do\n",
      "http://kosis.kr/serviceInfo/kosisIntroduce.do\n",
      "http://kosis.kr/serviceInfo/kosisIntroduce.do\n",
      "http://kosis.kr/serviceInfo/kosisHistory.do\n",
      "http://kosis.kr/serviceInfo/kosisIntroduceMove.do\n",
      "http://kosis.kr/serviceInfo/statisInstitution.do\n",
      "http://kosis.kr/serviceInfo/statisInstitution.do\n",
      "http://kosis.kr/serviceInfo/statisWriteStatus.do\n",
      "http://kosis.kr/serviceInfo/statisPublicationList.do\n",
      "http://kosis.kr/serviceInfo/noticeList.do\n",
      "http://kosis.kr/serviceInfo/noticeList.do\n",
      "http://kosis.kr/serviceInfo/newContrainDataList.do\n",
      "http://kosis.kr/serviceInfo/newsList.do\n",
      "http://kosis.kr/serviceInfo/factCheckList.do\n",
      "http://kosis.kr/serviceInfo/useGuide.do\n",
      "http://kosis.kr/serviceInfo/useGuide.do\n",
      "http://kosis.kr/serviceInfo/useClause.do\n",
      "http://kosis.kr/serviceInfo/applicationClause.do\n",
      "http://kosis.kr/serviceInfo/privacy_policy.do\n",
      "http://kosis.kr/serviceInfo/emailCollectClause.do\n",
      "http://kosis.kr/serviceInfo/openAPIGuide.do\n",
      "http://kosis.kr/multiStatNew/multiStatIndex.do\n",
      "http://kosis.kr/myPage/myStatisList.do\n",
      "http://kosis.kr/myPage/myStatisList.do\n",
      "http://kosis.kr/myPage/qnaList.do\n",
      "http://kosis.kr/myPage/qnaList.do\n",
      "http://kosis.kr/myPage/siteRequestList.do\n",
      "\n",
      "\n",
      "javascript:void(0)\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "javascript:void(0)\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "\n",
      "javascript:void(0)\n",
      "javascript:void(0)\n",
      "https://kosis.kr/eng\n",
      "#\n",
      "#Quick3\n",
      "https://kosis.kr/edu\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "javascript:generatorStatsLink('out','101','DT_1BPA002','1','주요 인구지표(성비,인구성장률,인구구조,부양비 등) / 전국')\n",
      "javascript:mainNewsLinkUrl('https://kostat.go.kr/board.es?mid=a10301010000&amp;bid=207&amp;act=view&amp;list_no=428476')\n",
      "javascript:generatorStatsLink('out','101','DT_1B8000F','3','인구동태건수 및 동태율 추이(출생,사망,혼인,이혼)')\n",
      "javascript:mainNewsLinkUrl('https://kostat.go.kr/board.es?mid=a10301020100&amp;bid=204&amp;act=view&amp;list_no=423833&amp;tag=&amp;nPage=1&amp;ref_bid=203,204,205,206,207&amp;keyField=T&amp;keyWord=')\n",
      "javascript:generatorStatsLink('out','101','DT_1B8000F','4','인구동태건수 및 동태율 추이(출생,사망,혼인,이혼)')\n",
      "javascript:mainNewsLinkUrl('https://kostat.go.kr/board.es?mid=a10301020100&amp;bid=204&amp;act=view&amp;list_no=423833&amp;tag=&amp;nPage=1&amp;ref_bid=203,204,205,206,207&amp;keyField=T&amp;keyWord=')\n",
      "javascript:generatorStatsLink('out','101','DT_1B8000F','5','인구동태건수 및 동태율 추이(출생,사망,혼인,이혼)')\n",
      "javascript:mainNewsLinkUrl('https://kostat.go.kr/board.es?mid=a10301020100&amp;bid=204&amp;act=view&amp;list_no=423833&amp;tag=&amp;nPage=1&amp;ref_bid=203,204,205,206,207&amp;keyField=T&amp;keyWord=')\n",
      "javascript:generatorStatsLink('out','101','DT_1B41','6','간이생명표(5세별)')\n",
      "javascript:mainNewsLinkUrl('https://kostat.go.kr/board.es?mid=a10301010000&amp;bid=208&amp;act=view&amp;list_no=422107&amp;tag=&amp;nPage=1&amp;ref_bid=203,204,205,206,207,210,211,11109,11113,11814,213,215,214,11860,11695,216,218,219,220,10820,11815,11895,11816,208,245,222,223,225,226,227,228,229,230,11321,232,233,234,12029,10920,11469,11470,11817,236,237,11471,238,240,241,11865,243,244,11893,11898,12031,11825,246&amp;keyField=T&amp;keyWord=%EC%83%9D%EB%AA%85%ED%91%9C&amp;bodo_b_type=all')\n",
      "javascript:mainJipyoSelect();\n",
      "javascript:;\n",
      "javascript:;\n",
      "javascript:;\n",
      "javascript:;\n",
      "javascript:;\n",
      "javascript:mainJipyoPopClose();\n",
      "javascript:void(0);\n",
      "javascript:void(0);\n",
      "javascript:void(0);\n",
      "javascript:void(0);\n",
      "javascript:void(0);\n",
      "javascript:generatorStatsLink('out','101','DT_1DA7001S','2','성별 경제활동인구 총괄')\n",
      "javascript:mainNewsLink('10557')\n",
      "javascript:generatorStatsLink('out','101','DT_1DA7001S','7','성별 경제활동인구 총괄')\n",
      "javascript:mainNewsLink('10557')\n",
      "javascript:generatorStatsLink('out','101','DT_1DA7001S','8','성별 경제활동인구 총괄')\n",
      "javascript:mainNewsLink('10557')\n",
      "javascript:generatorStatsLink('out','101','DT_1J22003','9','소비자물가지수(2020=100)')\n",
      "javascript:mainNewsLink('10552')\n",
      "javascript:generatorStatsLink('out','101','DT_1J22005','10','생활물가지수(2020=100)')\n",
      "javascript:mainNewsLink('10552')\n",
      "javascript:generatorStatsLink('out','101','DT_1J22004','11','신선식품지수(2020=100)')\n",
      "javascript:mainNewsLink('10552')\n",
      "javascript:generatorStatsLink('out','101','DT_1JH20202','12','전산업생산지수(계절조정지수)')\n",
      "javascript:mainNewsLink('10550')\n",
      "javascript:generatorStatsLink('out','101','DT_1K41012','13','재별 및 상품군별 소매판매액지수(2020=100.0)')\n",
      "javascript:mainNewsLink('10550')\n",
      "javascript:generatorStatsLink('out','101','DT_1F70011','42','설비투자지수')\n",
      "javascript:mainNewsLink('10550')\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "/easyViewStatis/dynamicChartList.do\n",
      "#\n",
      "#\n",
      "/easyViewStatis/cardNewsDetail.do?boardIdx=62\n",
      "#\n",
      "/easyViewStatis/webtoonDetail.do?boardIdx=215\n",
      "/easyViewStatis/visualizationIndex.do\n",
      "javascript:void(0);\n",
      "/serviceInfo/newContrainDataDetail.do?boardIdx=2006090&boardOrgId=325\n",
      "/serviceInfo/newContrainDataDetail.do?boardIdx=1966003&boardOrgId=301\n",
      "/serviceInfo/newContrainDataList.do\n",
      "javascript:void(0);\n",
      "https://kostat.go.kr/board.es?mid=a10301010000&bid=214&act=view&list_no=429644\n",
      "https://kostat.go.kr/board.es?mid=a10301010000&bid=205&act=view&list_no=429616\n",
      "/serviceInfo/newsList.do\n",
      "javascript:void(0);\n",
      "/serviceInfo/noticeDetail.do?boardIdx=2427\n",
      "/serviceInfo/noticeDetail.do?boardIdx=2426\n",
      "/serviceInfo/noticeList.do\n",
      "javascript:void(0);\n",
      "/civilComplaint/kosisGuideIndex.do?q_no=1#A_1\n",
      "/civilComplaint/kosisGuideIndex.do?q_no=2#A_2\n",
      "/civilComplaint/kosisGuideIndex.do\n",
      "javascript:void(0);\n",
      "/civilComplaint/qnaDetail.do?boardIdx=21562\n",
      "/civilComplaint/qnaDetail.do?boardIdx=21556\n",
      "/civilComplaint/qnaList.do\n",
      "javascript:void(0);\n",
      "/civilComplaint/faqList.do?q_no=1#A_1\n",
      "/civilComplaint/faqList.do?q_no=3#A_3\n",
      "/civilComplaint/faqList.do\n",
      "https://kostat.go.kr/menu.es?mid=a10105040000\n",
      "https://kosis.kr/serviceInfo/noticeDetail.do?boardIdx=2427\n",
      "#\n",
      "#\n",
      "#\n",
      "#\n",
      "/serviceInfo/useGuide.do\n",
      "/serviceInfo/privacy_policy.do\n",
      "/serviceInfo/emailCollectClause.do\n",
      "#\n",
      "/serviceInfo/openAPIGuide.do\n",
      "#\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "/common/tech/gatePage.do\n",
      "\n"
     ]
    }
   ],
   "source": [
    "# 04.13.09\n",
    "# assign variable for dt13\n",
    "# read txt file\n",
    "# dt13\n",
    "\n",
    "dt13_txt = open('dt13.txt', 'r')\n",
    "print(dt13_txt.read())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "4e2be539-eafc-4e67-92a5-b2dd04f62a02",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.14.00\n",
    "# Format data into a more readable format"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "d333d011-035f-4db2-8623-d7ecc2d42df5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.14.00\n",
    "# Identify outliers and bad data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "ce56e5ec-a9a5-4224-9ca5-9b73df6b3855",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "270\n"
     ]
    }
   ],
   "source": [
    "# 04.14.01\n",
    "# Find duplicates\n",
    "# return length\n",
    "# dt01\n",
    "\n",
    "print(len(dt01))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "6aa4c5e4-bb1c-43ef-adc7-b82b4ee61965",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 04.14.02\n",
    "# Find duplicates\n",
    "# create set\n",
    "# dt01\n",
    "\n",
    "dt01_set01 = set(dt01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "id": "e6c62f29-c22b-4b68-96fb-6e2f0efcb5b9",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "duplicates found\n"
     ]
    }
   ],
   "source": [
    "# 04.14.03\n",
    "# Find duplicates\n",
    "# dt01\n",
    "\n",
    "if len(dt01) != len(dt01_set01):\n",
    "    print('duplicates found')\n",
    "else:\n",
    "    print('duplicates not found')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "d59a2e86-df47-4b5c-880e-52bb0e1394da",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "270"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 04.14.04\n",
    "# Find duplicates\n",
    "# return number of rows\n",
    "# dt01\n",
    "\n",
    "len(dt01.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "65200026-fcea-44e0-8771-52260ec3e94e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 04.14.05\n",
    "# Find duplicates\n",
    "# remove duplicates\n",
    "# dt01\n",
    "\n",
    "dt01_dup = list(set(dt01))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "e81dd516-c5e2-483b-b957-26e40df6e6e7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['calendar_date', 'rate_marriage', 'rate_birth', 'ID', 'marriage', 'date', 'death', 'rate_growth_natural', 'divorce', 'growth_natural', 'rate_death', 'rate_divorce']\n"
     ]
    }
   ],
   "source": [
    "# 04.14.06\n",
    "# Find duplicates\n",
    "# return removed duplicates\n",
    "# dt01\n",
    "\n",
    "print(str(dt01_dup))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "2417981f-b49d-4dc7-b3a1-5ae074124a85",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "92857\n"
     ]
    }
   ],
   "source": [
    "# 04.15.01\n",
    "# Find duplicates\n",
    "# return length\n",
    "# dt02\n",
    "\n",
    "print(len(dt02))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "347d82f2-818a-4a11-9f79-cb0d06ce8f3a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 04.15.02\n",
    "# Find duplicates\n",
    "# create set\n",
    "# dt02\n",
    "\n",
    "dt02_set02 = set(dt02)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "70eab703-793d-4677-99f2-7802682ed91e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "duplicates found\n"
     ]
    }
   ],
   "source": [
    "# 04.16.01\n",
    "# Find duplicates\n",
    "# dt01\n",
    "\n",
    "if len(dt02) != len(dt02_set02):\n",
    "    print('duplicates found')\n",
    "else:\n",
    "    print('duplicates not found')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "45771971-5736-4324-8698-b5760909385f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "92857"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 04.17.01\n",
    "# Find duplicates\n",
    "# return number of rows\n",
    "# dt02\n",
    "\n",
    "len(dt02.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "id": "b71a11e8-f7dd-485e-9f76-0abd05f3353a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 04.17.02\n",
    "# Find duplicates\n",
    "# remove duplicates\n",
    "# dt02\n",
    "\n",
    "dt02_dup = list(set(dt02))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "8dbcfa9a-46a1-4894-aa5e-8af60f9bbc22",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['income', 'education_level', 'index', 'company_size', 'marriage', 'wave', 'region', 'unemployment_reason', 'gender', 'year', 'birth_year', 'fam_mem_num', 'id', 'religion', 'occupation']\n"
     ]
    }
   ],
   "source": [
    "# 04.17.03\n",
    "# Find duplicates\n",
    "# return removed duplicates\n",
    "# dt02\n",
    "\n",
    "print(str(dt02_dup))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "508b2d1c-2632-4966-855d-b81be89b1aa1",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 04.17.04\n",
    "# remove columns\n",
    "# dt02\n",
    "\n",
    "dt02_drp = dt02.drop(['religion', 'occupation', 'unemployment_reason', 'company_size', 'wave'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "a31cd4b6-4719-43dc-bf97-c2d03ba73e95",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(92857, 15)\n"
     ]
    }
   ],
   "source": [
    "# 04.17.05\n",
    "# verify dimensions\n",
    "# dt02\n",
    "\n",
    "print(dt02.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "id": "764f6f0b-0d1c-4cf5-a4d5-95e860f916b9",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "325\n"
     ]
    }
   ],
   "source": [
    "# 04.18.01\n",
    "# Find duplicates\n",
    "# return length\n",
    "# dt03\n",
    "\n",
    "print(len(dt03))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "id": "2e3de2bf-b32d-4424-806f-8a855fab3dd8",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 04.18.02\n",
    "# Find duplicates\n",
    "# create set\n",
    "# dt03\n",
    "\n",
    "dt03_set03 = set(dt03)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "id": "341ac6b1-dc4d-4ff2-a25a-1a6925dd799d",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "21\n"
     ]
    }
   ],
   "source": [
    "# 04.18.03\n",
    "# Find duplicates\n",
    "# return set\n",
    "# dt03\n",
    "\n",
    "print(len(dt03_set03))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "id": "c8f65756-3d41-4bdf-9968-0a018d389b06",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "duplicates found\n"
     ]
    }
   ],
   "source": [
    "# 04.18.04\n",
    "# Find duplicates\n",
    "# dt03\n",
    "\n",
    "if len(dt03) != len(dt03_set03):\n",
    "    print('duplicates found')\n",
    "else:\n",
    "    print('duplicates not found')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "27b869de-3094-45d8-bb1f-ae528e38f458",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "325"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# 04.18.05\n",
    "# Find duplicates\n",
    "# return number of rows\n",
    "# dt03\n",
    "\n",
    "len(dt03.index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "99fd0c76-3284-4ebe-aca8-ea445ff872e3",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 04.18.06\n",
    "# Find duplicates\n",
    "# remove duplicates\n",
    "# dt03\n",
    "\n",
    "dt03_dup = list(set(dt03))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "id": "c87e2e3c-bc0c-4854-afdf-e0632721f593",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2022.10', '2022.1', '2022_ttl', '2022.8', '2022.2', '2022.12', '2022.9', '2022.3', '2022.7', '2022.13', '2022.5', 'By administrative divisions(eup, myeon, dong)', '2022.6', '2022.15', '2022.19', '2022.16', '2022.17', '2022.18', '2022.14', '2022.11', '2022.4']\n"
     ]
    }
   ],
   "source": [
    "# 04.18.07\n",
    "# Find duplicates\n",
    "# return removed duplicates\n",
    "# dt03\n",
    "\n",
    "print(str(dt03_dup))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "id": "704e41f2-f2ed-4094-a2d0-25f9e2ac41e6",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(325, 21)\n"
     ]
    }
   ],
   "source": [
    "# 04.18.08\n",
    "# Find duplicates\n",
    "# verify dimensions\n",
    "# dt03\n",
    "\n",
    "print(dt03.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "cf24a6b5-c413-4aaf-8218-88c647a07838",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 04.19.01\n",
    "# create function to locate and remove duplicates\n",
    "# 1 parameter dtx\n",
    "# return duplicates list\n",
    "# return dimensions\n",
    "\n",
    "def rem_dup(dt_x01):\n",
    "    dt_x02 = set(dt_x01)\n",
    "    if len(dt_x01) != len(dt_x02):\n",
    "        len(dt_x01.index)\n",
    "        dt_x03 = list(set(dt_x01))\n",
    "        print(str(dt_x03))\n",
    "        print(dt_x01.shape)\n",
    "    else:\n",
    "        print('no duplicates found')\n",
    "        print(dt_x01.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "1c20bfe1-e75e-44f1-9984-b44aac735009",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['calendar_date', 'rate_marriage', 'rate_birth', 'ID', 'marriage', 'date', 'death', 'rate_growth_natural', 'divorce', 'growth_natural', 'rate_death', 'rate_divorce']\n",
      "(270, 12)\n"
     ]
    }
   ],
   "source": [
    "# 04.20.01\n",
    "# Find duplicates\n",
    "# dt01\n",
    "\n",
    "rem_dup(dt01)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "ea42481e-d2fc-4847-9213-dd292845f3ba",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['income', 'education_level', 'index', 'company_size', 'marriage', 'wave', 'region', 'unemployment_reason', 'gender', 'year', 'birth_year', 'fam_mem_num', 'id', 'religion', 'occupation']\n",
      "(92857, 15)\n"
     ]
    }
   ],
   "source": [
    "# 04.20.02\n",
    "# Find duplicates\n",
    "# dt02\n",
    "\n",
    "rem_dup(dt02)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "5a4714b7-a5b2-4271-ba35-4329623b627b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2022.10', '2022.1', '2022_ttl', '2022.8', '2022.2', '2022.12', '2022.9', '2022.3', '2022.7', '2022.13', '2022.5', 'By administrative divisions(eup, myeon, dong)', '2022.6', '2022.15', '2022.19', '2022.16', '2022.17', '2022.18', '2022.14', '2022.11', '2022.4']\n",
      "(325, 21)\n"
     ]
    }
   ],
   "source": [
    "# 04.20.03\n",
    "# Find duplicates\n",
    "# dt03\n",
    "\n",
    "rem_dup(dt03)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "b27161cd-8f27-4461-95c1-ad08deceef98",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no duplicates found\n",
      "(21, 21)\n"
     ]
    }
   ],
   "source": [
    "# 04.20.04\n",
    "# Find duplicates\n",
    "# dt04\n",
    "\n",
    "rem_dup(dt04)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "666ad07c-3201-4052-b270-3d80c0aa352b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no duplicates found\n",
      "(21, 21)\n"
     ]
    }
   ],
   "source": [
    "# 04.20.05\n",
    "# Find duplicates\n",
    "# dt05\n",
    "\n",
    "rem_dup(dt05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "27c7e60f-22b3-4d00-9df1-b953e86f733e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no duplicates found\n",
      "(21, 21)\n"
     ]
    }
   ],
   "source": [
    "# 04.20.06\n",
    "# Find duplicates\n",
    "# dt06\n",
    "\n",
    "rem_dup(dt06)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "35ab9e2a-ed20-4959-a0cb-33209c5888fb",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1995.10', '1995.5', '1995.15', '1995.3', '1995.8', '1995.2', '1995.6', '1995.7', '1995.13', '1995.12', '1995.14', '1995.1', 'By administrative divisions', '1995.9', '1995.4', '1995.11', '1995.16', '1995_ttl']\n",
      "(20, 18)\n"
     ]
    }
   ],
   "source": [
    "# 04.20.07\n",
    "# Find duplicates\n",
    "# dt07\n",
    "\n",
    "rem_dup(dt07)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "054badb1-efbe-4a13-b3d1-4fe33716e5b4",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1990.12', '1990.11', '1990.13', '1990.6', '1990.2', '1990.4', '1990.14', '1990.16', '1990_ttl', '1990.8', '1990.10', 'By administrative divisions', '1990.3', '1990.1', '1990.7', '1990.9', '1990.15', '1990.5']\n",
      "(20, 18)\n"
     ]
    }
   ],
   "source": [
    "# 04.20.08\n",
    "# Find duplicates\n",
    "# dt08\n",
    "\n",
    "rem_dup(dt08)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "9cb79ce9-5bed-4117-880c-0fa402f8122f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "no duplicates found\n",
      "(18, 18)\n"
     ]
    }
   ],
   "source": [
    "# 04.20.09\n",
    "# Find duplicates\n",
    "# dt09\n",
    "\n",
    "rem_dup(dt09)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "8e331580-618c-4e05-b7fd-6238875b7d69",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1980.2', '1980.4', '1980_ttl', '1980.3', '1980.6', '1980.7', '1980.10', '1980.12', '1980.13', '1980.8', 'By administrative divisions', '1980.5', '1980.14', '1980.16', '1980.11', '1980.9', '1980.15', '1980.1']\n",
      "(16, 18)\n"
     ]
    }
   ],
   "source": [
    "# 04.20.10\n",
    "# Find duplicates\n",
    "# dt10\n",
    "\n",
    "rem_dup(dt10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "516a189b-74e7-45c4-9e77-5749205cb2bc",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1975.11', '1975.7', '1975.1', '1975.3', 'By administrative divisions', '1975_ttl', '1975.2', '1975.9', '1975.10', '1975.4', '1975.8', '1975.5', '1975.6']\n",
      "(16, 13)\n"
     ]
    }
   ],
   "source": [
    "# 04.20.11\n",
    "# Find duplicates\n",
    "# dt11\n",
    "\n",
    "rem_dup(dt11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "b6c04075-d67a-4ce8-8d99-fe10c8133550",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['1970_ttl', '1970.6', '1970.11', '1970.1', '1970.2', '1970.8', 'By administrative divisions', '1970.3', '1970.4', '1970.5', '1970.9', '1970.10', '1970.7']\n",
      "(16, 13)\n"
     ]
    }
   ],
   "source": [
    "# 04.20.12\n",
    "# Find duplicates\n",
    "# dt12\n",
    "\n",
    "rem_dup(dt12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "18377b87-c63b-4e4e-8c2b-1ec2eb36b3da",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.20.00\n",
    "# Fix casing or inconsistent values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "d4b66648-3dc7-4610-9ec0-5a501b5d3b50",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 04.21.00\n",
    "# Conduct Fuzzy Matching"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "7dbd12ff-9f60-4f2f-84b5-03e62b633758",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Summary of Milestone Four:\n",
    "# Added new datasets vital to this research: population data from 1970.\n",
    "# Tranformed new datasets for clarity.\n",
    "# Called URL kosis.kr as new data source.\n",
    "# Removed duplicates from all datasets (12)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "ecae7a4e-56e8-4b6b-9293-88d88ff2ac9a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Make sure you clearly label each transformation step (Step #1, Step #2, etc.) in your code and describe what it is doing in 1-2 sentences. \n",
    "# You can submit a Jupyter Notebook or a PDF of your code. \n",
    "# If you submit a .py file you need to also include a PDF or attachment of your results."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "532002e6-9a19-48e9-a78e-3a236ef6ddb3",
   "metadata": {},
   "source": [
    "## 11-12_milestone_05"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "111f8422-961e-4683-aa6e-ce6d0c0857ae",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 05.01.00 Term Project DSC540_WK12_term_Schreck-Kim.pdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "1e0b5cee-a370-4534-a55e-2a80c7aa3ceb",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 05.01.00\n",
    "# Merging the Data and Storing in a Database/Visualizing Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "9053bc9e-4e7e-4b34-b473-37dcb24ff880",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[{'LIST_NM': 'Population Census', 'VW_CD': 'MT_ETITLE', 'LIST_ID': 'A_4'}, {'LIST_NM': 'Internal Migration Statistics', 'VW_CD': 'MT_ETITLE', 'LIST_ID': 'A_1'}, {'LIST_NM': 'International Migration Statistics', 'VW_CD': 'MT_ETITLE', 'LIST_ID': 'A_2'}, {'LIST_NM': 'Vital Statistics(Live Birth,Death,Marriage,Divorce)', 'VW_CD': 'MT_ETITLE', 'LIST_ID': 'A_3'}, {'LIST_NM': 'Household Projections', 'VW_CD': 'MT_ETITLE', 'LIST_ID': 'A_5'}, {'LIST_NM': 'Population Projections', 'VW_CD': 'MT_ETITLE', 'LIST_ID': 'A_6'}, {'LIST_NM': 'Population Statistics Based on Resident Registration', 'VW_CD': 'MT_ETITLE', 'LIST_ID': 'A_7'}, {'LIST_NM': 'Statistics on Foreign Residents by the Local Governments', 'VW_CD': 'MT_ETITLE', 'LIST_ID': 'A_8'}, {'LIST_NM': 'Statistics of Arrivals and Departures', 'VW_CD': 'MT_ETITLE', 'LIST_ID': 'A_9'}]\n"
     ]
    }
   ],
   "source": [
    "# 05.01.01\n",
    "# open json\n",
    "# dt13\n",
    "\n",
    "dt13 = requests.get('https://kosis.kr/openapi/statisticsList.do?method=' +\n",
    "                    'getList&apiKey=MzA4MTgyY2I2Y2VhMDc1ODI5OTU0M2UxYzQyMTAxNjA=' +\n",
    "                    '&vwCd=MT_ETITLE&parentListId=A&format=json&jsonVD=Y')\n",
    "print(dt13.json())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "f9c57026-06d9-471b-ab71-9726cd83bab3",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  By variant  ...         2072\n",
      "0     Medium  ...  36222293.00\n",
      "1     Medium  ...  18209029.00\n",
      "2     Medium  ...  18013264.00\n",
      "3     Medium  ...       101.10\n",
      "4     Medium  ...        -1.31\n",
      "\n",
      "[5 rows x 53 columns]\n"
     ]
    }
   ],
   "source": [
    "# 05.01.02\n",
    "# import dataset\n",
    "# adding future projections data for population to compare past trends\n",
    "# return head\n",
    "# dt14\n",
    "\n",
    "dt14 = pd.read_csv('Population_Projections_and_Summary_indicators_Korea__20240226152130.csv')\n",
    "print(dt14.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "69f454fd-43fd-492a-95cf-70a603cba259",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   index     name gugun dong  ...  avg_sales  area  floor  pricePerArea\n",
      "0      0   수락산벨리체   노원구  상계동  ...   101000.0   139     42    697.841727\n",
      "1      1    수락파크빌   노원구  상계동  ...    89000.0   105     32    790.476191\n",
      "2      2  비콘드림힐2차   노원구  상계동  ...    71500.0    86     26    720.930233\n",
      "3      3     수락현대   노원구  상계동  ...    65500.0   102     31    637.254902\n",
      "4      4    대망드림힐   노원구  상계동  ...    70000.0    91     28    692.307692\n",
      "\n",
      "[5 rows x 11 columns]\n"
     ]
    }
   ],
   "source": [
    "# 05.01.03\n",
    "# import dataset\n",
    "# adding real estate data to explore possible correlations with population\n",
    "# return head\n",
    "# dt15\n",
    "\n",
    "dt15 = pd.read_csv('seoulapartment - Thu Apr  1 00_00_05 2021.csv')\n",
    "print(dt15.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "id": "26ca659d-dffb-49b1-9c73-eb83e855b3fa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 05.02.01\n",
    "# assign variables for dt01\n",
    "# date, birth rate, marriage rate, natural growth rate\n",
    "# the selected metrics were chosen due to their consistencies with outliers and relevance of data\n",
    "# dt01_\n",
    "\n",
    "dt01_01 = dt01['date']\n",
    "dt01_02 = dt01['rate_birth']\n",
    "dt01_03 = dt01['rate_marriage']\n",
    "dt01_04 = dt01['rate_growth_natural']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "ec969f33-164a-4881-af49-df68e6712977",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.02.02\n",
    "# assign variables for dt02\n",
    "# year, income, education level\n",
    "# the selected metrics were chosen due to their consistencies with outliers and relevance of data\n",
    "# dt02_\n",
    "\n",
    "dt02_01 = dt02['year']\n",
    "dt02_02 = dt02['income']\n",
    "dt02_03 = dt02['education_level']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "f38abb0b-6d37-48f6-b050-0acd937d8b33",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.03.01\n",
    "# add index column\n",
    "# index column to select specific rows \n",
    "# assign variable to row 'whole country' for entire population\n",
    "# dt03\n",
    "\n",
    "dt03.insert(0, 'index', range(0, 0 + len(dt03)))\n",
    "dt03_idx = dt03.loc[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "28224a2f-3073-4ef6-9789-9e319c822c34",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.03.02\n",
    "# change column names for dt03\n",
    "# this step makes data earier to navigate\n",
    "# removing decimal from column names to make easier to select string\n",
    "# add variable 0 for total\n",
    "# 2022 population\n",
    "# dt03_\n",
    "\n",
    "dt03_idx.rename({\"2022_ttl\": \"2022_00\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.1\": \"2022_01\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.2\": \"2022_02\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.3\": \"2022_03\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.4\": \"2022_04\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.5\": \"2022_05\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.6\": \"2022_06\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.7\": \"2022_07\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.8\": \"2022_08\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.9\": \"2022_09\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.10\": \"2022_10\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.11\": \"2022_11\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.12\": \"2022_12\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.13\": \"2022_13\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.14\": \"2022_14\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.15\": \"2022_15\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.16\": \"2022_16\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.17\": \"2022_17\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.18\": \"2022_18\"}, inplace=True)\n",
    "dt03_idx.rename({\"2022.19\": \"2022_19\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "id": "2650b417-cb2d-4617-8f5c-2c39af46428f",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.03.03\n",
    "# assign variables for dt03\n",
    "# add variable 0 for total\n",
    "# new variable for each column in dataset\n",
    "# 2022 population\n",
    "# dt03_\n",
    "\n",
    "dt03_00 = dt03_idx['2022_00']\n",
    "dt03_01 = dt03_idx['2022_01']\n",
    "dt03_02 = dt03_idx['2022_02']\n",
    "dt03_03 = dt03_idx['2022_03']\n",
    "dt03_04 = dt03_idx['2022_04']\n",
    "dt03_05 = dt03_idx['2022_05']\n",
    "dt03_06 = dt03_idx['2022_06']\n",
    "dt03_07 = dt03_idx['2022_07']\n",
    "dt03_08 = dt03_idx['2022_08']\n",
    "dt03_09 = dt03_idx['2022_09']\n",
    "dt03_10 = dt03_idx['2022_10']\n",
    "dt03_11 = dt03_idx['2022_11']\n",
    "dt03_12 = dt03_idx['2022_12']\n",
    "dt03_13 = dt03_idx['2022_13']\n",
    "dt03_14 = dt03_idx['2022_14']\n",
    "dt03_15 = dt03_idx['2022_15']\n",
    "dt03_16 = dt03_idx['2022_16']\n",
    "dt03_17 = dt03_idx['2022_17']\n",
    "dt03_18 = dt03_idx['2022_18']\n",
    "dt03_19 = dt03_idx['2022_19']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "id": "2787be77-07ce-4e65-9ad2-4c313b75dbf2",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.04.01\n",
    "# add index column\n",
    "# index column to select specific rows \n",
    "# assign variable to row 'whole country' for entire population\n",
    "# dt04\n",
    "\n",
    "dt04.insert(0, 'index', range(0, 0 + len(dt04)))\n",
    "dt04_idx = dt04.loc[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "fbf8ed50-5603-42c7-bc22-2d02ec4e047c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.04.02\n",
    "# change column names for dt04\n",
    "# this step makes data earier to navigate\n",
    "# removing decimal from column names to make easier to select string\n",
    "# add variable 0 for total\n",
    "# 2010 population\n",
    "# dt04_\n",
    "\n",
    "dt04_idx.rename({\"2010_ttl\": \"2010_00\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.1\": \"2010_01\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.2\": \"2010_02\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.3\": \"2010_03\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.4\": \"2010_04\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.5\": \"2010_05\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.6\": \"2010_06\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.7\": \"2010_07\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.8\": \"2010_08\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.9\": \"2010_09\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.10\": \"2010_10\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.11\": \"2010_11\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.12\": \"2010_12\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.13\": \"2010_13\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.14\": \"2010_14\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.15\": \"2010_15\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.16\": \"2010_16\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.17\": \"2010_17\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.18\": \"2010_18\"}, inplace=True)\n",
    "dt04_idx.rename({\"2010.19\": \"2010_19\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "576bb0db-23f8-4c47-99f9-9118500cefcd",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.04.03\n",
    "# assign variables for dt04\n",
    "# add variable 0 for total\n",
    "# new variable for each column in dataset\n",
    "# 2010 population\n",
    "# dt04_\n",
    "\n",
    "dt04_00 = dt04_idx['2010_00']\n",
    "dt04_01 = dt04_idx['2010_01']\n",
    "dt04_02 = dt04_idx['2010_02']\n",
    "dt04_03 = dt04_idx['2010_03']\n",
    "dt04_04 = dt04_idx['2010_04']\n",
    "dt04_05 = dt04_idx['2010_05']\n",
    "dt04_06 = dt04_idx['2010_06']\n",
    "dt04_07 = dt04_idx['2010_07']\n",
    "dt04_08 = dt04_idx['2010_08']\n",
    "dt04_09 = dt04_idx['2010_09']\n",
    "dt04_10 = dt04_idx['2010_10']\n",
    "dt04_11 = dt04_idx['2010_11']\n",
    "dt04_12 = dt04_idx['2010_12']\n",
    "dt04_13 = dt04_idx['2010_13']\n",
    "dt04_14 = dt04_idx['2010_14']\n",
    "dt04_15 = dt04_idx['2010_15']\n",
    "dt04_16 = dt04_idx['2010_16']\n",
    "dt04_17 = dt04_idx['2010_17']\n",
    "dt04_18 = dt04_idx['2010_18']\n",
    "dt04_19 = dt04_idx['2010_19']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "08e8c61e-7b16-4766-b008-db18d53d4864",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.05.01\n",
    "# add index column\n",
    "# index column to select specific rows \n",
    "# assign variable to row 'whole country' for entire population\n",
    "# dt05\n",
    "\n",
    "dt05.insert(0, 'index', range(0, 0 + len(dt05)))\n",
    "dt05_idx = dt05.loc[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "78317846-49fc-426c-90aa-e39b77f68bb4",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.05.02\n",
    "# change column names for dt05\n",
    "# this step makes data earier to navigate\n",
    "# removing decimal from column names to make easier to select string\n",
    "# add variable 0 for total\n",
    "# 2005 population\n",
    "# dt05_\n",
    "\n",
    "dt05_idx.rename({\"2005_ttl\": \"2005_00\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.1\": \"2005_01\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.2\": \"2005_02\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.3\": \"2005_03\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.4\": \"2005_04\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.5\": \"2005_05\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.6\": \"2005_06\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.7\": \"2005_07\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.8\": \"2005_08\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.9\": \"2005_09\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.10\": \"2005_10\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.11\": \"2005_11\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.12\": \"2005_12\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.13\": \"2005_13\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.14\": \"2005_14\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.15\": \"2005_15\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.16\": \"2005_16\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.17\": \"2005_17\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.18\": \"2005_18\"}, inplace=True)\n",
    "dt05_idx.rename({\"2005.19\": \"2005_19\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "3ad811e1-19b6-47f2-8b0d-1760e0b94408",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.05.03\n",
    "# assign variables for dt05\n",
    "# add variable 0 for total\n",
    "# new variable for each column in dataset\n",
    "# 2005 population\n",
    "# dt05_\n",
    "\n",
    "dt05_00 = dt05_idx['2005_00']\n",
    "dt05_01 = dt05_idx['2005_01']\n",
    "dt05_02 = dt05_idx['2005_02']\n",
    "dt05_03 = dt05_idx['2005_03']\n",
    "dt05_04 = dt05_idx['2005_04']\n",
    "dt05_05 = dt05_idx['2005_05']\n",
    "dt05_06 = dt05_idx['2005_06']\n",
    "dt05_07 = dt05_idx['2005_07']\n",
    "dt05_08 = dt05_idx['2005_08']\n",
    "dt05_09 = dt05_idx['2005_09']\n",
    "dt05_10 = dt05_idx['2005_10']\n",
    "dt05_11 = dt05_idx['2005_11']\n",
    "dt05_12 = dt05_idx['2005_12']\n",
    "dt05_13 = dt05_idx['2005_13']\n",
    "dt05_14 = dt05_idx['2005_14']\n",
    "dt05_15 = dt05_idx['2005_15']\n",
    "dt05_16 = dt05_idx['2005_16']\n",
    "dt05_17 = dt05_idx['2005_17']\n",
    "dt05_18 = dt05_idx['2005_18']\n",
    "dt05_19 = dt05_idx['2005_19']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "81d53007-f0e2-4c7a-8902-e8ae01c411b0",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.06.01\n",
    "# add index column\n",
    "# index column to select specific rows \n",
    "# assign variable to row 'whole country' for entire population\n",
    "# dt06\n",
    "\n",
    "dt06.insert(0, 'index', range(0, 0 + len(dt06)))\n",
    "dt06_idx = dt06.loc[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "4ecc5c31-37cf-424a-a92e-4b82cc97e825",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.06.02\n",
    "# change column names for dt06\n",
    "# this step makes data earier to navigate\n",
    "# removing decimal from column names to make easier to select string\n",
    "# add variable 0 for total\n",
    "# 2000 population\n",
    "# dt06_\n",
    "\n",
    "dt06_idx.rename({\"2000_ttl\": \"2000_00\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.1\": \"2000_01\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.2\": \"2000_02\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.3\": \"2000_03\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.4\": \"2000_04\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.5\": \"2000_05\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.6\": \"2000_06\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.7\": \"2000_07\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.8\": \"2000_08\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.9\": \"2000_09\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.10\": \"2000_10\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.11\": \"2000_11\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.12\": \"2000_12\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.13\": \"2000_13\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.14\": \"2000_14\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.15\": \"2000_15\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.16\": \"2000_16\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.17\": \"2000_17\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.18\": \"2000_18\"}, inplace=True)\n",
    "dt06_idx.rename({\"2000.19\": \"2000_19\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "2bb002d8-d771-4a7e-8755-82eea28fc59e",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.06.03\n",
    "# assign variables for dt06\n",
    "# add variable 0 for total\n",
    "# new variable for each column in dataset\n",
    "# 2000 population\n",
    "# dt06_\n",
    "\n",
    "dt06_00 = dt06_idx['2000_00']\n",
    "dt06_01 = dt06_idx['2000_01']\n",
    "dt06_02 = dt06_idx['2000_02']\n",
    "dt06_03 = dt06_idx['2000_03']\n",
    "dt06_04 = dt06_idx['2000_04']\n",
    "dt06_05 = dt06_idx['2000_05']\n",
    "dt06_06 = dt06_idx['2000_06']\n",
    "dt06_07 = dt06_idx['2000_07']\n",
    "dt06_08 = dt06_idx['2000_08']\n",
    "dt06_09 = dt06_idx['2000_09']\n",
    "dt06_10 = dt06_idx['2000_10']\n",
    "dt06_11 = dt06_idx['2000_11']\n",
    "dt06_12 = dt06_idx['2000_12']\n",
    "dt06_13 = dt06_idx['2000_13']\n",
    "dt06_14 = dt06_idx['2000_14']\n",
    "dt06_15 = dt06_idx['2000_15']\n",
    "dt06_16 = dt06_idx['2000_16']\n",
    "dt06_17 = dt06_idx['2000_17']\n",
    "dt06_18 = dt06_idx['2000_18']\n",
    "dt06_19 = dt06_idx['2000_19']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "8c8385c2-550b-43cb-afc3-1a71710b1fa7",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.07.01\n",
    "# add index column\n",
    "# index column to select specific rows \n",
    "# assign variable to row 'whole country' for entire population\n",
    "# dt07\n",
    "\n",
    "dt07.insert(0, 'index', range(0, 0 + len(dt07)))\n",
    "dt07_idx = dt07.loc[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "c1c21c90-92fc-42e0-9be1-e5565f42b5a5",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.07.02\n",
    "# change column names for dt06\n",
    "# this step makes data earier to navigate\n",
    "# removing decimal from column names to make easier to select string\n",
    "# add variable 0 for total\n",
    "# 1995 population\n",
    "# dt07_\n",
    "\n",
    "dt07_idx.rename({\"1995_ttl\": \"1995_00\"}, inplace=True)\n",
    "dt07_idx.rename({\"1995.1\": \"1995_01\"}, inplace=True)\n",
    "dt07_idx.rename({\"1995.2\": \"1995_02\"}, inplace=True)\n",
    "dt07_idx.rename({\"1995.3\": \"1995_03\"}, inplace=True)\n",
    "dt07_idx.rename({\"1995.4\": \"1995_04\"}, inplace=True)\n",
    "dt07_idx.rename({\"1995.5\": \"1995_05\"}, inplace=True)\n",
    "dt07_idx.rename({\"1995.6\": \"1995_06\"}, inplace=True)\n",
    "dt07_idx.rename({\"1995.7\": \"1995_07\"}, inplace=True)\n",
    "dt07_idx.rename({\"1995.8\": \"1995_08\"}, inplace=True)\n",
    "dt07_idx.rename({\"1995.9\": \"1995_09\"}, inplace=True)\n",
    "dt07_idx.rename({\"1995.10\": \"1995_10\"}, inplace=True)\n",
    "dt07_idx.rename({\"1995.11\": \"1995_11\"}, inplace=True)\n",
    "dt07_idx.rename({\"1995.12\": \"1995_12\"}, inplace=True)\n",
    "dt07_idx.rename({\"1995.13\": \"1995_13\"}, inplace=True)\n",
    "dt07_idx.rename({\"1995.14\": \"1995_14\"}, inplace=True)\n",
    "dt07_idx.rename({\"1995.15\": \"1995_15\"}, inplace=True)\n",
    "dt07_idx.rename({\"1995.16\": \"1995_16\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "6c074a3b-c809-4eb2-b876-687df80da824",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.07.03\n",
    "# assign variables for dt07\n",
    "# add variable 0 for total\n",
    "# new variable for each column in dataset\n",
    "# 1995 population\n",
    "# dt07_\n",
    "\n",
    "dt07_00 = dt07_idx['1995_00']\n",
    "dt07_01 = dt07_idx['1995_01']\n",
    "dt07_02 = dt07_idx['1995_02']\n",
    "dt07_03 = dt07_idx['1995_03']\n",
    "dt07_04 = dt07_idx['1995_04']\n",
    "dt07_05 = dt07_idx['1995_05']\n",
    "dt07_06 = dt07_idx['1995_06']\n",
    "dt07_07 = dt07_idx['1995_07']\n",
    "dt07_08 = dt07_idx['1995_08']\n",
    "dt07_09 = dt07_idx['1995_09']\n",
    "dt07_10 = dt07_idx['1995_10']\n",
    "dt07_11 = dt07_idx['1995_11']\n",
    "dt07_12 = dt07_idx['1995_12']\n",
    "dt07_13 = dt07_idx['1995_13']\n",
    "dt07_14 = dt07_idx['1995_14']\n",
    "dt07_15 = dt07_idx['1995_15']\n",
    "dt07_16 = dt07_idx['1995_16']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "539a921b-4dae-403e-8538-a13f5dca23ef",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.08.01\n",
    "# add index column\n",
    "# index column to select specific rows \n",
    "# assign variable to row 'whole country' for entire population\n",
    "# dt08\n",
    "\n",
    "dt08.insert(0, 'index', range(0, 0 + len(dt08)))\n",
    "dt08_idx = dt08.loc[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "7c5c0d75-a447-4040-afbf-fed44c1e70ae",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.08.02\n",
    "# change column names for dt08\n",
    "# this step makes data earier to navigate\n",
    "# removing decimal from column names to make easier to select string\n",
    "# add variable 0 for total\n",
    "# 1990 population\n",
    "# dt08_\n",
    "\n",
    "dt08_idx.rename({\"1990_ttl\": \"1990_00\"}, inplace=True)\n",
    "dt08_idx.rename({\"1990.1\": \"1990_01\"}, inplace=True)\n",
    "dt08_idx.rename({\"1990.2\": \"1990_02\"}, inplace=True)\n",
    "dt08_idx.rename({\"1990.3\": \"1990_03\"}, inplace=True)\n",
    "dt08_idx.rename({\"1990.4\": \"1990_04\"}, inplace=True)\n",
    "dt08_idx.rename({\"1990.5\": \"1990_05\"}, inplace=True)\n",
    "dt08_idx.rename({\"1990.6\": \"1990_06\"}, inplace=True)\n",
    "dt08_idx.rename({\"1990.7\": \"1990_07\"}, inplace=True)\n",
    "dt08_idx.rename({\"1990.8\": \"1990_08\"}, inplace=True)\n",
    "dt08_idx.rename({\"1990.9\": \"1990_09\"}, inplace=True)\n",
    "dt08_idx.rename({\"1990.10\": \"1990_10\"}, inplace=True)\n",
    "dt08_idx.rename({\"1990.11\": \"1990_11\"}, inplace=True)\n",
    "dt08_idx.rename({\"1990.12\": \"1990_12\"}, inplace=True)\n",
    "dt08_idx.rename({\"1990.13\": \"1990_13\"}, inplace=True)\n",
    "dt08_idx.rename({\"1990.14\": \"1990_14\"}, inplace=True)\n",
    "dt08_idx.rename({\"1990.15\": \"1990_15\"}, inplace=True)\n",
    "dt08_idx.rename({\"1990.16\": \"1990_16\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "b80a87ca-53a5-43cc-abb5-0a7808d83907",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.08.03\n",
    "# assign variables for dt08\n",
    "# add variable 0 for total\n",
    "# new variable for each column in dataset\n",
    "# 1990 population\n",
    "# dt08_\n",
    "\n",
    "dt08_00 = dt08_idx['1990_00']\n",
    "dt08_01 = dt08_idx['1990_01']\n",
    "dt08_02 = dt08_idx['1990_02']\n",
    "dt08_03 = dt08_idx['1990_03']\n",
    "dt08_04 = dt08_idx['1990_04']\n",
    "dt08_05 = dt08_idx['1990_05']\n",
    "dt08_06 = dt08_idx['1990_06']\n",
    "dt08_07 = dt08_idx['1990_07']\n",
    "dt08_08 = dt08_idx['1990_08']\n",
    "dt08_09 = dt08_idx['1990_09']\n",
    "dt08_10 = dt08_idx['1990_10']\n",
    "dt08_11 = dt08_idx['1990_11']\n",
    "dt08_12 = dt08_idx['1990_12']\n",
    "dt08_13 = dt08_idx['1990_13']\n",
    "dt08_14 = dt08_idx['1990_14']\n",
    "dt08_15 = dt08_idx['1990_15']\n",
    "dt08_16 = dt08_idx['1990_16']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "c5a60932-012b-4041-bad0-a701d405805c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.09.01\n",
    "# add index column\n",
    "# index column to select specific rows \n",
    "# assign variable to row 'whole country' for entire population\n",
    "# dt09\n",
    "\n",
    "dt09.insert(0, 'index', range(0, 0 + len(dt09)))\n",
    "dt09_idx = dt09.loc[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "id": "0a14952b-3c7b-4d2f-a8bf-725948332b65",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.09.02\n",
    "# change column names for dt09\n",
    "# this step makes data earier to navigate\n",
    "# removing decimal from column names to make easier to select string\n",
    "# add variable 0 for total\n",
    "# 1985 population\n",
    "# dt09_\n",
    "\n",
    "dt09_idx.rename({\"1985_ttl\": \"1985_00\"}, inplace=True)\n",
    "dt09_idx.rename({\"1985.1\": \"1985_01\"}, inplace=True)\n",
    "dt09_idx.rename({\"1985.2\": \"1985_02\"}, inplace=True)\n",
    "dt09_idx.rename({\"1985.3\": \"1985_03\"}, inplace=True)\n",
    "dt09_idx.rename({\"1985.4\": \"1985_04\"}, inplace=True)\n",
    "dt09_idx.rename({\"1985.5\": \"1985_05\"}, inplace=True)\n",
    "dt09_idx.rename({\"1985.6\": \"1985_06\"}, inplace=True)\n",
    "dt09_idx.rename({\"1985.7\": \"1985_07\"}, inplace=True)\n",
    "dt09_idx.rename({\"1985.8\": \"1985_08\"}, inplace=True)\n",
    "dt09_idx.rename({\"1985.9\": \"1985_09\"}, inplace=True)\n",
    "dt09_idx.rename({\"1985.10\": \"1985_10\"}, inplace=True)\n",
    "dt09_idx.rename({\"1985.11\": \"1985_11\"}, inplace=True)\n",
    "dt09_idx.rename({\"1985.12\": \"1985_12\"}, inplace=True)\n",
    "dt09_idx.rename({\"1985.13\": \"1985_13\"}, inplace=True)\n",
    "dt09_idx.rename({\"1985.14\": \"1985_14\"}, inplace=True)\n",
    "dt09_idx.rename({\"1985.15\": \"1985_15\"}, inplace=True)\n",
    "dt09_idx.rename({\"1985.16\": \"1985_16\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "id": "cfdc7879-551d-486c-8ebf-4401f7b1bbd8",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.09.03\n",
    "# assign variables for dt09\n",
    "# add variable 0 for total\n",
    "# new variable for each column in dataset\n",
    "# 1985 population\n",
    "# dt09_\n",
    "\n",
    "dt09_00 = dt09_idx['1985_00']\n",
    "dt09_01 = dt09_idx['1985_01']\n",
    "dt09_02 = dt09_idx['1985_02']\n",
    "dt09_03 = dt09_idx['1985_03']\n",
    "dt09_04 = dt09_idx['1985_04']\n",
    "dt09_05 = dt09_idx['1985_05']\n",
    "dt09_06 = dt09_idx['1985_06']\n",
    "dt09_07 = dt09_idx['1985_07']\n",
    "dt09_08 = dt09_idx['1985_08']\n",
    "dt09_09 = dt09_idx['1985_09']\n",
    "dt09_10 = dt09_idx['1985_10']\n",
    "dt09_11 = dt09_idx['1985_11']\n",
    "dt09_12 = dt09_idx['1985_12']\n",
    "dt09_13 = dt09_idx['1985_13']\n",
    "dt09_14 = dt09_idx['1985_14']\n",
    "dt09_15 = dt09_idx['1985_15']\n",
    "dt09_16 = dt09_idx['1985_16']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "id": "2e0ced13-f876-4b10-bfca-b72b6eec2645",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.10.01\n",
    "# add index column\n",
    "# index column to select specific rows \n",
    "# assign variable to row 'whole country' for entire population\n",
    "# dt10\n",
    "\n",
    "dt10.insert(0, 'index', range(0, 0 + len(dt10)))\n",
    "dt10_idx = dt10.loc[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "id": "a78b617a-ad5f-4dba-99e1-08e45d756c69",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.10.02\n",
    "# change column names for dt10\n",
    "# this step makes data earier to navigate\n",
    "# removing decimal from column names to make easier to select string\n",
    "# add variable 0 for total\n",
    "# 1980 population\n",
    "# dt10_\n",
    "\n",
    "dt10_idx.rename({\"1980_ttl\": \"1980_00\"}, inplace=True)\n",
    "dt10_idx.rename({\"1980.1\": \"1980_01\"}, inplace=True)\n",
    "dt10_idx.rename({\"1980.2\": \"1980_02\"}, inplace=True)\n",
    "dt10_idx.rename({\"1980.3\": \"1980_03\"}, inplace=True)\n",
    "dt10_idx.rename({\"1980.4\": \"1980_04\"}, inplace=True)\n",
    "dt10_idx.rename({\"1980.5\": \"1980_05\"}, inplace=True)\n",
    "dt10_idx.rename({\"1980.6\": \"1980_06\"}, inplace=True)\n",
    "dt10_idx.rename({\"1980.7\": \"1980_07\"}, inplace=True)\n",
    "dt10_idx.rename({\"1980.8\": \"1980_08\"}, inplace=True)\n",
    "dt10_idx.rename({\"1980.9\": \"1980_09\"}, inplace=True)\n",
    "dt10_idx.rename({\"1980.10\": \"1980_10\"}, inplace=True)\n",
    "dt10_idx.rename({\"1980.11\": \"1980_11\"}, inplace=True)\n",
    "dt10_idx.rename({\"1980.12\": \"1980_12\"}, inplace=True)\n",
    "dt10_idx.rename({\"1980.13\": \"1980_13\"}, inplace=True)\n",
    "dt10_idx.rename({\"1980.14\": \"1980_14\"}, inplace=True)\n",
    "dt10_idx.rename({\"1980.15\": \"1980_15\"}, inplace=True)\n",
    "dt10_idx.rename({\"1980.16\": \"1980_16\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "id": "007fb082-e659-42de-ae61-9121d4e37635",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.10.03\n",
    "# assign variables for dt10\n",
    "# add variable 0 for total\n",
    "# new variable for each column in dataset\n",
    "# 1980 population\n",
    "# dt10_\n",
    "\n",
    "dt10_00 = dt10_idx['1980_00']\n",
    "dt10_01 = dt10_idx['1980_01']\n",
    "dt10_02 = dt10_idx['1980_02']\n",
    "dt10_03 = dt10_idx['1980_03']\n",
    "dt10_04 = dt10_idx['1980_04']\n",
    "dt10_05 = dt10_idx['1980_05']\n",
    "dt10_06 = dt10_idx['1980_06']\n",
    "dt10_07 = dt10_idx['1980_07']\n",
    "dt10_08 = dt10_idx['1980_08']\n",
    "dt10_09 = dt10_idx['1980_09']\n",
    "dt10_10 = dt10_idx['1980_10']\n",
    "dt10_11 = dt10_idx['1980_11']\n",
    "dt10_12 = dt10_idx['1980_12']\n",
    "dt10_13 = dt10_idx['1980_13']\n",
    "dt10_14 = dt10_idx['1980_14']\n",
    "dt10_15 = dt10_idx['1980_15']\n",
    "dt10_16 = dt10_idx['1980_16']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "id": "3b30bd11-6497-4893-88fb-6a853b8b4ad7",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.11.01\n",
    "# add index column\n",
    "# index column to select specific rows \n",
    "# assign variable to row 'whole country' for entire population\n",
    "# dt11\n",
    "\n",
    "dt11.insert(0, 'index', range(0, 0 + len(dt11)))\n",
    "dt11_idx = dt11.loc[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "id": "6815cc7e-4693-4abe-b939-37d593208342",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.11.02\n",
    "# change column names for dt11\n",
    "# this step makes data earier to navigate\n",
    "# removing decimal from column names to make easier to select string\n",
    "# add variable 0 for total\n",
    "# 1975 population\n",
    "# dt11_\n",
    "\n",
    "dt11_idx.rename({\"1975_ttl\": \"1975_00\"}, inplace=True)\n",
    "dt11_idx.rename({\"1975.1\": \"1975_01\"}, inplace=True)\n",
    "dt11_idx.rename({\"1975.2\": \"1975_02\"}, inplace=True)\n",
    "dt11_idx.rename({\"1975.3\": \"1975_03\"}, inplace=True)\n",
    "dt11_idx.rename({\"1975.4\": \"1975_04\"}, inplace=True)\n",
    "dt11_idx.rename({\"1975.5\": \"1975_05\"}, inplace=True)\n",
    "dt11_idx.rename({\"1975.6\": \"1975_06\"}, inplace=True)\n",
    "dt11_idx.rename({\"1975.7\": \"1975_07\"}, inplace=True)\n",
    "dt11_idx.rename({\"1975.8\": \"1975_08\"}, inplace=True)\n",
    "dt11_idx.rename({\"1975.9\": \"1975_09\"}, inplace=True)\n",
    "dt11_idx.rename({\"1975.10\": \"1975_10\"}, inplace=True)\n",
    "dt11_idx.rename({\"1975.11\": \"1975_11\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 184,
   "id": "ada95a45-544c-47f0-ad27-0d6db19dc3ca",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.11.03\n",
    "# assign variables for dt11\n",
    "# add variable 0 for total\n",
    "# new variable for each column in dataset\n",
    "# 1975 population\n",
    "# dt11_\n",
    "\n",
    "dt11_00 = dt11_idx['1975_00']\n",
    "dt11_01 = dt11_idx['1975_01']\n",
    "dt11_02 = dt11_idx['1975_02']\n",
    "dt11_03 = dt11_idx['1975_03']\n",
    "dt11_04 = dt11_idx['1975_04']\n",
    "dt11_05 = dt11_idx['1975_05']\n",
    "dt11_06 = dt11_idx['1975_06']\n",
    "dt11_07 = dt11_idx['1975_07']\n",
    "dt11_08 = dt11_idx['1975_08']\n",
    "dt11_09 = dt11_idx['1975_09']\n",
    "dt11_10 = dt11_idx['1975_10']\n",
    "dt11_11 = dt11_idx['1975_11']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 185,
   "id": "0aceb239-c31b-4962-93df-2ef149b32076",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.12.01\n",
    "# add index column\n",
    "# index column to select specific rows \n",
    "# assign variable to row 'whole country' for entire population\n",
    "# dt12\n",
    "\n",
    "dt12.insert(0, 'index', range(0, 0 + len(dt12)))\n",
    "dt12_idx = dt12.loc[1]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 186,
   "id": "2a3aa533-7765-4256-8c67-88fca22cb5f3",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.12.02\n",
    "# change column names for dt12\n",
    "# this step makes data earier to navigate\n",
    "# removing decimal from column names to make easier to select string\n",
    "# add variable 0 for total\n",
    "# 1970 population\n",
    "# dt12_\n",
    "\n",
    "dt12_idx.rename({\"1970_ttl\": \"1970_00\"}, inplace=True)\n",
    "dt12_idx.rename({\"1970.1\": \"1970_01\"}, inplace=True)\n",
    "dt12_idx.rename({\"1970.2\": \"1970_02\"}, inplace=True)\n",
    "dt12_idx.rename({\"1970.3\": \"1970_03\"}, inplace=True)\n",
    "dt12_idx.rename({\"1970.4\": \"1970_04\"}, inplace=True)\n",
    "dt12_idx.rename({\"1970.5\": \"1970_05\"}, inplace=True)\n",
    "dt12_idx.rename({\"1970.6\": \"1970_06\"}, inplace=True)\n",
    "dt12_idx.rename({\"1970.7\": \"1970_07\"}, inplace=True)\n",
    "dt12_idx.rename({\"1970.8\": \"1970_08\"}, inplace=True)\n",
    "dt12_idx.rename({\"1970.9\": \"1970_09\"}, inplace=True)\n",
    "dt12_idx.rename({\"1970.10\": \"1970_10\"}, inplace=True)\n",
    "dt12_idx.rename({\"1970.11\": \"1970_11\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 187,
   "id": "34d46395-8603-48d2-b2e4-722fa2f9205f",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.12.03\n",
    "# assign variables for dt12\n",
    "# add variable 0 for total\n",
    "# new variable for each column in dataset\n",
    "# 1970 population\n",
    "# dt12_\n",
    "\n",
    "dt12_00 = dt12_idx['1970_00']\n",
    "dt12_01 = dt12_idx['1970_01']\n",
    "dt12_02 = dt12_idx['1970_02']\n",
    "dt12_03 = dt12_idx['1970_03']\n",
    "dt12_04 = dt12_idx['1970_04']\n",
    "dt12_05 = dt12_idx['1970_05']\n",
    "dt12_06 = dt12_idx['1970_06']\n",
    "dt12_07 = dt12_idx['1970_07']\n",
    "dt12_08 = dt12_idx['1970_08']\n",
    "dt12_09 = dt12_idx['1970_09']\n",
    "dt12_10 = dt12_idx['1970_10']\n",
    "dt12_11 = dt12_idx['1970_11']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 188,
   "id": "edb8cc19-25f3-441a-bcd3-75e4ac70a36a",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.13.01\n",
    "# add index column\n",
    "# index column to select specific rows \n",
    "# assign variable to row 'whole country' for entire population\n",
    "# dt13\n",
    "\n",
    "# dt13.insert(0, 'index', range(0, 0 + len(dt13)))\n",
    "# dt13_idx = dt13.loc[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 189,
   "id": "476dbb9d-e1c3-421e-ae7a-7cb7eab4a022",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 05.13.02\n",
    "# change column names for dt13\n",
    "# this step makes data earier to navigate\n",
    "# add variable 0 for total\n",
    "# future population\n",
    "# dt13_\n",
    "\n",
    "# dt13_idx.rename({'index': \"dt13_00\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 190,
   "id": "d0c41827-8277-47a5-acb9-a651e452f01b",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.14.01\n",
    "# add index column\n",
    "# index column to select specific rows \n",
    "# assign variable to row 'whole country' for entire population\n",
    "# dt14\n",
    "\n",
    "dt14.insert(0, 'index', range(0, 0 + len(dt14)))\n",
    "dt14_idx = dt14.loc[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 191,
   "id": "0ca893d9-1948-4655-aece-2822721c24f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 05.14.02\n",
    "# change column names for dt14\n",
    "# this step makes data earier to navigate\n",
    "# add variable 0 for total\n",
    "# future population\n",
    "# dt14_\n",
    "\n",
    "dt14_idx.rename({'index': \"dt14_00\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 192,
   "id": "21e8bf4f-ba0e-49d2-9d3a-7dab6139f30f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 05.14.03\n",
    "# create indices for dt14\n",
    "# create list with two columns for visualizations\n",
    "# future population\n",
    "# dt14_\n",
    "\n",
    "dt14_dt = [\n",
    "        ['2022', 51672569.0],\n",
    "        ['2023', 51712619.0],\n",
    "        ['2024', 51751065.0],\n",
    "        ['2025', 51684564.0],\n",
    "        ['2026', 51609121.0],\n",
    "        ['2027', 51534551.0],\n",
    "        ['2028', 51459877.0],\n",
    "        ['2029', 51384052.0],\n",
    "        ['2030', 51305713.0],\n",
    "        ['2031', 51223269.0],\n",
    "        ['2032', 51135265.0],\n",
    "        ['2033', 51040632.0],\n",
    "        ['2034', 50937726.0],\n",
    "        ['2035', 50824868.0],\n",
    "        ['2036', 50701389.0],\n",
    "        ['2037', 50567057.0],\n",
    "        ['2038', 50417167.0],\n",
    "        ['2039', 50247657.0],\n",
    "        ['2040', 50059218.0],\n",
    "        ['2041', 49851637.0],\n",
    "        ['2042', 49625415.0],\n",
    "        ['2043', 49380766.0],\n",
    "        ['2044', 49117432.0],\n",
    "        ['2045', 48835031.0],\n",
    "        ['2046', 48532231.0],\n",
    "        ['2047', 48208374.0],\n",
    "        ['2048', 47863071.0],\n",
    "        ['2049', 47495914.0],\n",
    "        ['2050', 47106960.0],\n",
    "        ['2051', 46697391.0],\n",
    "        ['2052', 46267614.0],\n",
    "        ['2053', 45818111.0],\n",
    "        ['2054', 45350648.0],\n",
    "        ['2055', 44867534.0],\n",
    "        ['2056', 44371641.0],\n",
    "        ['2057', 43864958.0],\n",
    "        ['2058', 43349217.0],\n",
    "        ['2059', 42827316.0],\n",
    "        ['2060', 42302086.0],\n",
    "        ['2061', 41775305.0],\n",
    "        ['2062', 41248542.0],\n",
    "        ['2063', 40723791.0],\n",
    "        ['2064', 40202384.0],\n",
    "        ['2065', 39685210.0],\n",
    "        ['2066', 39172974.0],\n",
    "        ['2067', 38666431.0],\n",
    "        ['2068', 38165892.0],\n",
    "        ['2069', 37670942.0],\n",
    "        ['2070', 37181774.0],\n",
    "        ['2071', 36698961.0],\n",
    "        ['2072', 36222293.0]\n",
    "        ]\n",
    "dt14_00 = pd.DataFrame(dt14_dt, columns=['Year', 'Population'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 193,
   "id": "4d1121fe-607a-42b5-a6ad-1147b5b881ab",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 05.15.01\n",
    "# add index column\n",
    "# index column to select specific rows \n",
    "# assign variable to row 'whole country' for entire population\n",
    "# dt15\n",
    "\n",
    "dt15.insert(0, 'id', range(0, 0 + len(dt15)))\n",
    "dt15_idx = dt15.loc[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 194,
   "id": "959ac979-6e4e-44d6-9c36-26b7a684c1e5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 05.15.02\n",
    "# change column names for dt15\n",
    "# this step makes data earier to navigate\n",
    "# add variable 0 for total\n",
    "# future population\n",
    "# dt15_\n",
    "\n",
    "dt15_idx.rename({'id': \"dt15_00\"}, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 195,
   "id": "4bcb9a53-1b13-425e-89d8-979c23e5072b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 05.16.00\n",
    "# the following datasets have been selected to conduct further research\n",
    "# dt01 (date, birthrate, marriage rate, natural growth rate)\n",
    "# dt02 (year, income, education level)\n",
    "# dt03 - dt12 (total population)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 196,
   "id": "e010423e-06fa-4a25-b578-64929c867a45",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.16.01\n",
    "# convert strings to floats\n",
    "# this step makes all data quantifiable for calculations and visualizations\n",
    "# dt01_\n",
    "\n",
    "dt01_02_flt = dt01_02.astype(float)\n",
    "dt01_03_flt = dt01_03.astype(float)\n",
    "dt01_04_flt = dt01_04.astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "23313aaa-d902-4ef6-94e5-6b2ce51488df",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.16.02\n",
    "# convert strings to floats\n",
    "# this step makes all data quantifiable for calculations and visualizations\n",
    "# dt02_\n",
    "\n",
    "dt02_01_flt = dt02_01.astype(float)\n",
    "dt02_02_flt = dt02_02.astype(float)\n",
    "dt02_03_flt = dt02_03.astype(float)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 198,
   "id": "8f8dc0ee-581b-48cd-8c5e-154740cbede0",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.16.03\n",
    "# drop index 0\n",
    "# convert strings to floats\n",
    "# add variable 0 for total\n",
    "# this step makes all data quantifiable for calculations and visualizations\n",
    "# dt03_\n",
    "\n",
    "dt03_00_flt = float(dt03_00)\n",
    "dt03_01_flt = float(dt03_01)\n",
    "dt03_02_flt = float(dt03_02)\n",
    "dt03_03_flt = float(dt03_03)\n",
    "dt03_04_flt = float(dt03_04)\n",
    "dt03_05_flt = float(dt03_05)\n",
    "dt03_06_flt = float(dt03_06)\n",
    "dt03_07_flt = float(dt03_07)\n",
    "dt03_08_flt = float(dt03_08)\n",
    "dt03_09_flt = float(dt03_09)\n",
    "dt03_10_flt = float(dt03_10)\n",
    "dt03_11_flt = float(dt03_11)\n",
    "dt03_12_flt = float(dt03_12)\n",
    "dt03_13_flt = float(dt03_13)\n",
    "dt03_14_flt = float(dt03_14)\n",
    "dt03_15_flt = float(dt03_15)\n",
    "dt03_16_flt = float(dt03_16)\n",
    "dt03_17_flt = float(dt03_17)\n",
    "dt03_18_flt = float(dt03_18)\n",
    "dt03_19_flt = float(dt03_19)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 199,
   "id": "53e2b606-17e8-43df-ae27-6947d238b4fb",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.16.04\n",
    "# drop index 0\n",
    "# convert strings to floats\n",
    "# add variable 0 for total\n",
    "# this step makes all data quantifiable for calculations and visualizations\n",
    "# dt04_\n",
    "\n",
    "dt04_00_flt = float(dt04_00)\n",
    "dt04_01_flt = float(dt04_01)\n",
    "dt04_02_flt = float(dt04_02)\n",
    "dt04_03_flt = float(dt04_03)\n",
    "dt04_04_flt = float(dt04_04)\n",
    "dt04_05_flt = float(dt04_05)\n",
    "dt04_06_flt = float(dt04_06)\n",
    "dt04_07_flt = float(dt04_07)\n",
    "dt04_08_flt = float(dt04_08)\n",
    "dt04_09_flt = float(dt04_09)\n",
    "dt04_10_flt = float(dt04_10)\n",
    "dt04_11_flt = float(dt04_11)\n",
    "dt04_12_flt = float(dt04_12)\n",
    "dt04_13_flt = float(dt04_13)\n",
    "dt04_14_flt = float(dt04_14)\n",
    "dt04_15_flt = float(dt04_15)\n",
    "dt04_16_flt = float(dt04_16)\n",
    "dt04_17_flt = float(dt04_17)\n",
    "dt04_18_flt = float(dt04_18)\n",
    "dt04_19_flt = float(dt04_19)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 200,
   "id": "b46cd8e5-d7a3-4906-a821-3d570bcd95fc",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.16.05\n",
    "# drop index 0\n",
    "# convert strings to floats\n",
    "# add variable 0 for total\n",
    "# this step makes all data quantifiable for calculations and visualizations\n",
    "# dt05_\n",
    "\n",
    "dt05_00_flt = float(dt05_00)\n",
    "dt05_01_flt = float(dt05_01)\n",
    "dt05_02_flt = float(dt05_02)\n",
    "dt05_03_flt = float(dt05_03)\n",
    "dt05_04_flt = float(dt05_04)\n",
    "dt05_05_flt = float(dt05_05)\n",
    "dt05_06_flt = float(dt05_06)\n",
    "dt05_07_flt = float(dt05_07)\n",
    "dt05_08_flt = float(dt05_08)\n",
    "dt05_09_flt = float(dt05_09)\n",
    "dt05_10_flt = float(dt05_10)\n",
    "dt05_11_flt = float(dt05_11)\n",
    "dt05_12_flt = float(dt05_12)\n",
    "dt05_13_flt = float(dt05_13)\n",
    "dt05_14_flt = float(dt05_14)\n",
    "dt05_15_flt = float(dt05_15)\n",
    "dt05_16_flt = float(dt05_16)\n",
    "dt05_17_flt = float(dt05_17)\n",
    "dt05_18_flt = float(dt05_18)\n",
    "dt05_19_flt = float(dt05_19)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 201,
   "id": "f5a4f7d9-e648-4d53-9f08-5e91a9a480f8",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.16.06\n",
    "# drop index 0\n",
    "# convert strings to floats\n",
    "# add variable 0 for total\n",
    "# this step makes all data quantifiable for calculations and visualizations\n",
    "# dt06_\n",
    "\n",
    "dt06_00_flt = float(dt06_00)\n",
    "dt06_01_flt = float(dt06_01)\n",
    "dt06_02_flt = float(dt06_02)\n",
    "dt06_03_flt = float(dt06_03)\n",
    "dt06_04_flt = float(dt06_04)\n",
    "dt06_05_flt = float(dt06_05)\n",
    "dt06_06_flt = float(dt06_06)\n",
    "dt06_07_flt = float(dt06_07)\n",
    "dt06_08_flt = float(dt06_08)\n",
    "dt06_09_flt = float(dt06_09)\n",
    "dt06_10_flt = float(dt06_10)\n",
    "dt06_11_flt = float(dt06_11)\n",
    "dt06_12_flt = float(dt06_12)\n",
    "dt06_13_flt = float(dt06_13)\n",
    "dt06_14_flt = float(dt06_14)\n",
    "dt06_15_flt = float(dt06_15)\n",
    "dt06_16_flt = float(dt06_16)\n",
    "dt06_17_flt = float(dt06_17)\n",
    "dt06_18_flt = float(dt06_18)\n",
    "dt06_19_flt = float(dt06_19)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 202,
   "id": "afb4de8a-e41f-46df-b922-eca31ab327e9",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.16.07\n",
    "# drop index 0\n",
    "# convert strings to floats\n",
    "# add variable 0 for total\n",
    "# this step makes all data quantifiable for calculations and visualizations\n",
    "# dt07_\n",
    "\n",
    "dt07_00_flt = float(dt07_00)\n",
    "dt07_01_flt = float(dt07_01)\n",
    "dt07_02_flt = float(dt07_02)\n",
    "dt07_03_flt = float(dt07_03)\n",
    "dt07_04_flt = float(dt07_04)\n",
    "dt07_05_flt = float(dt07_05)\n",
    "dt07_06_flt = float(dt07_06)\n",
    "dt07_07_flt = float(dt07_07)\n",
    "dt07_08_flt = float(dt07_08)\n",
    "dt07_09_flt = float(dt07_09)\n",
    "dt07_10_flt = float(dt07_10)\n",
    "dt07_11_flt = float(dt07_11)\n",
    "dt07_12_flt = float(dt07_12)\n",
    "dt07_13_flt = float(dt07_13)\n",
    "dt07_14_flt = float(dt07_14)\n",
    "dt07_15_flt = float(dt07_15)\n",
    "dt07_16_flt = float(dt07_16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 203,
   "id": "b33adb96-fc8c-4a19-a776-8b5c549f5aff",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.16.08\n",
    "# drop index 0\n",
    "# convert strings to floats\n",
    "# add variable 0 for total\n",
    "# this step makes all data quantifiable for calculations and visualizations\n",
    "# dt08_\n",
    "\n",
    "dt08_00_flt = float(dt08_00)\n",
    "dt08_01_flt = float(dt08_01)\n",
    "dt08_02_flt = float(dt08_02)\n",
    "dt08_03_flt = float(dt08_03)\n",
    "dt08_04_flt = float(dt08_04)\n",
    "dt08_05_flt = float(dt08_05)\n",
    "dt08_06_flt = float(dt08_06)\n",
    "dt08_07_flt = float(dt08_07)\n",
    "dt08_08_flt = float(dt08_08)\n",
    "dt08_09_flt = float(dt08_09)\n",
    "dt08_10_flt = float(dt08_10)\n",
    "dt08_11_flt = float(dt08_11)\n",
    "dt08_12_flt = float(dt08_12)\n",
    "dt08_13_flt = float(dt08_13)\n",
    "dt08_14_flt = float(dt08_14)\n",
    "dt08_15_flt = float(dt08_15)\n",
    "dt08_16_flt = float(dt08_16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 204,
   "id": "1fd745fb-7f1d-445a-ada1-96a713be7cae",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.16.09\n",
    "# drop index 0\n",
    "# convert strings to floats\n",
    "# add variable 0 for total\n",
    "# this step makes all data quantifiable for calculations and visualizations\n",
    "# dt09_\n",
    "\n",
    "dt09_00_flt = float(dt09_00)\n",
    "dt09_01_flt = float(dt09_01)\n",
    "dt09_02_flt = float(dt09_02)\n",
    "dt09_03_flt = float(dt09_03)\n",
    "dt09_04_flt = float(dt09_04)\n",
    "dt09_05_flt = float(dt09_05)\n",
    "dt09_06_flt = float(dt09_06)\n",
    "dt09_07_flt = float(dt09_07)\n",
    "dt09_08_flt = float(dt09_08)\n",
    "dt09_09_flt = float(dt09_09)\n",
    "dt09_10_flt = float(dt09_10)\n",
    "dt09_11_flt = float(dt09_11)\n",
    "dt09_12_flt = float(dt09_12)\n",
    "dt09_13_flt = float(dt09_13)\n",
    "dt09_14_flt = float(dt09_14)\n",
    "dt09_15_flt = float(dt09_15)\n",
    "dt09_16_flt = float(dt09_16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 205,
   "id": "1f38c5d5-fb0b-4da6-985f-b67296d3463c",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.16.10\n",
    "# drop index 0\n",
    "# convert strings to floats\n",
    "# add variable 0 for total\n",
    "# this step makes all data quantifiable for calculations and visualizations\n",
    "# dt10_\n",
    "\n",
    "dt10_00_flt = float(dt10_00)\n",
    "dt10_01_flt = float(dt10_01)\n",
    "dt10_02_flt = float(dt10_02)\n",
    "dt10_03_flt = float(dt10_03)\n",
    "dt10_04_flt = float(dt10_04)\n",
    "dt10_05_flt = float(dt10_05)\n",
    "dt10_06_flt = float(dt10_06)\n",
    "dt10_07_flt = float(dt10_07)\n",
    "dt10_08_flt = float(dt10_08)\n",
    "dt10_09_flt = float(dt10_09)\n",
    "dt10_10_flt = float(dt10_10)\n",
    "dt10_11_flt = float(dt10_11)\n",
    "dt10_12_flt = float(dt10_12)\n",
    "dt10_13_flt = float(dt10_13)\n",
    "dt10_14_flt = float(dt10_14)\n",
    "dt10_15_flt = float(dt10_15)\n",
    "dt10_16_flt = float(dt10_16)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "8959df45-46e8-41b2-9ff2-1790f2b8d748",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.16.11\n",
    "# drop index 0\n",
    "# convert strings to floats\n",
    "# add variable 0 for total\n",
    "# this step makes all data quantifiable for calculations and visualizations\n",
    "# dt11_\n",
    "\n",
    "dt11_00_flt = float(dt11_00)\n",
    "dt11_01_flt = float(dt11_01)\n",
    "dt11_02_flt = float(dt11_02)\n",
    "dt11_03_flt = float(dt11_03)\n",
    "dt11_04_flt = float(dt11_04)\n",
    "dt11_05_flt = float(dt11_05)\n",
    "dt11_06_flt = float(dt11_06)\n",
    "dt11_07_flt = float(dt11_07)\n",
    "dt11_08_flt = float(dt11_08)\n",
    "dt11_09_flt = float(dt11_09)\n",
    "dt11_10_flt = float(dt11_10)\n",
    "dt11_11_flt = float(dt11_11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "d3d6abbb-c743-4a20-ae6d-92dde50feec3",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.16.12\n",
    "# drop index 0\n",
    "# convert strings to floats\n",
    "# add variable 0 for total\n",
    "# this step makes all data quantifiable for calculations and visualizations\n",
    "# dt12_\n",
    "\n",
    "dt12_00_flt = float(dt12_00)\n",
    "dt12_01_flt = float(dt12_01)\n",
    "dt12_02_flt = float(dt12_02)\n",
    "dt12_03_flt = float(dt12_03)\n",
    "dt12_04_flt = float(dt12_04)\n",
    "dt12_05_flt = float(dt12_05)\n",
    "dt12_06_flt = float(dt12_06)\n",
    "dt12_07_flt = float(dt12_07)\n",
    "dt12_08_flt = float(dt12_08)\n",
    "dt12_09_flt = float(dt12_09)\n",
    "dt12_10_flt = float(dt12_10)\n",
    "dt12_11_flt = float(dt12_11)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 208,
   "id": "00d47387-3b73-4d7f-a102-c12e325ae9d4",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "region\n",
      "Seoul    14.79\n",
      "Seoul    14.48\n",
      "Seoul    14.29\n",
      "Seoul    12.77\n",
      "Seoul    12.39\n",
      "Name: rate_birth, dtype: float64\n",
      "region\n",
      "Seoul    4.8\n",
      "Seoul    5.0\n",
      "Seoul    4.7\n",
      "Seoul    4.2\n",
      "Seoul    4.1\n",
      "Name: rate_birth, dtype: float64\n",
      "region\n",
      "Seoul    7.8\n",
      "Seoul    6.9\n",
      "Seoul    7.8\n",
      "Seoul    7.9\n",
      "Seoul    9.7\n",
      "Name: rate_marriage, dtype: float64\n",
      "region\n",
      "Seoul    4.1\n",
      "Seoul    3.5\n",
      "Seoul    3.7\n",
      "Seoul    4.1\n",
      "Seoul    3.4\n",
      "Name: rate_marriage, dtype: float64\n",
      "region\n",
      "Seoul    10.3\n",
      "Seoul    10.5\n",
      "Seoul    10.4\n",
      "Seoul     9.0\n",
      "Seoul     8.9\n",
      "Name: rate_growth_natural, dtype: float64\n",
      "region\n",
      "Seoul   -1.5\n",
      "Seoul   -3.2\n",
      "Seoul   -2.3\n",
      "Seoul   -1.0\n",
      "Seoul   -0.6\n",
      "Name: rate_growth_natural, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# 05.17.01\n",
    "# confirm all floats\n",
    "# return values\n",
    "# return head / tail to confirm proper date / float conversions \n",
    "# dt01_\n",
    "\n",
    "print(dt01_02_flt.head())\n",
    "print(dt01_02_flt.tail())\n",
    "print(dt01_03_flt.head())\n",
    "print(dt01_03_flt.tail())\n",
    "print(dt01_04_flt.head())\n",
    "print(dt01_04_flt.tail())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "c54209c4-b8db-4b7d-9387-e445f6e81a95",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0        2005.0\n",
      "1        2011.0\n",
      "2        2012.0\n",
      "3        2013.0\n",
      "4        2014.0\n",
      "          ...  \n",
      "92852    2014.0\n",
      "92853    2015.0\n",
      "92854    2016.0\n",
      "92855    2017.0\n",
      "92856    2018.0\n",
      "Name: year, Length: 92857, dtype: float64 0          614.0\n",
      "1          896.0\n",
      "2         1310.0\n",
      "3         2208.0\n",
      "4          864.0\n",
      "          ...   \n",
      "92852    11600.0\n",
      "92853     8327.0\n",
      "92854     7931.0\n",
      "92855     8802.0\n",
      "92856     6747.0\n",
      "Name: income, Length: 92857, dtype: float64 0        2.0\n",
      "1        2.0\n",
      "2        2.0\n",
      "3        2.0\n",
      "4        2.0\n",
      "        ... \n",
      "92852    5.0\n",
      "92853    5.0\n",
      "92854    5.0\n",
      "92855    5.0\n",
      "92856    5.0\n",
      "Name: education_level, Length: 92857, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# 05.17.02\n",
    "# confirm all float\n",
    "# return values\n",
    "# return head / tail to confirm proper date / float conversions \n",
    "# dt02_\n",
    "\n",
    "print(dt02_01_flt,\n",
    "      dt02_02_flt,\n",
    "      dt02_03_flt\n",
    "     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "27cbf775-93a7-4671-9611-007b8c0dedda",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "51692272.0 25835298.0 25856974.0 49939926.0 24866514.0 25073412.0 1752346.0 968784.0 783562.0 22383187.0 21773507.0 17212.0 592468.0 19155585.0 3860997.0 12268973.0 530985.0 2283238.0 211392.0 1162311.0\n"
     ]
    }
   ],
   "source": [
    "# 05.17.03\n",
    "# confirm all float\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# return head / tail to confirm proper date / float conversions \n",
    "# dt03_\n",
    "\n",
    "print(dt03_00_flt,\n",
    "      dt03_01_flt,\n",
    "      dt03_02_flt,\n",
    "      dt03_03_flt,\n",
    "      dt03_04_flt,\n",
    "      dt03_05_flt,\n",
    "      dt03_06_flt,\n",
    "      dt03_07_flt,\n",
    "      dt03_08_flt,\n",
    "      dt03_09_flt,\n",
    "      dt03_10_flt,\n",
    "      dt03_11_flt,\n",
    "      dt03_12_flt,\n",
    "      dt03_13_flt,\n",
    "      dt03_14_flt,\n",
    "      dt03_15_flt,\n",
    "      dt03_16_flt,\n",
    "      dt03_17_flt,\n",
    "      dt03_18_flt,\n",
    "      dt03_19_flt\n",
    "     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "76294045-d109-4d34-981f-802f28c1471f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "48580293.0 24167098.0 24413195.0 47990761.0 23840896.0 24149865.0 589532.0 326202.0 263330.0 17574067.0 17339422.0 20727.0 213918.0 14677419.0 4089491.0 8576013.0 536070.0 1314452.0 161393.0 303097.0\n"
     ]
    }
   ],
   "source": [
    "# 05.17.04\n",
    "# confirm all float\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# return head / tail to confirm proper date / float conversions \n",
    "# dt04_\n",
    "\n",
    "print(dt04_00_flt,\n",
    "      dt04_01_flt,\n",
    "      dt04_02_flt,\n",
    "      dt04_03_flt,\n",
    "      dt04_04_flt,\n",
    "      dt04_05_flt,\n",
    "      dt04_06_flt,\n",
    "      dt04_07_flt,\n",
    "      dt04_08_flt,\n",
    "      dt04_09_flt,\n",
    "      dt04_10_flt,\n",
    "      dt04_11_flt,\n",
    "      dt04_12_flt,\n",
    "      dt04_13_flt,\n",
    "      dt04_14_flt,\n",
    "      dt04_15_flt,\n",
    "      dt04_16_flt,\n",
    "      dt04_17_flt,\n",
    "      dt04_18_flt,\n",
    "      dt04_19_flt\n",
    "     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "id": "4040066c-28ff-4054-b311-e255fc427795",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "47278951.0 23623954.0 23654997.0 47041434.0 23465650.0 23575784.0 237517.0 158304.0 79213.0 15988274.0 15887128.0 16551.0 84595.0 13222641.0 4263541.0 6962689.0 558513.0 1229208.0 208690.0 206511.0\n"
     ]
    }
   ],
   "source": [
    "# 05.17.05\n",
    "# confirm all float\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# return head / tail to confirm proper date / float conversions \n",
    "# dt05_\n",
    "\n",
    "print(dt05_00_flt,\n",
    "      dt05_01_flt,\n",
    "      dt05_02_flt,\n",
    "      dt05_03_flt,\n",
    "      dt05_04_flt,\n",
    "      dt05_05_flt,\n",
    "      dt05_06_flt,\n",
    "      dt05_07_flt,\n",
    "      dt05_08_flt,\n",
    "      dt05_09_flt,\n",
    "      dt05_10_flt,\n",
    "      dt05_11_flt,\n",
    "      dt05_12_flt,\n",
    "      dt05_13_flt,\n",
    "      dt05_14_flt,\n",
    "      dt05_15_flt,\n",
    "      dt05_16_flt,\n",
    "      dt05_17_flt,\n",
    "      dt05_18_flt,\n",
    "      dt05_19_flt\n",
    "     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "id": "46130cd6-338d-48a1-9155-a060249b5499",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "46136101.0 23158582.0 22977519.0 45985289.0 23068181.0 22917108.0 150812.0 90401.0 60411.0 14391374.0 14311807.0 14417.0 65150.0 11472401.0 4269180.0 5479828.0 849687.0 472236.0 401470.0 91814.0\n"
     ]
    }
   ],
   "source": [
    "# 05.17.06\n",
    "# confirm all float\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# return head / tail to confirm proper date / float conversions \n",
    "# dt06_\n",
    "\n",
    "print(dt06_00_flt,\n",
    "      dt06_01_flt,\n",
    "      dt06_02_flt,\n",
    "      dt06_03_flt,\n",
    "      dt06_04_flt,\n",
    "      dt06_05_flt,\n",
    "      dt06_06_flt,\n",
    "      dt06_07_flt,\n",
    "      dt06_08_flt,\n",
    "      dt06_09_flt,\n",
    "      dt06_10_flt,\n",
    "      dt06_11_flt,\n",
    "      dt06_12_flt,\n",
    "      dt06_13_flt,\n",
    "      dt06_14_flt,\n",
    "      dt06_15_flt,\n",
    "      dt06_16_flt,\n",
    "      dt06_17_flt,\n",
    "      dt06_18_flt,\n",
    "      dt06_19_flt\n",
    "     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "id": "6c2083e1-ca58-4684-aca8-4a2d24a6aca6",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "44608726.0 22389324.0 22219402.0 44553710.0 22357352.0 22196358.0 12958181.0 44028108.0 22046400.0 21981708.0 525602.0 310952.0 214650.0 17110.0 55016.0 31972.0 23044.0\n"
     ]
    }
   ],
   "source": [
    "# 05.17.07\n",
    "# confirm all float\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# return head / tail to confirm proper date / float conversions \n",
    "# dt07_\n",
    "\n",
    "print(dt07_00_flt,\n",
    "      dt07_01_flt,\n",
    "      dt07_02_flt,\n",
    "      dt07_03_flt,\n",
    "      dt07_04_flt,\n",
    "      dt07_05_flt,\n",
    "      dt07_06_flt,\n",
    "      dt07_07_flt,\n",
    "      dt07_08_flt,\n",
    "      dt07_09_flt,\n",
    "      dt07_10_flt,\n",
    "      dt07_11_flt,\n",
    "      dt07_12_flt,\n",
    "      dt07_13_flt,\n",
    "      dt07_14_flt,\n",
    "      dt07_15_flt,\n",
    "      dt07_16_flt\n",
    "     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "id": "b20b539d-6eac-42b2-a512-a91e2ecd2509",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "43410899.0 21782154.0 21628745.0 43390374.0 21770919.0 21619455.0 11354540.0 42782526.0 21446690.0 21335836.0 607848.0 324229.0 283619.0 6556.0 20525.0 11235.0 9290.0\n"
     ]
    }
   ],
   "source": [
    "# 05.17.08\n",
    "# confirm all float\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# return head / tail to confirm proper date / float conversions \n",
    "# dt08_\n",
    "\n",
    "print(dt08_00_flt,\n",
    "      dt08_01_flt,\n",
    "      dt08_02_flt,\n",
    "      dt08_03_flt,\n",
    "      dt08_04_flt,\n",
    "      dt08_05_flt,\n",
    "      dt08_06_flt,\n",
    "      dt08_07_flt,\n",
    "      dt08_08_flt,\n",
    "      dt08_09_flt,\n",
    "      dt08_10_flt,\n",
    "      dt08_11_flt,\n",
    "      dt08_12_flt,\n",
    "      dt08_13_flt,\n",
    "      dt08_14_flt,\n",
    "      dt08_15_flt,\n",
    "      dt08_16_flt\n",
    "     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "id": "04365210-1bee-4311-bd2b-747856e161dc",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "40448486.0 20243765.0 20204721.0 40419652.0 20227564.0 20192088.0 9571361.0 39772679.0 19925681.0 19846998.0 646973.0 301883.0 345090.0 10694.0 28834.0 16201.0 12633.0\n"
     ]
    }
   ],
   "source": [
    "# 05.17.09\n",
    "# confirm all float\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# return head / tail to confirm proper date / float conversions \n",
    "# dt09_\n",
    "\n",
    "print(dt09_00_flt,\n",
    "      dt09_01_flt,\n",
    "      dt09_02_flt,\n",
    "      dt09_03_flt,\n",
    "      dt09_04_flt,\n",
    "      dt09_05_flt,\n",
    "      dt09_06_flt,\n",
    "      dt09_07_flt,\n",
    "      dt09_08_flt,\n",
    "      dt09_09_flt,\n",
    "      dt09_10_flt,\n",
    "      dt09_11_flt,\n",
    "      dt09_12_flt,\n",
    "      dt09_13_flt,\n",
    "      dt09_14_flt,\n",
    "      dt09_15_flt,\n",
    "      dt09_16_flt\n",
    "     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 217,
   "id": "cae86a6d-84b7-4f08-b8a4-29f87b7aa157",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "37436315.0 18767201.0 18669114.0 37406815.0 18749306.0 18657509.0 7969201.0 36843251.0 18523047.0 18320204.0 563564.0 226259.0 337305.0 9404.0 29500.0 17895.0 11605.0\n"
     ]
    }
   ],
   "source": [
    "# 05.17.10\n",
    "# confirm all float\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# return head / tail to confirm proper date / float conversions \n",
    "# dt10_\n",
    "\n",
    "print(dt10_00_flt,\n",
    "      dt10_01_flt,\n",
    "      dt10_02_flt,\n",
    "      dt10_03_flt,\n",
    "      dt10_04_flt,\n",
    "      dt10_05_flt,\n",
    "      dt10_06_flt,\n",
    "      dt10_07_flt,\n",
    "      dt10_08_flt,\n",
    "      dt10_09_flt,\n",
    "      dt10_10_flt,\n",
    "      dt10_11_flt,\n",
    "      dt10_12_flt,\n",
    "      dt10_13_flt,\n",
    "      dt10_14_flt,\n",
    "      dt10_15_flt,\n",
    "      dt10_16_flt\n",
    "     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "id": "37131e10-c5c7-4a7c-b10a-bb8eee2e403b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6761239.0 6754257.0 6982.0 34706620.0 17461244.0 17245376.0 34678972.0 17445246.0 17233726.0 27648.0 15998.0 11650.0\n"
     ]
    }
   ],
   "source": [
    "# 05.17.11\n",
    "# confirm all float\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# return head / tail to confirm proper date / float conversions \n",
    "# dt11_\n",
    "\n",
    "print(dt11_00_flt,\n",
    "      dt11_01_flt,\n",
    "      dt11_02_flt,\n",
    "      dt11_03_flt,\n",
    "      dt11_04_flt,\n",
    "      dt11_05_flt,\n",
    "      dt11_06_flt,\n",
    "      dt11_07_flt,\n",
    "      dt11_08_flt,\n",
    "      dt11_09_flt,\n",
    "      dt11_10_flt,\n",
    "      dt11_11_flt\n",
    "     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 219,
   "id": "1481a332-e727-480d-a78d-1a1a7b042ae7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5863440.0 5856901.0 6539.0 30882386.0 15216002.0 15666384.0 30851984.0 15199940.0 15652044.0 30402.0 16062.0 14340.0\n"
     ]
    }
   ],
   "source": [
    "# 05.17.12\n",
    "# confirm all float\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# return head / tail to confirm proper date / float conversions \n",
    "# dt12_\n",
    "\n",
    "print(dt12_00_flt,\n",
    "      dt12_01_flt,\n",
    "      dt12_02_flt,\n",
    "      dt12_03_flt,\n",
    "      dt12_04_flt,\n",
    "      dt12_05_flt,\n",
    "      dt12_06_flt,\n",
    "      dt12_07_flt,\n",
    "      dt12_08_flt,\n",
    "      dt12_09_flt,\n",
    "      dt12_10_flt,\n",
    "      dt12_11_flt\n",
    "     )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 220,
   "id": "b416ecf2-37b9-4cdc-956c-4d965fea9260",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 05.18.01\n",
    "# calculate total for entire country\n",
    "# assign variable for total as _ttl\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# dt01_\n",
    "\n",
    "# print(dt01_ttl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 221,
   "id": "ba629aae-fa3e-49e9-8223-2b4f1dea2db8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 05.18.02\n",
    "# calculate total for entire country\n",
    "# assign variable for total as _ttl\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# dt02_\n",
    "\n",
    "# print(dt02_ttl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "id": "c5f427a8-6352-4ef2-a65f-c2ec115acf77",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "291008943.0\n"
     ]
    }
   ],
   "source": [
    "# 05.18.03\n",
    "# calculate total for entire country\n",
    "# assign variable for total as _ttl\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# dt03_\n",
    "\n",
    "dt03_ttl = dt03_00_flt + dt03_01_flt + dt03_02_flt + dt03_03_flt + dt03_04_flt + dt03_05_flt + dt03_06_flt + dt03_07_flt + dt03_08_flt + dt03_09_flt + dt03_10_flt + dt03_11_flt + dt03_12_flt + dt03_13_flt + dt03_14_flt + dt03_15_flt + dt03_16_flt + dt03_17_flt + dt03_18_flt + dt03_19_flt\n",
    "print(dt03_ttl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "id": "1b1cd9a8-340a-4a58-8461-2c29ed447121",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "259127241.0\n"
     ]
    }
   ],
   "source": [
    "# 05.18.04\n",
    "# calculate total for entire country\n",
    "# assign variable for total as _ttl\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# dt04_\n",
    "\n",
    "dt04_ttl = dt04_00_flt + dt04_01_flt + dt04_02_flt + dt04_03_flt + dt04_04_flt + dt04_05_flt + dt04_06_flt + dt04_07_flt + dt04_08_flt + dt04_09_flt + dt04_10_flt + dt04_11_flt + dt04_12_flt + dt04_13_flt + dt04_14_flt + dt04_15_flt + dt04_16_flt + dt04_17_flt + dt04_18_flt + dt04_19_flt\n",
    "print(dt04_ttl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 224,
   "id": "04fe6d63-9265-4420-a982-4797dea5d691",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "247744145.0\n"
     ]
    }
   ],
   "source": [
    "# 05.18.05\n",
    "# calculate total for entire country\n",
    "# assign variable for total as _ttl\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# dt05_\n",
    "\n",
    "dt05_ttl = dt05_00_flt + dt05_01_flt + dt05_02_flt + dt05_03_flt + dt05_04_flt + dt05_05_flt + dt05_06_flt + dt05_07_flt + dt05_08_flt + dt05_09_flt + dt05_10_flt + dt05_11_flt + dt05_12_flt + dt05_13_flt + dt05_14_flt + dt05_15_flt + dt05_16_flt + dt05_17_flt + dt05_18_flt + dt05_19_flt\n",
    "print(dt05_ttl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 225,
   "id": "d8b1da91-ccc7-498f-a07b-e51da08354ed",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "236363768.0\n"
     ]
    }
   ],
   "source": [
    "# 05.18.06\n",
    "# calculate total for entire country\n",
    "# assign variable for total as _ttl\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# dt06_\n",
    "\n",
    "dt06_ttl = dt06_00_flt + dt06_01_flt + dt06_02_flt + dt06_03_flt + dt06_04_flt + dt06_05_flt + dt06_06_flt + dt06_07_flt + dt06_08_flt + dt06_09_flt + dt06_10_flt + dt06_11_flt + dt06_12_flt + dt06_13_flt + dt06_14_flt + dt06_15_flt + dt06_16_flt + dt06_17_flt + dt06_18_flt + dt06_19_flt\n",
    "print(dt06_ttl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 226,
   "id": "c3637fec-4f76-48c9-bd29-b582772fadf0",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "280517615.0\n"
     ]
    }
   ],
   "source": [
    "# 05.18.07\n",
    "# calculate total for entire country\n",
    "# assign variable for total as _ttl\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# dt07_\n",
    "\n",
    "dt07_ttl = dt07_00_flt + dt07_01_flt + dt07_02_flt + dt07_03_flt + dt07_04_flt + dt07_05_flt + dt07_06_flt + dt07_07_flt + dt07_08_flt + dt07_09_flt + dt07_10_flt + dt07_11_flt + dt07_12_flt + dt07_13_flt + dt07_14_flt + dt07_15_flt + dt07_16_flt\n",
    "print(dt07_ttl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 227,
   "id": "bd9edd31-38fc-4841-9e2d-754bc845cc14",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "271785440.0\n"
     ]
    }
   ],
   "source": [
    "# 05.18.08\n",
    "# calculate total for entire country\n",
    "# assign variable for total as _ttl\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# dt08_\n",
    "\n",
    "dt08_ttl = dt08_00_flt + dt08_01_flt + dt08_02_flt + dt08_03_flt + dt08_04_flt + dt08_05_flt + dt08_06_flt + dt08_07_flt + dt08_08_flt + dt08_09_flt + dt08_10_flt + dt08_11_flt + dt08_12_flt + dt08_13_flt + dt08_14_flt + dt08_15_flt + dt08_16_flt\n",
    "print(dt08_ttl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "id": "8e21123f-d96c-4f4a-bb69-b11b2c56d4ef",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "252215303.0\n"
     ]
    }
   ],
   "source": [
    "# 05.18.09\n",
    "# calculate total for entire country\n",
    "# assign variable for total as _ttl\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# dt09_\n",
    "\n",
    "dt09_ttl = dt09_00_flt + dt09_01_flt + dt09_02_flt + dt09_03_flt + dt09_04_flt + dt09_05_flt + dt09_06_flt + dt09_07_flt + dt09_08_flt + dt09_09_flt + dt09_10_flt + dt09_11_flt + dt09_12_flt + dt09_13_flt + dt09_14_flt + dt09_15_flt + dt09_16_flt\n",
    "print(dt09_ttl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 229,
   "id": "b401764c-c520-4e4e-9862-218f78d74e99",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "232537495.0\n"
     ]
    }
   ],
   "source": [
    "# 05.18.10\n",
    "# calculate total for entire country\n",
    "# assign variable for total as _ttl\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# dt10_\n",
    "\n",
    "dt10_ttl = dt10_00_flt + dt10_01_flt + dt10_02_flt + dt10_03_flt + dt10_04_flt + dt10_05_flt + dt10_06_flt + dt10_07_flt + dt10_08_flt + dt10_09_flt + dt10_10_flt + dt10_11_flt + dt10_12_flt + dt10_13_flt + dt10_14_flt + dt10_15_flt + dt10_16_flt\n",
    "print(dt10_ttl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "id": "cbe39043-8e2d-4727-a84e-13f1927701f7",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "152348958.0\n"
     ]
    }
   ],
   "source": [
    "# 05.18.11\n",
    "# calculate total for entire country\n",
    "# assign variable for total as _ttl\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# dt11_\n",
    "\n",
    "dt11_ttl = dt11_00_flt + dt11_01_flt + dt11_02_flt + dt11_03_flt + dt11_04_flt + dt11_05_flt + dt11_06_flt + dt11_07_flt + dt11_08_flt + dt11_09_flt + dt11_10_flt + dt11_11_flt\n",
    "print(dt11_ttl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 231,
   "id": "088c921e-7f4c-4702-ad06-fc5f23764fb2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "135256424.0\n"
     ]
    }
   ],
   "source": [
    "# 05.18.12\n",
    "# calculate total for entire country\n",
    "# assign variable for total as _ttl\n",
    "# add variable 0 for total\n",
    "# return values\n",
    "# dt12_\n",
    "\n",
    "dt12_ttl = dt12_00_flt + dt12_01_flt + dt12_02_flt + dt12_03_flt + dt12_04_flt + dt12_05_flt + dt12_06_flt + dt12_07_flt + dt12_08_flt + dt12_09_flt + dt12_10_flt + dt12_11_flt\n",
    "print(dt12_ttl)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 232,
   "id": "89cf3119-1912-48e8-8cda-7af35aed13b2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 05.19.01\n",
    "# calculate mean\n",
    "# assign variable for mean as _x\n",
    "# add variable 0 for total\n",
    "# return mean\n",
    "# dt01_\n",
    "\n",
    "# print(dt01_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 233,
   "id": "408ff761-888f-48c0-b607-4e432ce66ea7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 05.19.02\n",
    "# calculate mean\n",
    "# assign variable for mean as _x\n",
    "# add variable 0 for total\n",
    "# return mean\n",
    "# dt02_\n",
    "\n",
    "# print(dt02_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 234,
   "id": "514c1d7d-eaae-4d91-9946-215f9731d455",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14550447.15\n"
     ]
    }
   ],
   "source": [
    "# 05.19.03\n",
    "# calculate mean\n",
    "# assign variable for mean as _x\n",
    "# add variable 0 for total\n",
    "# return mean\n",
    "# dt03_\n",
    "\n",
    "dt03_ = [\n",
    "        dt03_00_flt,\n",
    "        dt03_01_flt,\n",
    "        dt03_02_flt,\n",
    "        dt03_03_flt,\n",
    "        dt03_04_flt,\n",
    "        dt03_05_flt,\n",
    "        dt03_06_flt,\n",
    "        dt03_07_flt,\n",
    "        dt03_08_flt,\n",
    "        dt03_09_flt,\n",
    "        dt03_10_flt,\n",
    "        dt03_11_flt,\n",
    "        dt03_12_flt,\n",
    "        dt03_13_flt,\n",
    "        dt03_14_flt,\n",
    "        dt03_15_flt,\n",
    "        dt03_16_flt,\n",
    "        dt03_17_flt,\n",
    "        dt03_18_flt,\n",
    "        dt03_19_flt\n",
    "        ]\n",
    "dt03_x = statistics.mean(dt03_)\n",
    "print(dt03_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 235,
   "id": "081e994c-07ef-44df-9cee-3af237d90f52",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12956362.05\n"
     ]
    }
   ],
   "source": [
    "# 05.19.04\n",
    "# calculate mean\n",
    "# assign variable for mean as _x\n",
    "# add variable 0 for total\n",
    "# return mean\n",
    "# dt04_\n",
    "\n",
    "dt04_ = [\n",
    "        dt04_00_flt,\n",
    "        dt04_01_flt,\n",
    "        dt04_02_flt,\n",
    "        dt04_03_flt,\n",
    "        dt04_04_flt,\n",
    "        dt04_05_flt,\n",
    "        dt04_06_flt,\n",
    "        dt04_07_flt,\n",
    "        dt04_08_flt,\n",
    "        dt04_09_flt,\n",
    "        dt04_10_flt,\n",
    "        dt04_11_flt,\n",
    "        dt04_12_flt,\n",
    "        dt04_13_flt,\n",
    "        dt04_14_flt,\n",
    "        dt04_15_flt,\n",
    "        dt04_16_flt,\n",
    "        dt04_17_flt,\n",
    "        dt04_18_flt,\n",
    "        dt04_19_flt\n",
    "        ]\n",
    "dt04_x = statistics.mean(dt04_)\n",
    "print(dt04_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 236,
   "id": "cdd43cc4-1e1b-43f5-9f09-5e5e089b8e82",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12387207.25\n"
     ]
    }
   ],
   "source": [
    "# 05.19.05\n",
    "# calculate mean\n",
    "# assign variable for mean as _x\n",
    "# add variable 0 for total\n",
    "# return mean\n",
    "# dt05_\n",
    "\n",
    "dt05_ = [\n",
    "        dt05_00_flt,\n",
    "        dt05_01_flt,\n",
    "        dt05_02_flt,\n",
    "        dt05_03_flt,\n",
    "        dt05_04_flt,\n",
    "        dt05_05_flt,\n",
    "        dt05_06_flt,\n",
    "        dt05_07_flt,\n",
    "        dt05_08_flt,\n",
    "        dt05_09_flt,\n",
    "        dt05_10_flt,\n",
    "        dt05_11_flt,\n",
    "        dt05_12_flt,\n",
    "        dt05_13_flt,\n",
    "        dt05_14_flt,\n",
    "        dt05_15_flt,\n",
    "        dt05_16_flt,\n",
    "        dt05_17_flt,\n",
    "        dt05_18_flt,\n",
    "        dt05_19_flt\n",
    "        ]\n",
    "dt05_x = statistics.mean(dt05_)\n",
    "print(dt05_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 237,
   "id": "1a04ab7f-63ef-4d45-a2ef-e427fa8cedff",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "11818188.4\n"
     ]
    }
   ],
   "source": [
    "# 05.19.06\n",
    "# calculate mean\n",
    "# assign variable for mean as _x\n",
    "# add variable 0 for total\n",
    "# return mean\n",
    "# dt06_\n",
    "\n",
    "dt06_ = [\n",
    "        dt06_00_flt,\n",
    "        dt06_01_flt,\n",
    "        dt06_02_flt,\n",
    "        dt06_03_flt,\n",
    "        dt06_04_flt,\n",
    "        dt06_05_flt,\n",
    "        dt06_06_flt,\n",
    "        dt06_07_flt,\n",
    "        dt06_08_flt,\n",
    "        dt06_09_flt,\n",
    "        dt06_10_flt,\n",
    "        dt06_11_flt,\n",
    "        dt06_12_flt,\n",
    "        dt06_13_flt,\n",
    "        dt06_14_flt,\n",
    "        dt06_15_flt,\n",
    "        dt06_16_flt,\n",
    "        dt06_17_flt,\n",
    "        dt06_18_flt,\n",
    "        dt06_19_flt\n",
    "        ]\n",
    "dt06_x = statistics.mean(dt06_)\n",
    "print(dt06_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 238,
   "id": "73b0e156-d0dd-446b-a66b-f1afe21b936f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16501036.176470589\n"
     ]
    }
   ],
   "source": [
    "# 05.19.07\n",
    "# calculate mean\n",
    "# assign variable for mean as _x\n",
    "# add variable 0 for total\n",
    "# return mean\n",
    "# dt07_\n",
    "\n",
    "dt07_ = [\n",
    "        dt07_00_flt,\n",
    "        dt07_01_flt,\n",
    "        dt07_02_flt,\n",
    "        dt07_03_flt,\n",
    "        dt07_04_flt,\n",
    "        dt07_05_flt,\n",
    "        dt07_06_flt,\n",
    "        dt07_07_flt,\n",
    "        dt07_08_flt,\n",
    "        dt07_09_flt,\n",
    "        dt07_10_flt,\n",
    "        dt07_11_flt,\n",
    "        dt07_12_flt,\n",
    "        dt07_13_flt,\n",
    "        dt07_14_flt,\n",
    "        dt07_15_flt,\n",
    "        dt07_16_flt\n",
    "        ]\n",
    "dt07_x = statistics.mean(dt07_)\n",
    "print(dt07_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 239,
   "id": "b38d181c-0e66-4407-8d2d-fae42d1eb46e",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "15987378.823529411\n"
     ]
    }
   ],
   "source": [
    "# 05.19.08\n",
    "# calculate mean\n",
    "# assign variable for mean as _x\n",
    "# add variable 0 for total\n",
    "# return mean\n",
    "# dt08_\n",
    "\n",
    "dt08_ = [\n",
    "        dt08_00_flt,\n",
    "        dt08_01_flt,\n",
    "        dt08_02_flt,\n",
    "        dt08_03_flt,\n",
    "        dt08_04_flt,\n",
    "        dt08_05_flt,\n",
    "        dt08_06_flt,\n",
    "        dt08_07_flt,\n",
    "        dt08_08_flt,\n",
    "        dt08_09_flt,\n",
    "        dt08_10_flt,\n",
    "        dt08_11_flt,\n",
    "        dt08_12_flt,\n",
    "        dt08_13_flt,\n",
    "        dt08_14_flt,\n",
    "        dt08_15_flt,\n",
    "        dt08_16_flt\n",
    "        ]\n",
    "dt08_x = statistics.mean(dt08_)\n",
    "print(dt08_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 240,
   "id": "9b9516dc-f8ce-4d27-9e30-3265d7702e05",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14836194.294117646\n"
     ]
    }
   ],
   "source": [
    "# 05.19.09\n",
    "# calculate mean\n",
    "# assign variable for mean as _x\n",
    "# add variable 0 for total\n",
    "# return mean\n",
    "# dt09_\n",
    "\n",
    "dt09_ = [\n",
    "        dt09_00_flt,\n",
    "        dt09_01_flt,\n",
    "        dt09_02_flt,\n",
    "        dt09_03_flt,\n",
    "        dt09_04_flt,\n",
    "        dt09_05_flt,\n",
    "        dt09_06_flt,\n",
    "        dt09_07_flt,\n",
    "        dt09_08_flt,\n",
    "        dt09_09_flt,\n",
    "        dt09_10_flt,\n",
    "        dt09_11_flt,\n",
    "        dt09_12_flt,\n",
    "        dt09_13_flt,\n",
    "        dt09_14_flt,\n",
    "        dt09_15_flt,\n",
    "        dt09_16_flt\n",
    "        ]\n",
    "dt09_x = statistics.mean(dt09_)\n",
    "print(dt09_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 241,
   "id": "c75e24b2-6457-4a6d-b276-92617076f7b9",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13678676.176470589\n"
     ]
    }
   ],
   "source": [
    "# 05.19.10\n",
    "# calculate mean\n",
    "# assign variable for mean as _x\n",
    "# add variable 0 for total\n",
    "# return mean\n",
    "# dt10_\n",
    "\n",
    "dt10_ = [\n",
    "        dt10_00_flt,\n",
    "        dt10_01_flt,\n",
    "        dt10_02_flt,\n",
    "        dt10_03_flt,\n",
    "        dt10_04_flt,\n",
    "        dt10_05_flt,\n",
    "        dt10_06_flt,\n",
    "        dt10_07_flt,\n",
    "        dt10_08_flt,\n",
    "        dt10_09_flt,\n",
    "        dt10_10_flt,\n",
    "        dt10_11_flt,\n",
    "        dt10_12_flt,\n",
    "        dt10_13_flt,\n",
    "        dt10_14_flt,\n",
    "        dt10_15_flt,\n",
    "        dt10_16_flt\n",
    "        ]\n",
    "dt10_x = statistics.mean(dt10_)\n",
    "print(dt10_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 242,
   "id": "c09d60bf-8e83-46bd-83e7-6e72811a1f02",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "13849905.272727273\n"
     ]
    }
   ],
   "source": [
    "# 05.19.11\n",
    "# calculate mean\n",
    "# assign variable for mean as _x\n",
    "# add variable 0 for total\n",
    "# return mean\n",
    "# dt11_\n",
    "\n",
    "dt11_ = [\n",
    "        dt11_00_flt,\n",
    "        dt11_01_flt,\n",
    "        dt11_02_flt,\n",
    "        dt11_03_flt,\n",
    "        dt11_04_flt,\n",
    "        dt11_05_flt,\n",
    "        dt11_06_flt,\n",
    "        dt11_07_flt,\n",
    "        dt11_08_flt,\n",
    "        dt11_09_flt,\n",
    "        dt11_10_flt,\n",
    "        dt11_11_flt\n",
    "        ]\n",
    "dt11_sum = dt11_00_flt + dt11_01_flt + dt11_02_flt + dt11_03_flt + dt11_04_flt + dt11_05_flt + dt11_06_flt + dt11_07_flt + dt11_08_flt + dt11_09_flt + dt11_10_flt + dt11_11_flt\n",
    "dt11_x = dt11_sum / 11\n",
    "print(dt11_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 243,
   "id": "b6a5eac8-770a-4ae0-bf0b-de765ace695f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12296038.545454545\n"
     ]
    }
   ],
   "source": [
    "# 05.19.12\n",
    "# calculate mean\n",
    "# assign variable for mean as _x\n",
    "# add variable 0 for total\n",
    "# return mean\n",
    "# dt12_\n",
    "\n",
    "dt12_ = [\n",
    "        dt12_00_flt,\n",
    "        dt12_01_flt,\n",
    "        dt12_02_flt,\n",
    "        dt12_03_flt,\n",
    "        dt12_04_flt,\n",
    "        dt12_05_flt,\n",
    "        dt12_06_flt,\n",
    "        dt12_07_flt,\n",
    "        dt12_08_flt,\n",
    "        dt12_09_flt,\n",
    "        dt12_10_flt,\n",
    "        dt12_11_flt\n",
    "        ]\n",
    "dt12_sum = dt12_00_flt + dt12_01_flt + dt12_02_flt + dt12_03_flt + dt12_04_flt + dt12_05_flt + dt12_06_flt + dt12_07_flt + dt12_08_flt + dt12_09_flt + dt12_10_flt + dt12_11_flt\n",
    "dt12_x = dt12_sum / 11\n",
    "print(dt12_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 244,
   "id": "b044a5b5-c961-400f-8d29-c452dbdaadfa",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.20.01\n",
    "# connect SQL DB\n",
    "# enters 9 variables from 9 datasets into SQL database\n",
    "# dt03-dt12\n",
    "\n",
    "conn = sqlite3.connect('dt_.sqlite')\n",
    "c = conn.cursor()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 245,
   "id": "d03a5967-64c2-4d2b-bb34-340098cc34df",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 05.20.02\n",
    "# function create table\n",
    "# table = population\n",
    "# enters 9 variables from 9 datasets into SQL database\n",
    "# dt03-dt12\n",
    "\n",
    "def tbl_create():\n",
    "    c.execute('CREATE TABLE IF NOT EXISTS Population (Year TEXT, Population TEXT)')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 246,
   "id": "61aa4b4d-e274-4c0e-b592-c8f732c09e90",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.20.03\n",
    "# function enter data\n",
    "# enters 9 variables from 9 datasets into SQL database\n",
    "# dt03-dt12\n",
    "\n",
    "def dt03_entry():\n",
    "    Year = '2022'\n",
    "    Population = dt03_x\n",
    "    c.execute(\"INSERT INTO Population (Year, Population) VALUES(?,  ?)\", (Year, Population))\n",
    "    conn.commit()\n",
    "\n",
    "def dt04_entry():\n",
    "    Year = '2010'\n",
    "    Population = dt04_x\n",
    "    c.execute(\"INSERT INTO Population (Year, Population) VALUES(?, ?)\", (Year, Population))\n",
    "    conn.commit()\n",
    "\n",
    "def dt05_entry():\n",
    "    Year = '2005'\n",
    "    Population = dt05_x\n",
    "    c.execute(\"INSERT INTO Population (Year, Population) VALUES(?, ?)\", (Year, Population))\n",
    "    conn.commit()\n",
    "    \n",
    "def dt06_entry():\n",
    "    Year = '2000'\n",
    "    Population = dt06_x\n",
    "    c.execute(\"INSERT INTO Population (Year, Population) VALUES(?, ?)\", (Year, Population))\n",
    "    conn.commit()\n",
    "    \n",
    "def dt07_entry():\n",
    "    Year = '1995'\n",
    "    Population = dt07_x\n",
    "    c.execute(\"INSERT INTO Population (Year, Population) VALUES(?, ?)\", (Year, Population))\n",
    "    conn.commit()\n",
    "    \n",
    "def dt08_entry():\n",
    "    Year = '1990'\n",
    "    Population = dt08_x\n",
    "    c.execute(\"INSERT INTO Population (Year, Population) VALUES(?, ?)\", (Year, Population))\n",
    "    conn.commit()\n",
    "    \n",
    "def dt09_entry():\n",
    "    Year = '1985'\n",
    "    Population = dt09_x\n",
    "    c.execute(\"INSERT INTO Population (Year, Population) VALUES(?, ?)\", (Year, Population))\n",
    "    conn.commit()\n",
    "    \n",
    "def dt10_entry():\n",
    "    Year = '1980'\n",
    "    Population = dt10_x\n",
    "    c.execute(\"INSERT INTO Population (Year, Population) VALUES(?, ?)\", (Year, Population))\n",
    "    conn.commit()\n",
    "    \n",
    "def dt11_entry():\n",
    "    Year = '1975'\n",
    "    Population = dt11_x\n",
    "    c.execute(\"INSERT INTO Population (Year, Population) VALUES(?, ?)\", (Year, Population))\n",
    "    conn.commit()\n",
    "    \n",
    "def dt12_entry():\n",
    "    Year = '1970'\n",
    "    Population = dt12_x\n",
    "    c.execute(\"INSERT INTO Population (Year, Population) VALUES(?, ?)\", (Year, Population))\n",
    "    conn.commit()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 247,
   "id": "bb52acc4-a37a-420c-8722-ba2aef04acc7",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.20.04\n",
    "# create table\n",
    "# enters 9 variables from 9 datasets into SQL database\n",
    "# dt03-dt12\n",
    "\n",
    "tbl_create()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 248,
   "id": "df0f0d59-4e87-46ec-aa77-65376757d0d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 05.20.05\n",
    "# commit data\n",
    "# enters 9 variables from 9 datasets into SQL database\n",
    "# dt03-dt12\n",
    "\n",
    "dt03_entry()\n",
    "dt04_entry()\n",
    "dt05_entry()\n",
    "dt06_entry()\n",
    "dt07_entry()\n",
    "dt08_entry()\n",
    "dt09_entry()\n",
    "dt10_entry()\n",
    "dt11_entry()\n",
    "dt12_entry()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 249,
   "id": "542580d6-44e7-48ea-97d9-d2bbfe09e4e9",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.20.06\n",
    "# close connection\n",
    "# dt03-dt12\n",
    "\n",
    "c.close()\n",
    "conn.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 250,
   "id": "a60d02b9-5f90-4f58-8f8a-a9be121b7b0b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('2022', '14550447.15')\n",
      "('2010', '12956362.05')\n",
      "('2005', '12387207.25')\n",
      "('2000', '11818188.4')\n",
      "('1995', '16501036.1764706')\n",
      "('1990', '15987378.8235294')\n",
      "('1985', '14836194.2941176')\n",
      "('1980', '13678676.1764706')\n",
      "('1975', '13849905.2727273')\n",
      "('1970', '12296038.5454545')\n"
     ]
    }
   ],
   "source": [
    "# 05.20.07\n",
    "# create a SQL connection to our SQLite database\n",
    "# iterated over by row\n",
    "# SQL database has 12 combined datasets\n",
    "# return SQL database\n",
    "# dt03-dt12\n",
    "\n",
    "con = sqlite3.connect(\"dt_.sqlite\")\n",
    "cur = con.cursor()\n",
    "\n",
    "for row in cur.execute('SELECT * FROM Population;'):\n",
    "    print(row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 251,
   "id": "8f20d26f-d0b9-4060-ac4f-51f73ba5e459",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.20.08\n",
    "# create a SQL connection to our SQLite database\n",
    "# SQL database has 12 combined datasets\n",
    "# return data\n",
    "# dt03-dt12\n",
    "\n",
    "cur.execute('SELECT Year, Population FROM Population')\n",
    "rslt = cur.fetchall()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 252,
   "id": "405b92c3-6215-4133-9a87-6229eaedb16f",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.20.09\n",
    "# create a SQL connection to our SQLite database\n",
    "# SQL database has 12 combined datasets\n",
    "# assign variables for year and population as dt03-dt12\n",
    "# dt03-dt12\n",
    "\n",
    "dt03_dt12_x = [rslt[0] for rslt in rslt]\n",
    "dt03_dt12_y = [rslt[1] for rslt in rslt]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 253,
   "id": "98957f18-5dfd-426f-8fcc-c60fdf37ce42",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 05.20.10\n",
    "# plot population trend to date\n",
    "# assign variable for plot components as dt03-dt12\n",
    "# dt03-dt12\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "x = range(len(dt03_dt12_y))\n",
    "width = 0.35\n",
    "ax.bar([i + width/2 for i in x], dt03_dt12_y, width, label='Population')\n",
    "ax.set_xticks(x)\n",
    "ax.set_xticklabels(dt03_dt12_x)\n",
    "ax.set_title('ROK Population')\n",
    "ax.set_xlabel('Year')\n",
    "ax.set_ylabel('Population')\n",
    "ax.legend()\n",
    "plt.xticks(\n",
    "    rotation=45, \n",
    "    horizontalalignment='right',\n",
    "    fontweight='light',\n",
    "    fontsize=6\n",
    ")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 254,
   "id": "9a8bbe41-d968-46a5-926c-7afcaf579fa6",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 05.20.11\n",
    "# plot population trend to date\n",
    "# assign variable for plot components as # dt03-dt12\n",
    "# dt03-dt12\n",
    "\n",
    "dt03_dt12_fig = plt.figure(figsize = (10, 5))\n",
    "plt.plot(dt03_dt12_x, dt03_dt12_y, '-.')\n",
    "plt.xticks(\n",
    "    rotation=45, \n",
    "    horizontalalignment='right',\n",
    "    fontweight='light',\n",
    "    fontsize=6\n",
    ")\n",
    "plt.xlabel(\"Year\")\n",
    "plt.ylabel(\"Population\")\n",
    "plt.title(\"ROK population to date\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 255,
   "id": "8ed2de73-c959-4660-8bec-dc8e70bffcee",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "highest population: 16501036.1764706\n"
     ]
    }
   ],
   "source": [
    "# 05.20.12\n",
    "# iterated over by row\n",
    "# SQL database has 12 combined datasets\n",
    "# return highest population\n",
    "# dt03-dt12\n",
    "\n",
    "for dt03_dt12_x, dt03_dt12_y in con.execute(\"SELECT count(*), Population FROM Population GROUP BY Population ORDER BY count(*) DESC\"):\n",
    "    print(\"highest population: {}\".format(dt03_dt12_y, dt03_dt12_x))\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 256,
   "id": "3e0700bc-7781-4eab-981e-cc7296ebc90f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "lowest population: 11818188.4\n"
     ]
    }
   ],
   "source": [
    "# 05.20.12\n",
    "# iterated over by row\n",
    "# SQL database has 12 combined datasets\n",
    "# return lowest population\n",
    "# dt03-dt12\n",
    "\n",
    "for dt03_dt12_x, dt03_dt12_y in con.execute(\"SELECT count(*), Population FROM Population GROUP BY Population ORDER BY count(*) ASC\"):\n",
    "    print(\"lowest population: {}\".format(dt03_dt12_y, dt03_dt12_x))\n",
    "    break"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 257,
   "id": "8614d16c-3759-4088-89be-d12f91890a61",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 05.21.01\n",
    "# combine variables into new df\n",
    "# compiles 19 rows: 01-19\n",
    "# assign variable for new dataset as _yr_x\n",
    "# add variable 0 for total\n",
    "# return df\n",
    "# dt01\n",
    "\n",
    "# print(dt01_yr_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 258,
   "id": "838f9e2e-206f-43e0-ad4e-2a617eb7d048",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 05.22.01\n",
    "# combine variables into new df\n",
    "# compiles 19 rows: 01-19\n",
    "# assign variable for new dataset as _yr_x\n",
    "# add variable 0 for total\n",
    "# return df\n",
    "# dt02\n",
    "\n",
    "# print(dt02_yr_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 259,
   "id": "999c2333-a79f-41a2-a469-17f00db27cda",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           00          01          02  ...         17        18         19\n",
      "0  51692272.0  25835298.0  25856974.0  ...  2283238.0  211392.0  1162311.0\n",
      "\n",
      "[1 rows x 20 columns]\n"
     ]
    }
   ],
   "source": [
    "# 05.23.01\n",
    "# combine variables into new df\n",
    "# compiles 19 rows: 01-19\n",
    "# assign variable for new dataset as _yr_x\n",
    "# add variable 0 for total\n",
    "# return df\n",
    "# dt03\n",
    "\n",
    "np.random.seed(123)\n",
    "dt03_yr_y = {\n",
    "            '00':dt03_00_flt,\n",
    "            '01':dt03_01_flt,\n",
    "            '02':dt03_02_flt,\n",
    "            '03':dt03_03_flt,\n",
    "            '04':dt03_04_flt,\n",
    "            '05':dt03_05_flt,\n",
    "            '06':dt03_06_flt,\n",
    "            '07':dt03_07_flt,\n",
    "            '08':dt03_08_flt,\n",
    "            '09':dt03_09_flt,\n",
    "            '10':dt03_10_flt,\n",
    "            '11':dt03_11_flt,\n",
    "            '12':dt03_12_flt,\n",
    "            '13':dt03_13_flt,\n",
    "            '14':dt03_14_flt,\n",
    "            '15':dt03_15_flt,\n",
    "            '16':dt03_16_flt,\n",
    "            '17':dt03_17_flt,\n",
    "            '18':dt03_18_flt,\n",
    "            '19':dt03_19_flt\n",
    "            }\n",
    "dt03_yr_x = pd.DataFrame(dt03_yr_y, index=[0])\n",
    "print(dt03_yr_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "id": "9a068804-76a2-465c-afed-a5e184b4e5d4",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 05.23.02\n",
    "# plot total populations by year\n",
    "# combines 9 datasets: dt03-dt12\n",
    "# assign variable for plot components as _yr_y\n",
    "# dt03\n",
    "\n",
    "dt03_yr_y_yr = list(dt03_yr_y.keys())\n",
    "dt03_yr_y_val = list(dt03_yr_y.values())\n",
    "dt03_yr_y_fig = plt.figure(figsize = (10, 5))\n",
    "plt.bar(dt03_yr_y_yr, dt03_yr_y_val, color ='#81A7D1', width = 0.4)\n",
    "plt.xlabel(\"months\")\n",
    "plt.ylabel(\"population\")\n",
    "plt.title(\"ROK\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "id": "49bca0b6-d5b9-4bab-9b1d-cdff0e0bf791",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           00          01          02  ...         17        18        19\n",
      "0  48580293.0  24167098.0  24413195.0  ...  1314452.0  161393.0  303097.0\n",
      "\n",
      "[1 rows x 20 columns]\n"
     ]
    }
   ],
   "source": [
    "# 05.24.01\n",
    "# combine variables into new df\n",
    "# compiles 19 rows: 01-19\n",
    "# assign variable for new dataset as _yr_x\n",
    "# add variable 0 for total\n",
    "# return df\n",
    "# dt04\n",
    "\n",
    "np.random.seed(123)\n",
    "dt04_yr_y = {\n",
    "            '00':dt04_00_flt,\n",
    "            '01':dt04_01_flt,\n",
    "            '02':dt04_02_flt,\n",
    "            '03':dt04_03_flt,\n",
    "            '04':dt04_04_flt,\n",
    "            '05':dt04_05_flt,\n",
    "            '06':dt04_06_flt,\n",
    "            '07':dt04_07_flt,\n",
    "            '08':dt04_08_flt,\n",
    "            '09':dt04_09_flt,\n",
    "            '10':dt04_10_flt,\n",
    "            '11':dt04_11_flt,\n",
    "            '12':dt04_12_flt,\n",
    "            '13':dt04_13_flt,\n",
    "            '14':dt04_14_flt,\n",
    "            '15':dt04_15_flt,\n",
    "            '16':dt04_16_flt,\n",
    "            '17':dt04_17_flt,\n",
    "            '18':dt04_18_flt,\n",
    "            '19':dt04_19_flt\n",
    "            }\n",
    "dt04_yr_x = pd.DataFrame(dt04_yr_y, index=[0])\n",
    "print(dt04_yr_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "id": "369cf938-187d-492f-a50a-c4d57fd0cb3f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 05.24.02\n",
    "# plot total populations by year\n",
    "# combines 9 datasets: dt03-dt12\n",
    "# assign variable for plot components as _yr_y\n",
    "# dt04\n",
    "\n",
    "dt04_yr_y_yr = list(dt04_yr_y.keys())\n",
    "dt04_yr_y_val = list(dt04_yr_y.values())\n",
    "dt04_yr_y_fig = plt.figure(figsize = (10, 5))\n",
    "plt.bar(dt04_yr_y_yr, dt04_yr_y_val, color ='#81A7D1', width = 0.4)\n",
    "plt.xlabel(\"months\")\n",
    "plt.ylabel(\"population\")\n",
    "plt.title(\"ROK\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "id": "0284f057-1248-4132-a517-8404aea8ceea",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           00          01          02  ...         17        18        19\n",
      "0  47278951.0  23623954.0  23654997.0  ...  1229208.0  208690.0  206511.0\n",
      "\n",
      "[1 rows x 20 columns]\n"
     ]
    }
   ],
   "source": [
    "# 05.25.01\n",
    "# combine variables into new df\n",
    "# compiles 19 rows: 01-19\n",
    "# assign variable for new dataset as _yr_x\n",
    "# add variable 0 for total\n",
    "# return df\n",
    "# dt05\n",
    "\n",
    "np.random.seed(123)\n",
    "dt05_yr_y = {\n",
    "            '00':dt05_00_flt,\n",
    "            '01':dt05_01_flt,\n",
    "            '02':dt05_02_flt,\n",
    "            '03':dt05_03_flt,\n",
    "            '04':dt05_04_flt,\n",
    "            '05':dt05_05_flt,\n",
    "            '06':dt05_06_flt,\n",
    "            '07':dt05_07_flt,\n",
    "            '08':dt05_08_flt,\n",
    "            '09':dt05_09_flt,\n",
    "            '10':dt05_10_flt,\n",
    "            '11':dt05_11_flt,\n",
    "            '12':dt05_12_flt,\n",
    "            '13':dt05_13_flt,\n",
    "            '14':dt05_14_flt,\n",
    "            '15':dt05_15_flt,\n",
    "            '16':dt05_16_flt,\n",
    "            '17':dt05_17_flt,\n",
    "            '18':dt05_18_flt,\n",
    "            '19':dt05_19_flt\n",
    "            }\n",
    "dt05_yr_x = pd.DataFrame(dt05_yr_y, index=[0])\n",
    "print(dt05_yr_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "id": "2a5c189d-70be-4ed0-b488-5df26ccb368f",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 05.25.02\n",
    "# plot total populations by year\n",
    "# combines 19 rows: 01-19\n",
    "# assign variable for plot components as _yr_y\n",
    "# dt05\n",
    "\n",
    "dt05_yr_y_yr = list(dt05_yr_y.keys())\n",
    "dt05_yr_y_val = list(dt05_yr_y.values())\n",
    "dt05_yr_y_fig = plt.figure(figsize = (10, 5))\n",
    "plt.bar(dt05_yr_y_yr, dt05_yr_y_val, color ='#81A7D1', width = 0.4)\n",
    "plt.xlabel(\"months\")\n",
    "plt.ylabel(\"population\")\n",
    "plt.title(\"ROK\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "id": "97e17c84-b356-424c-a04d-e810a7958ba5",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           00          01          02  ...        17        18       19\n",
      "0  46136101.0  23158582.0  22977519.0  ...  472236.0  401470.0  91814.0\n",
      "\n",
      "[1 rows x 20 columns]\n"
     ]
    }
   ],
   "source": [
    "# 05.26.01\n",
    "# combine variables into new df\n",
    "# compiles 19 rows: 01-19\n",
    "# assign variable for new dataset as _yr_x\n",
    "# add variable 0 for total\n",
    "# return df\n",
    "# dt06\n",
    "\n",
    "np.random.seed(123)\n",
    "dt06_yr_y = {\n",
    "            '00':dt06_00_flt,\n",
    "            '01':dt06_01_flt,\n",
    "            '02':dt06_02_flt,\n",
    "            '03':dt06_03_flt,\n",
    "            '04':dt06_04_flt,\n",
    "            '05':dt06_05_flt,\n",
    "            '06':dt06_06_flt,\n",
    "            '07':dt06_07_flt,\n",
    "            '08':dt06_08_flt,\n",
    "            '09':dt06_09_flt,\n",
    "            '10':dt06_10_flt,\n",
    "            '11':dt06_11_flt,\n",
    "            '12':dt06_12_flt,\n",
    "            '13':dt06_13_flt,\n",
    "            '14':dt06_14_flt,\n",
    "            '15':dt06_15_flt,\n",
    "            '16':dt06_16_flt,\n",
    "            '17':dt06_17_flt,\n",
    "            '18':dt06_18_flt,\n",
    "            '19':dt06_19_flt\n",
    "            }\n",
    "dt06_yr_x = pd.DataFrame(dt06_yr_y, index=[0])\n",
    "print(dt06_yr_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "id": "fa19d9e0-2837-455c-902f-1520bf522876",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 05.26.02\n",
    "# plot total populations by year\n",
    "# combines 19 rows: 01-19\n",
    "# assign variable for plot components as _yr_y\n",
    "# dt06\n",
    "\n",
    "dt06_yr_y_yr = list(dt06_yr_y.keys())\n",
    "dt06_yr_y_val = list(dt06_yr_y.values())\n",
    "dt06_yr_y_fig = plt.figure(figsize = (10, 5))\n",
    "plt.bar(dt06_yr_y_yr, dt06_yr_y_val, color ='#81A7D1', width = 0.4)\n",
    "plt.xlabel(\"months\")\n",
    "plt.ylabel(\"population\")\n",
    "plt.title(\"ROK\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "id": "9131fc52-45ca-4b8d-849b-3602a7b4b37b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           00          01          02  ...       14       15       16\n",
      "0  44608726.0  22389324.0  22219402.0  ...  55016.0  31972.0  23044.0\n",
      "\n",
      "[1 rows x 17 columns]\n"
     ]
    }
   ],
   "source": [
    "# 05.27.01\n",
    "# combine variables into new df\n",
    "# compiles 16 rows: 01-16\n",
    "# assign variable for new dataset as _yr_x\n",
    "# add variable 0 for total\n",
    "# return df\n",
    "# dt07\n",
    "\n",
    "np.random.seed(123)\n",
    "dt07_yr_y = {\n",
    "            '00':dt07_00_flt,\n",
    "            '01':dt07_01_flt,\n",
    "            '02':dt07_02_flt,\n",
    "            '03':dt07_03_flt,\n",
    "            '04':dt07_04_flt,\n",
    "            '05':dt07_05_flt,\n",
    "            '06':dt07_06_flt,\n",
    "            '07':dt07_07_flt,\n",
    "            '08':dt07_08_flt,\n",
    "            '09':dt07_09_flt,\n",
    "            '10':dt07_10_flt,\n",
    "            '11':dt07_11_flt,\n",
    "            '12':dt07_12_flt,\n",
    "            '13':dt07_13_flt,\n",
    "            '14':dt07_14_flt,\n",
    "            '15':dt07_15_flt,\n",
    "            '16':dt07_16_flt\n",
    "            }\n",
    "dt07_yr_x = pd.DataFrame(dt07_yr_y, index=[0])\n",
    "print(dt07_yr_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "id": "5ef2cc5b-adab-4c35-8ab5-177537cc42aa",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 05.27.02\n",
    "# plot total populations by year\n",
    "# combines 16 rows: 01-16\n",
    "# assign variable for plot components as _yr_y\n",
    "# dt07\n",
    "\n",
    "dt07_yr_y_yr = list(dt07_yr_y.keys())\n",
    "dt07_yr_y_val = list(dt07_yr_y.values())\n",
    "dt07_yr_y_fig = plt.figure(figsize = (10, 5))\n",
    "plt.bar(dt07_yr_y_yr, dt07_yr_y_val, color ='#81A7D1', width = 0.4)\n",
    "plt.xlabel(\"months\")\n",
    "plt.ylabel(\"population\")\n",
    "plt.title(\"ROK\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "id": "820d6a41-bc32-4e99-aef6-1c67801d12dd",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           00          01          02  ...       14       15      16\n",
      "0  43410899.0  21782154.0  21628745.0  ...  20525.0  11235.0  9290.0\n",
      "\n",
      "[1 rows x 17 columns]\n"
     ]
    }
   ],
   "source": [
    "# 05.28.01\n",
    "# combine variables into new df\n",
    "# compiles 16 rows: 01-16\n",
    "# assign variable for new dataset as _yr_x\n",
    "# add variable 0 for total\n",
    "# return df\n",
    "# dt08\n",
    "\n",
    "np.random.seed(123)\n",
    "dt08_yr_y = {\n",
    "            '00':dt08_00_flt,\n",
    "            '01':dt08_01_flt,\n",
    "            '02':dt08_02_flt,\n",
    "            '03':dt08_03_flt,\n",
    "            '04':dt08_04_flt,\n",
    "            '05':dt08_05_flt,\n",
    "            '06':dt08_06_flt,\n",
    "            '07':dt08_07_flt,\n",
    "            '08':dt08_08_flt,\n",
    "            '09':dt08_09_flt,\n",
    "            '10':dt08_10_flt,\n",
    "            '11':dt08_11_flt,\n",
    "            '12':dt08_12_flt,\n",
    "            '13':dt08_13_flt,\n",
    "            '14':dt08_14_flt,\n",
    "            '15':dt08_15_flt,\n",
    "            '16':dt08_16_flt\n",
    "            }\n",
    "dt08_yr_x = pd.DataFrame(dt08_yr_y, index=[0])\n",
    "print(dt08_yr_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "id": "9b1018a3-ea02-417d-94a4-c2d3d51d3128",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 05.28.02\n",
    "# plot total populations by year\n",
    "# combines 16 rows: 01-16\n",
    "# assign variable for plot components as _yr_y\n",
    "# dt08\n",
    "\n",
    "dt08_yr_y_yr = list(dt08_yr_y.keys())\n",
    "dt08_yr_y_val = list(dt08_yr_y.values())\n",
    "dt08_yr_y_fig = plt.figure(figsize = (10, 5))\n",
    "plt.bar(dt08_yr_y_yr, dt08_yr_y_val, color ='#81A7D1', width = 0.4)\n",
    "plt.xlabel(\"months\")\n",
    "plt.ylabel(\"population\")\n",
    "plt.title(\"ROK\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "id": "2660c10a-21f7-4462-a402-532fa3b57c37",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           00          01          02  ...       14       15       16\n",
      "0  40448486.0  20243765.0  20204721.0  ...  28834.0  16201.0  12633.0\n",
      "\n",
      "[1 rows x 17 columns]\n"
     ]
    }
   ],
   "source": [
    "# 05.29.01\n",
    "# combine variables into new df\n",
    "# compiles 16 rows: 01-16\n",
    "# assign variable for new dataset as _yr_x\n",
    "# add variable 0 for total\n",
    "# return df\n",
    "# dt09\n",
    "\n",
    "np.random.seed(123)\n",
    "dt09_yr_y = {\n",
    "            '00':dt09_00_flt,\n",
    "            '01':dt09_01_flt,\n",
    "            '02':dt09_02_flt,\n",
    "            '03':dt09_03_flt,\n",
    "            '04':dt09_04_flt,\n",
    "            '05':dt09_05_flt,\n",
    "            '06':dt09_06_flt,\n",
    "            '07':dt09_07_flt,\n",
    "            '08':dt09_08_flt,\n",
    "            '09':dt09_09_flt,\n",
    "            '10':dt09_10_flt,\n",
    "            '11':dt09_11_flt,\n",
    "            '12':dt09_12_flt,\n",
    "            '13':dt09_13_flt,\n",
    "            '14':dt09_14_flt,\n",
    "            '15':dt09_15_flt,\n",
    "            '16':dt09_16_flt\n",
    "            }\n",
    "dt09_yr_x = pd.DataFrame(dt09_yr_y, index=[0])\n",
    "print(dt09_yr_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "id": "32850116-a502-48b6-a7e8-dd896a4a435b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 05.29.02\n",
    "# plot total populations by year\n",
    "# combines 16 rows: 01-16\n",
    "# assign variable for plot components as _yr_y\n",
    "# dt09\n",
    "\n",
    "dt09_yr_y_yr = list(dt09_yr_y.keys())\n",
    "dt09_yr_y_val = list(dt09_yr_y.values())\n",
    "dt09_yr_y_fig = plt.figure(figsize = (10, 5))\n",
    "plt.bar(dt09_yr_y_yr, dt09_yr_y_val, color ='#81A7D1', width = 0.4)\n",
    "plt.xlabel(\"months\")\n",
    "plt.ylabel(\"population\")\n",
    "plt.title(\"ROK\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "id": "de2496b8-ebd0-433b-bc8f-4d447ee63b79",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           00          01          02  ...       14       15       16\n",
      "0  37436315.0  18767201.0  18669114.0  ...  29500.0  17895.0  11605.0\n",
      "\n",
      "[1 rows x 17 columns]\n"
     ]
    }
   ],
   "source": [
    "# 05.30.01\n",
    "# combine variables into new df\n",
    "# compiles 16 rows: 01-16\n",
    "# assign variable for new dataset as _yr_x\n",
    "# add variable 0 for total\n",
    "# return df\n",
    "# dt10\n",
    "\n",
    "np.random.seed(123)\n",
    "dt10_yr_y = {\n",
    "            '00':dt10_00_flt,\n",
    "            '01':dt10_01_flt,\n",
    "            '02':dt10_02_flt,\n",
    "            '03':dt10_03_flt,\n",
    "            '04':dt10_04_flt,\n",
    "            '05':dt10_05_flt,\n",
    "            '06':dt10_06_flt,\n",
    "            '07':dt10_07_flt,\n",
    "            '08':dt10_08_flt,\n",
    "            '09':dt10_09_flt,\n",
    "            '10':dt10_10_flt,\n",
    "            '11':dt10_11_flt,\n",
    "            '12':dt10_12_flt,\n",
    "            '13':dt10_13_flt,\n",
    "            '14':dt10_14_flt,\n",
    "            '15':dt10_15_flt,\n",
    "            '16':dt10_16_flt\n",
    "            }\n",
    "dt10_yr_x = pd.DataFrame(dt10_yr_y, index=[0])\n",
    "print(dt10_yr_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "id": "ede3c768-b2d9-4302-9ed2-d97da92c7b74",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 05.30.02\n",
    "# plot total populations by year\n",
    "# combines 16 rows: 01-16\n",
    "# assign variable for plot components as _yr_y\n",
    "# dt10\n",
    "\n",
    "dt10_yr_y_yr = list(dt10_yr_y.keys())\n",
    "dt10_yr_y_val = list(dt10_yr_y.values())\n",
    "dt10_yr_y_fig = plt.figure(figsize = (10, 5))\n",
    "plt.bar(dt10_yr_y_yr, dt10_yr_y_val, color ='#81A7D1', width = 0.4)\n",
    "plt.xlabel(\"months\")\n",
    "plt.ylabel(\"population\")\n",
    "plt.title(\"ROK\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "id": "d24f7b70-ec83-4b19-9cf5-c7f34a48e31a",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          00         01      02  ...       09       10       11\n",
      "0  6761239.0  6754257.0  6982.0  ...  27648.0  15998.0  11650.0\n",
      "\n",
      "[1 rows x 12 columns]\n"
     ]
    }
   ],
   "source": [
    "# 05.31.01\n",
    "# combine variables into new df\n",
    "# compiles 11 rows: 01-11\n",
    "# assign variable for new dataset as _yr_x\n",
    "# add variable 0 for total\n",
    "# return df\n",
    "# dt11\n",
    "\n",
    "np.random.seed(123)\n",
    "dt11_yr_y = {\n",
    "            '00':dt11_00_flt,\n",
    "            '01':dt11_01_flt,\n",
    "            '02':dt11_02_flt,\n",
    "            '03':dt11_03_flt,\n",
    "            '04':dt11_04_flt,\n",
    "            '05':dt11_05_flt,\n",
    "            '06':dt11_06_flt,\n",
    "            '07':dt11_07_flt,\n",
    "            '08':dt11_08_flt,\n",
    "            '09':dt11_09_flt,\n",
    "            '10':dt11_10_flt,\n",
    "            '11':dt11_11_flt\n",
    "            }\n",
    "dt11_yr_x = pd.DataFrame(dt11_yr_y, index=[0])\n",
    "print(dt11_yr_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "id": "cca3d33b-4a82-417f-a8ce-5c57fe3c0cdc",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 05.31.02\n",
    "# plot total populations by year\n",
    "# combines 11 rows: 01-11\n",
    "# assign variable for plot components as _yr_y\n",
    "# dt11\n",
    "\n",
    "dt11_yr_y_yr = list(dt11_yr_y.keys())\n",
    "dt11_yr_y_val = list(dt11_yr_y.values())\n",
    "dt11_yr_y_fig = plt.figure(figsize = (10, 5))\n",
    "plt.bar(dt11_yr_y_yr, dt11_yr_y_val, color ='#81A7D1', width = 0.4)\n",
    "plt.xlabel(\"months\")\n",
    "plt.ylabel(\"population\")\n",
    "plt.title(\"ROK\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "id": "7106f96d-d3ae-40a4-bfae-46a5ae2410df",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          00         01      02  ...       09       10       11\n",
      "0  5863440.0  5856901.0  6539.0  ...  30402.0  16062.0  14340.0\n",
      "\n",
      "[1 rows x 12 columns]\n"
     ]
    }
   ],
   "source": [
    "# 05.32.01\n",
    "# combine variables into new df\n",
    "# compiles 11 rows: 01-11\n",
    "# assign variable for new dataset as _yr_x\n",
    "# add variable 0 for total\n",
    "# return df\n",
    "# dt12\n",
    "\n",
    "np.random.seed(123)\n",
    "dt12_yr_y = {\n",
    "            '00':dt12_00_flt,\n",
    "            '01':dt12_01_flt,\n",
    "            '02':dt12_02_flt,\n",
    "            '03':dt12_03_flt,\n",
    "            '04':dt12_04_flt,\n",
    "            '05':dt12_05_flt,\n",
    "            '06':dt12_06_flt,\n",
    "            '07':dt12_07_flt,\n",
    "            '08':dt12_08_flt,\n",
    "            '09':dt12_09_flt,\n",
    "            '10':dt12_10_flt,\n",
    "            '11':dt12_11_flt\n",
    "            }\n",
    "dt12_yr_x = pd.DataFrame(dt12_yr_y, index=[0])\n",
    "print(dt12_yr_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "id": "7bd1862b-5499-45fc-9f60-d26b19e86c5b",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 05.32.02\n",
    "# plot total populations by year\n",
    "# combines 11 rows: 01-11\n",
    "# assign variable for plot components as _yr_y\n",
    "# dt12\n",
    "\n",
    "dt12_yr_y_yr = list(dt12_yr_y.keys())\n",
    "dt12_yr_y_val = list(dt12_yr_y.values())\n",
    "dt12_yr_y_fig = plt.figure(figsize = (10, 5))\n",
    "plt.bar(dt12_yr_y_yr, dt12_yr_y_val, color ='#81A7D1', width = 0.4)\n",
    "plt.xlabel(\"months\")\n",
    "plt.ylabel(\"population\")\n",
    "plt.title(\"ROK\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "id": "65ed30d1-d7d9-4015-a0a6-14346f48cd26",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 04.33.01\n",
    "# plot population trend to date\n",
    "# assign variable for plot components as _00\n",
    "# dt15\n",
    "\n",
    "dt15_00_x = dt15['avg_sales']\n",
    "dt15_00_y = dt15['pricePerArea']\n",
    "dt15_00_fig = plt.figure(figsize = (10, 5))\n",
    "plt.plot(dt15_00_x, dt15_00_y, '-.')\n",
    "plt.xticks(\n",
    "    rotation=45, \n",
    "    horizontalalignment='right',\n",
    "    fontweight='light',\n",
    "    fontsize=6\n",
    ")\n",
    "plt.xlabel(\"Sales\")\n",
    "plt.ylabel(\"Price\")\n",
    "plt.title(\"ROK housing price\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "id": "99b493d5-6f14-4d1c-8c8d-10722debe4cd",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "          1970         1975         1980  ...         2005         2010         2022\n",
      "0  135256424.0  152348958.0  232537495.0  ...  247744145.0  259127241.0  291008943.0\n",
      "\n",
      "[1 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# 05.34.01\n",
    "# plot total populations by year\n",
    "# combine variables into new df\n",
    "# compiles 9 datasets: dt03-dt12\n",
    "# assign variable for new dataset as _ttl_x\n",
    "# return df\n",
    "# dt_x, dt_y\n",
    "\n",
    "np.random.seed(123)\n",
    "dt_ttl_y = {\n",
    "            '1970':dt12_ttl,\n",
    "            '1975':dt11_ttl,\n",
    "            '1980':dt10_ttl,\n",
    "            '1985':dt09_ttl,\n",
    "            '1990':dt08_ttl,\n",
    "            '1995':dt07_ttl,\n",
    "            '2000':dt06_ttl,\n",
    "            '2005':dt05_ttl,\n",
    "            '2010':dt04_ttl,\n",
    "            '2022':dt03_ttl\n",
    "            }\n",
    "dt_ttl_x = pd.DataFrame(dt_ttl_y, index=[0])\n",
    "print(dt_ttl_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "id": "b7172cff-7107-4dac-8291-667e64e45bf2",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 05.34.02\n",
    "# plot total populations by year\n",
    "# combines 9 datasets: dt03-dt12\n",
    "# assign variable for plot components as _ttl_y\n",
    "# dt_x, dt_y\n",
    "\n",
    "dt_ttl_y_yr = list(dt_ttl_y.keys())\n",
    "dt_ttl_y_val = list(dt_ttl_y.values())\n",
    "dt_ttl_y_fig = plt.figure(figsize = (10, 5))\n",
    "plt.bar(dt_ttl_y_yr, dt_ttl_y_val, color ='#81A7D1', width = 0.4)\n",
    "plt.xlabel(\"year\")\n",
    "plt.ylabel(\"population\")\n",
    "plt.title(\"ROK\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "id": "1c90404d-2ffe-45c7-98da-97e841bcb470",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "           1970          1975  ...         2010         2022\n",
      "0  1.229604e+07  1.384991e+07  ...  12956362.05  14550447.15\n",
      "\n",
      "[1 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# 05.35.01\n",
    "# combine variables into new df\n",
    "# compiles 9 datasets: dt03-dt12\n",
    "# assign variable for new dataset as _x\n",
    "# return df\n",
    "# dt_x, dt_y\n",
    "\n",
    "np.random.seed(123)\n",
    "dt_mn_y = {\n",
    "        '1970':dt12_x,\n",
    "        '1975':dt11_x,\n",
    "        '1980':dt10_x,\n",
    "        '1985':dt09_x,\n",
    "        '1990':dt08_x,\n",
    "        '1995':dt07_x,\n",
    "        '2000':dt06_x,\n",
    "        '2005':dt05_x,\n",
    "        '2010':dt04_x,\n",
    "        '2022':dt03_x\n",
    "          }\n",
    "dt_mn_x = pd.DataFrame(dt_mn_y, index=[0])\n",
    "print(dt_mn_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "id": "74294419-a440-4c5a-a493-5ea419a8cc70",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 05.35.02\n",
    "# plot total populations by year\n",
    "# combines 9 datasets: dt03-dt12\n",
    "# assign variable for plot components as _mn_y\n",
    "# dt_x, dt_y\n",
    "\n",
    "dt_mn_yr = list(dt_mn_y.keys())\n",
    "dt_mn_val = list(dt_mn_y.values())\n",
    "dt_mn_fig = plt.figure(figsize = (10, 5))\n",
    "plt.bar(dt_mn_yr, dt_mn_val, color ='#81A7D1', width = 0.4)\n",
    "plt.xlabel(\"year\")\n",
    "plt.ylabel(\"population\")\n",
    "plt.title(\"ROK\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "id": "a5a3b130-8a15-4dc9-b7c5-314ad0432956",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "        1970       1975        1980  ...        2005        2010        2022\n",
      "0  5863440.0  6761239.0  37436315.0  ...  47278951.0  48580293.0  51692272.0\n",
      "\n",
      "[1 rows x 10 columns]\n"
     ]
    }
   ],
   "source": [
    "# 05.36.01\n",
    "# combine variables into new df\n",
    "# compiles 9 datasets: dt03-dt12\n",
    "# assign variable for new dataset as _00\n",
    "# return df\n",
    "# dt_00\n",
    "\n",
    "np.random.seed(123)\n",
    "dt_00_y = {\n",
    "        '1970':dt12_00_flt,\n",
    "        '1975':dt11_00_flt,\n",
    "        '1980':dt10_00_flt,\n",
    "        '1985':dt09_00_flt,\n",
    "        '1990':dt08_00_flt,\n",
    "        '1995':dt07_00_flt,\n",
    "        '2000':dt06_00_flt,\n",
    "        '2005':dt05_00_flt,\n",
    "        '2010':dt04_00_flt,\n",
    "        '2022':dt03_00_flt\n",
    "          }\n",
    "dt_00_x = pd.DataFrame(dt_00_y, index=[0])\n",
    "print(dt_00_x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 285,
   "id": "d59a3de7-052c-44c4-b039-ef7afce927a6",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 05.36.02\n",
    "# plot total populations by year\n",
    "# combines 9 datasets: dt03-dt12\n",
    "# assign variable for plot components as _00\n",
    "# dt_00\n",
    "\n",
    "dt_00_yr = list(dt_00_y.keys())\n",
    "dt_00_val = list(dt_00_y.values())\n",
    "dt_00_fig = plt.figure(figsize = (10, 5))\n",
    "plt.bar(dt_00_yr, dt_00_val, color ='#81A7D1', width = 0.4)\n",
    "plt.xlabel(\"year\")\n",
    "plt.ylabel(\"population\")\n",
    "plt.title(\"ROK\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "id": "94df2996-d5bc-42a7-bcab-c1d05c550317",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# 05.37.01\n",
    "# create vertices for total population\n",
    "# assign variable for new dataset as _00\n",
    "# return df\n",
    "# dt_00_vt\n",
    "\n",
    "dt_00_dt = [\n",
    "        ['1970', dt12_00_flt],\n",
    "        ['1975', dt11_00_flt],\n",
    "        ['1980', dt10_00_flt],\n",
    "        ['1985', dt09_00_flt],\n",
    "        ['1990', dt08_00_flt],\n",
    "        ['1995', dt07_00_flt],\n",
    "        ['2000', dt06_00_flt],\n",
    "        ['2005', dt05_00_flt],\n",
    "        ['2010', dt04_00_flt],\n",
    "        ['2022', dt03_00_flt]\n",
    "        ]\n",
    "dt_00_vt = pd.DataFrame(dt_00_dt, columns=['Year', 'Population'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "id": "e2fe1f6d-6780-492d-b7b3-05002770141c",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 05.37.02\n",
    "# plot population trend to date\n",
    "# assign variable for plot components as _00\n",
    "# dt_00_vt\n",
    "\n",
    "dt_00_vt_x = dt_00_vt['Year']\n",
    "dt_00_vt_y = dt_00_vt['Population']\n",
    "dt_00_vt_fig = plt.figure(figsize = (10, 5))\n",
    "plt.plot(dt_00_vt_x, dt_00_vt_y, '-.')\n",
    "plt.xticks(\n",
    "    rotation=45, \n",
    "    horizontalalignment='right',\n",
    "    fontweight='light',\n",
    "    fontsize=6\n",
    ")\n",
    "plt.xlabel(\"Year\")\n",
    "plt.ylabel(\"Population\")\n",
    "plt.title(\"ROK population to date\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "id": "2e0adb7a-af4e-4e32-a766-821d7e105a66",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1000x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 05.38.01\n",
    "# plot total populations by year\n",
    "# combines 9 datasets: dt03-dt12\n",
    "# assign variable for plot components as _00\n",
    "# dt_00\n",
    "\n",
    "dt14_00_x = dt14_00['Year']\n",
    "dt14_00_y = dt14_00['Population']\n",
    "dt14_00_fig = plt.figure(figsize = (10, 5))\n",
    "plt.plot(dt14_00_x, dt14_00_y, '-.')\n",
    "plt.xticks(\n",
    "    rotation=45, \n",
    "    horizontalalignment='right',\n",
    "    fontweight='light',\n",
    "    fontsize=6\n",
    ")\n",
    "plt.xlabel(\"Year\")\n",
    "plt.ylabel(\"Population\")\n",
    "plt.title(\"ROK population projection\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "id": "9429cec4-987c-4e86-ae02-5ce50a4a9442",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Summary of Term Project DSC540_WK12_term_Schreck-Kim.pdf"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "id": "b8a2f386-fa18-4fc5-af4c-475086ad4413",
   "metadata": {
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Now that you have cleaned and transformed your 3 datasets, you need to load them into a database. \n",
    "# You can choose what kind of database (SQLLite or MySQL, Postgre SQL are all free options). \n",
    "# You will want to load each dataset into SQL Lite as an individual table and then you must join the datasets together in Python into 1 dataset.\n",
    "# Once all the data is merged together in your database, create 5 visualizations that demonstrate the data you have cleansed. \n",
    "# You should have at least 2 visualizations that have data from more than one source (meaning, \n",
    "# if you have 3 tables, you must have visualizations that span across 2 of the tables – \n",
    "# you are also welcome to use your consolidated dataset that you created in the previous step, if you do that, you have met this requirement).\n",
    "# For the visualization portion of the project, you are welcome to use a python library like \n",
    "# Matplotlib, Seaborn, or an R package ggPlot2, Plotly, or Tableau/PowerBI.\n",
    "# PowerBI is a free tool that could be used – Tableau only has a free web author. \n",
    "# If your use Tableau/PowerBI you need to submit a PDF with your assignment vs the Tableau/PowerBI file. /p>\n",
    "# Clearly label each visualization. Submit your code for merging and storing in the database, \n",
    "# with your code for the visualizations along with a 250-500-word summary of what you learned and had to do to complete the project. \n",
    "# In your write-up, make sure to address the ethical implications of cleansing data and your project topic. \n",
    "# You can submit a Jupyter Notebook or a PDF of your code. If you submit a .py file you need to also include a PDF or attachment of your results.\n",
    "# Remember – your GitHub repository can act as a portfolio for potential employers! \n",
    "# I would highly suggest using this to submit your work, so you can fill it with good content that demonstrates the projects you are working on!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1f515c64-0050-4bb2-bb51-65e3321f4722",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
